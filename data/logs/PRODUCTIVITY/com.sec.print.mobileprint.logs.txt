--------- beginning of /dev/log/main
I/Icing   (  700): Indexing F4FAA6262FE39DDD50BAE6B7AF5CDB8D73BA0DB0 from com.google.android.gms
I/Icing   (  700): Indexing done F4FAA6262FE39DDD50BAE6B7AF5CDB8D73BA0DB0
D/AndroidRuntime(29675): 
D/AndroidRuntime(29675): >>>>>> AndroidRuntime START com.android.internal.os.RuntimeInit <<<<<<
D/AndroidRuntime(29675): CheckJNI is OFF
D/dalvikvm(29675): Using executionMode 2
D/dalvikvm(29675): Trying to load lib libjavacore.so 0x0
D/dalvikvm(29675): Added shared lib libjavacore.so 0x0
D/dalvikvm(29675): Trying to load lib libnativehelper.so 0x0
D/dalvikvm(29675): Added shared lib libnativehelper.so 0x0
D/dalvikvm(29675): No JNI_OnLoad found in libnativehelper.so 0x0, skipping init
D/dalvikvm(29675): Note: class Landroid/app/ActivityManagerNative; has 179 unimplemented (abstract) methods
E/memtrack(29675): Couldn't load memtrack module (No such file or directory)
E/android.os.Debug(29675): failed to load memtrack module: -2
D/AndroidRuntime(29675): Calling main entry com.android.commands.monkey.Monkey
--------- beginning of /dev/log/system
W/BroadcastQueue(  470): Skipping deliver [background] BroadcastRecord{4aded4e0 u-1 android.net.conn.CONNECTIVITY_CHANGE} to ReceiverList{4a9e4e7c 29675 (unknown name)/0/u-1 remote:4a9c3954}: process crashing
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10092, 1) failed with errno -13
I/ActivityManager(  470): Start proc com.sec.print.mobileprint for activity com.sec.print.mobileprint/.ui.IntroActivity: pid=29685 uid=10092 gids={50092, 3003, 1028, 1015, 1023}
I/dalvikvm(29685): ignoring registerObject request in thread=1
I/dalvikvm(29685): ignoring registerObject request in thread=1
D/        (29685): ShareAppClass onCreate
D/PrintJob(29685): Create Folder : /storage/emulated/0
D/PrintJob(29685): Create Folder : /storage/emulated/0/SamsungMobilePrint
D/PrintJob(29685): Success : 
D/USBSDK_JAVA(29685): SUSBMngr::initialize: SUCCESS: creating USB Manager
D/        (29685): ShareAppClass clearApplicationCache
D/        (29685): deleteDeviceInfoFile: false
D/        (29685): deleteDeviceInfoFile: false
W/System.err(29685): java.io.FileNotFoundException: /data/data/com.sec.print.mobileprint/files/programinfo1: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:409)
W/System.err(29685): 	at java.io.FileInputStream.<init>(FileInputStream.java:78)
W/System.err(29685): 	at android.app.ContextImpl.openFileInput(ContextImpl.java:780)
W/System.err(29685): 	at android.content.ContextWrapper.openFileInput(ContextWrapper.java:179)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.PrintSettingsItem.loadPrintProgramInfo(PrintSettingsItem.java:323)
W/System.err(29685): 	at com.sec.print.mobileprint.utils.PrintOptionInfo.loadDeviceInfoAndOption(PrintOptionInfo.java:134)
W/System.err(29685): 	at com.sec.print.mobileprint.utils.DeviceCapabilityOptionInfo$1.run(DeviceCapabilityOptionInfo.java:56)
W/System.err(29685): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.Posix.open(Native Method)
W/System.err(29685): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:393)
W/System.err(29685): 	... 6 more
W/System.err(29685): java.io.FileNotFoundException: /data/data/com.sec.print.mobileprint/files/programinfo2: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:409)
W/System.err(29685): 	at java.io.FileInputStream.<init>(FileInputStream.java:78)
W/System.err(29685): 	at android.app.ContextImpl.openFileInput(ContextImpl.java:780)
W/System.err(29685): 	at android.content.ContextWrapper.openFileInput(ContextWrapper.java:179)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.fax.FaxSettingsItem.loadPrintProgramInfo(FaxSettingsItem.java:294)
W/System.err(29685): 	at com.sec.print.mobileprint.utils.FaxOptionInfo.loadDeviceInfoAndOption(FaxOptionInfo.java:145)
W/System.err(29685): 	at com.sec.print.mobileprint.utils.DeviceCapabilityOptionInfo$1.run(DeviceCapabilityOptionInfo.java:64)
W/System.err(29685): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.Posix.open(Native Method)
W/System.err(29685): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:393)
W/System.err(29685): 	... 6 more
E/NFC     (29685): could not retrieve NFC service
D/dalvikvm(29685): JIT code cache reset in 0 ms (0 bytes 1/0)
D/dalvikvm(29685): GC_CONCURRENT freed 267K, 11% free 2906K/3252K, paused 1ms+0ms, total 3ms
D/MobilePrintBasicActivity(29685): onCreate
E/SurfaceFlinger(  166): glCheckFramebufferStatusOES error 36054
E/SurfaceFlinger(  166): got GL_FRAMEBUFFER_COMPLETE_OES error while taking screenshot
D/SurfaceFlinger(  166): setOrientation, mFbdev=0xb78d4da0, mFbDev->setOrientation=0xb69b9ce0, orientation=3
I/gralloc_nox(  166): setOrientation: orientation=3
I/InputReader(  470): Reconfiguring input devices.  changes=0x00000004
I/InputReader(  470): Device reconfigured: id=1, name='seamless mouse', size 1280x720, orientation 3, mode 1, display id 0
I/InputReader(  470): Device reconfigured: id=3, name='Android Input', size 1280x720, orientation 3, mode 1, display id 0
I/InputReader(  470): Device reconfigured: id=8, name='VirtualBox USB Tablet', size 1280x720, orientation 3, mode 1, display id 0
D/Tinker.DefaultAppLike(  656): onConfigurationChanged:{1.0 ?mcc?mnc en_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger qwerty/v/v dpad/v s.68}
I/ActivityManager(  470): Config changes=480 {1.0 ?mcc?mnc en_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger qwerty/v/v dpad/v s.68}
D/PhoneStatusBar(  528): mSettingsPanelGravity = 55
D/Sensors (  470): Client connection accepted (82)
D/dalvikvm(29685): Trying to load lib /data/app-lib/com.sec.print.mobileprint-1/libmsp.so 0x94f1d380
D/dalvikvm(29685): Added shared lib /data/app-lib/com.sec.print.mobileprint-1/libmsp.so 0x94f1d380
D/MSP Native(29685): MSP JNI_OnLoad
I/SF_CMN  (29685): INFO  SF_CMN - -------SamsungFramework v1.30.099.1-------
W/EGL_emulation(26125): eglSurfaceAttrib not implemented 3093 12436
W/EGL_emulation(  528): eglSurfaceAttrib not implemented 3093 12436
V/MSPDC   (29685): TRACE MSPDC - MSP Data Manager: jvm is set
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/dalvikvm(29685): GC_FOR_ALLOC freed 24K, 10% free 2929K/3252K, paused 2ms, total 2ms
I/dalvikvm-heap(29685): Grow heap (frag case) to 3.270MB for 354396-byte allocation
D/dalvikvm(29685): GC_FOR_ALLOC freed <1K, 10% free 3275K/3600K, paused 2ms, total 2ms
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/libEGL  (29685): loaded /system/lib/egl/libEGL_adreno.so
D/        (29685): HostConnection::get() New Host Connection established 0xb85c8450, tid 29685
D/libEGL  (29685): loaded /system/lib/egl/libGLESv1_CM_adreno.so
D/libEGL  (29685): loaded /system/lib/egl/libGLESv2_adreno.so
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
D/OpenGLRenderer(29685): Enabling debug mode 0
W/IInputConnectionWrapper(26125): showStatusIcon on inactive InputConnection
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1995 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.IntroActivity: +339ms (total +12s298ms)
I/WindowManager(  470): Screen frozen for +290ms due to Window{4ab9aebc u0 com.sec.print.mobileprint/com.sec.print.mobileprint.ui.IntroActivity}
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/dalvikvm(29685): GC_FOR_ALLOC freed 16K, 7% free 3409K/3656K, paused 2ms, total 2ms
I/dalvikvm-heap(29685): Grow heap (frag case) to 4.007MB for 635808-byte allocation
D/dalvikvm(29685): GC_FOR_ALLOC freed <1K, 6% free 4029K/4280K, paused 3ms, total 3ms
D/dalvikvm(29685): GC_CONCURRENT freed 1K, 6% free 4028K/4280K, paused 0ms+1ms, total 2ms
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.smartpanel.UsageAgreementActivity (has extras)} from pid 29685
D/MobilePrintBasicActivity(29685): onPause
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10007, 0) failed with errno -13
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-5.0, y[0]=0.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=5, eventTime=1634035, downTime=-1, deviceId=0, source=0x10004 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=3.0, y[0]=-4.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=3, eventTime=1634102, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_PROG_BLUE, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1634102, downTime=1634102, deviceId=-1, source=0x101 }
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=0.0 v=-4500.0)
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.smartpanel.UsageAgreementActivity: +116ms
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1634131, downTime=1634131, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
W/WindowManager(  470): updateFocusedWindowLocked, focusedAppToken is null.
D/Tinker.DefaultAppLike(  656): onConfigurationChanged:{1.0 ?mcc?mnc en_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger -keyb/v/h dpad/v s.69}
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
D/PhoneStatusBar(  528): mSettingsPanelGravity = 55
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
I/ActivityManager(  470): Config changes=30 {1.0 ?mcc?mnc en_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger -keyb/v/h dpad/v s.69}
W/ViewRootImpl(  470): Dropping event due to root view being removed: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1634618, downTime=1634618, deviceId=-1, source=0x101 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=186.0, y[0]=317.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1634621, downTime=1634620, deviceId=0, source=0x1002 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=186.0894, y[0]=325.68958, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1634621, downTime=1634620, deviceId=0, source=0x1002 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=261.0, y[0]=372.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1634624, downTime=1634624, deviceId=0, source=0x1002 }
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  470): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=243.39423, y[0]=390.95532, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=6, eventTime=1634625, downTime=1634624, deviceId=0, source=0x1002 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=240.29007, y[0]=392.74854, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1634625, downTime=1634624, deviceId=0, source=0x1002 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=295.0, y[0]=711.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1634627, downTime=1634627, deviceId=0, source=0x1002 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1634659, downTime=1634659, deviceId=-1, source=0x101 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=303.26465, y[0]=713.1565, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=2, eventTime=1634628, downTime=1634627, deviceId=0, source=0x1002 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=307.57333, y[0]=713.83093, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1634628, downTime=1634627, deviceId=0, source=0x1002 }
W/ViewRootImpl(  470): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=1.0, y[0]=1.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=29, eventTime=1634627, downTime=-1, deviceId=0, source=0x10004 }
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 470
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1634663, downTime=1634663, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_ADD, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1634669, downTime=1634669, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  470): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4acf0424 attribute=null, token = android.os.BinderProxy@4a88e730
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 470
I/ContentMaintenance(  700): Pruning caches...
I/ContentMaintenance(  700): Internal cache bytes used: 0; limit: 100000000; download size: 0
I/ContentMaintenance(  700): Cache pruning complete.
I/ContentMaintenance(  700): Beginning garbage collection.
I/RealtimeCacheCleanup(  700): Beginning Realtime garbage collection.
I/RealtimeCacheCleanup(  700): Finished Realtime garbage collection.
I/ContentMaintenance(  700): Finished garbage collection.
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 470
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 sel={act=android.intent.action.MAIN cat=[android.intent.category.APP_EMAIL]}} from pid 470
I/ActivityManager(  470): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 29685
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
W/PhoneFallbackEventHandler(29685): No activity found for android.intent.action.CALL_BUTTON.
W/WindowManager(  470): updateFocusedWindowLocked, focusedAppToken is null.
W/ViewRootImpl(  528): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=2.0, y[0]=-5.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=7, eventTime=1635074, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(  528): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1635074, downTime=1635074, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/InputMethodManagerService(  470): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4a94a430 (uid=10092 pid=29685)
D/dalvikvm(  626): GC_CONCURRENT freed 384K, 15% free 3043K/3556K, paused 1ms+0ms, total 2ms
W/InputMethodManagerService(  470): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4a94a430 (uid=10092 pid=29685)
W/InputManager(  470): Input event injection from pid 29675 failed.
W/InputEventReceiver(  528): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  528): Attempted to finish an input event but the input event receiver has already been disposed.
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/ViewRootImpl(  528): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=480.37732, y[0]=-215.11499, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1635129, downTime=1635129, deviceId=0, source=0x1002 }
D/dalvikvm(29685): GC_CONCURRENT freed 167K, 6% free 4270K/4520K, paused 2ms+1ms, total 4ms
D/MobilePrintBasicActivity(29685): onActivityResult : requestCode=11, resultCode=-1
W/ActivityManager(  470): Duplicate finish request for ActivityRecord{4ac705ac u0 com.sec.print.mobileprint/.ui.smartpanel.UsageAgreementActivity t209 f}
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.TutorialActivity (has extras)} from pid 29685
I/InputDispatcher(  470): Dropped event because of pending overdue app switch.
W/InputManager(  470): Input event injection from pid 29675 failed.
D/MobilePrintBasicActivity(29685): onCreate
W/EGL_emulation(26125): eglSurfaceAttrib not implemented 3093 12436
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
D/[ATO]   (29685): [shared pref] ipAddress = null
D/[ATO]   (29685): [shared pref] deviceName = null
D/[ATO]   (29685): [shared pref] modelName = null
D/[ATO]   (29685): [shared pref] modelNameExt = null
D/[ATO]   (29685): [shared pref] hostName = null
D/[ATO]   (29685): [shared pref] location = null
D/[ATO]   (29685): [shared pref] serialNumber = null
D/[ATO]   (29685): [shared pref] tonerUrl = null
D/[ATO]   (29685): [shared pref] sysDescr = null
D/[ATO]   (29685): [shared pref] macAddress = null
D/[ATO]   (29685): [shared pref] ecoMode = 0
D/[ATO]   (29685): [shared pref] vid = 0
D/[ATO]   (29685): [shared pref] pid = 0
D/[ATO]   (29685): [shared pref] isSCP = false
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/dalvikvm(29685): GC_FOR_ALLOC freed 125K, 5% free 4445K/4648K, paused 4ms, total 4ms
I/dalvikvm-heap(29685): Grow heap (frag case) to 4.875MB for 485092-byte allocation
D/dalvikvm(29685): GC_FOR_ALLOC freed <1K, 5% free 4918K/5124K, paused 3ms, total 3ms
D/dalvikvm(29685): GC_CONCURRENT freed 0K, 5% free 4918K/5124K, paused 1ms+0ms, total 3ms
D/dalvikvm(29685): GC_CONCURRENT freed 11K, 4% free 5499K/5696K, paused 0ms+0ms, total 2ms
D/dalvikvm(29685): WAIT_FOR_CONCURRENT_GC blocked 1ms
D/dalvikvm(29685): GC_FOR_ALLOC freed 2K, 4% free 5720K/5908K, paused 2ms, total 2ms
D/dalvikvm(29685): GC_FOR_ALLOC freed <1K, 3% free 6483K/6672K, paused 3ms, total 3ms
D/dalvikvm(29685): GC_FOR_ALLOC freed <1K, 3% free 7246K/7436K, paused 2ms, total 2ms
D/dalvikvm(29685): GC_FOR_ALLOC freed <1K, 3% free 8009K/8200K, paused 3ms, total 3ms
D/dalvikvm(29685): GC_FOR_ALLOC freed 474K, 7% free 9073K/9728K, paused 3ms, total 3ms
D/dalvikvm(29685): GC_CONCURRENT freed 476K, 6% free 10603K/11236K, paused 2ms+0ms, total 4ms
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1635359, downTime=1635359, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.TutorialActivity: +163ms
D/MobilePrintBasicActivity(29685): onDestroy
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 sel={act=android.intent.action.MAIN cat=[android.intent.category.APP_MUSIC]}} from pid 470
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
D/MobilePrintBasicActivity(29685): onPause
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10007, 1) failed with errno -13
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.LaunchScreenActivity (has extras)} from pid 29685
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-1.0, y[0]=1.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=1635701, downTime=-1, deviceId=0, source=0x10004 }
D/LaunchScreenActivity(29685): onCreate
D/MobilePrintBasicActivity(29685): onCreate
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
W/EGL_emulation(26125): eglSurfaceAttrib not implemented 3093 12436
D/LaunchScreenActivity(29685): setDisplay
D/MobilePrintBasicActivity(29685): setNavigationDrawer
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): setBottomBar
D/Mobile Print(29685): phone type = 1
D/Mobile Print(29685): phone type = 1
D/GCMRegistrar(29685): resetting backoff for com.sec.print.mobileprint
V/GCMRegistrar(29685): Registering app com.sec.print.mobileprint of senders 430978811775
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/LaunchScreenActivity(29685): getPluginData
D/LaunchScreenActivity(29685): setDeivceCapability
D/LaunchScreenActivity(29685): GetPluginListTask : doInBackground
D/PluginUtils(29685): fillPluginList: []
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/LaunchScreenActivity(29685): showLaunchScreenDialog handler
E/NFC     (29685): could not retrieve NFC service
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect Thread is  :1127
D/Mobile Print(29685): phone type = 1
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect : old serial = <null> new serial = <null>
V/IntentResolver(  470): Resolving type=null scheme=null defaultOnly=false userId=0 of Intent { act=com.sec.print.mobileprint.intent.action.FEATURE_PLUGIN flg=0x8 }
V/IntentResolver(  470): Action list: null
V/IntentResolver(  470): Final result list:
E/MSP     (29685): Can't get device serial number
D/MainPrint(29685): onStart
E/MainPrint(29685): plugin size: 0
D/SNMP    (29685): SNMP Community Name: public
W/MSP     (29685): Can't connect to device with wrong or unspecified connection parameters via NETWORK
D/MainPrint(29685): onStart
D/MainFax (29685): onStart
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
E/MainPrint(29685): plugin size: 0
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1635701, downTime=1635701, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_AVR_INPUT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1635826, downTime=1635826, deviceId=-1, source=0x101 }
W/SurfaceFlinger(  166): couldn't log to binary event log: overflow.
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.LaunchScreenActivity: +165ms
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1995 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/GCMBroadcastReceiver(29685): onReceive: com.google.android.c2dm.intent.REGISTRATION
V/GCMBroadcastReceiver(29685): GCM IntentService class: com.sec.print.mobileprint.GCMIntentService
V/GCMBaseIntentService(29685): Acquiring wakelock
V/GCMBaseIntentService(29685): Intent service name: GCMIntentService-430978811775-1
E/GCMRegistrar(29685): internal error: retry receiver class not set yet
V/GCMRegistrar(29685): Registering receiver
D/GCMBaseIntentService(29685): handleRegistration: registrationId = APA91bF8Z8suMaz6F7vmsCbR6LqfGwz2GXXc2-24UCg2ZEfPKjYYkzI_5UgRhlecWvomvIapIfnXWv2qh6TPlz1arIja68gVvMZtRnRkhwRDzrmbg8K8KToiNF7-kEBtJv7l5V5gagS2, error = null, unregistered = null
D/GCMRegistrar(29685): resetting backoff for com.sec.print.mobileprint
V/GCMRegistrar(29685): Saving regId on app version 281
I/GCMIntentService(29685): Device registered: regId = APA91bF8Z8suMaz6F7vmsCbR6LqfGwz2GXXc2-24UCg2ZEfPKjYYkzI_5UgRhlecWvomvIapIfnXWv2qh6TPlz1arIja68gVvMZtRnRkhwRDzrmbg8K8KToiNF7-kEBtJv7l5V5gagS2
D/MobilePrintBasicActivity(29685): onDestroy
I/GCP ServerUtilities(29685): serial number is empty, cannot register notifications on scp
V/GCMBaseIntentService(29685): Releasing wakelock
E/GCMService(29685): GCP login: false -1
D/dalvikvm(29685): GC_CONCURRENT freed 1327K, 11% free 11780K/13184K, paused 1ms+2ms, total 8ms
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
D/        (29685): onPageSelected: 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/        (29685): onPageSelected: 0
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
D/        (29685): onPageSelected: 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
I/WearableService(  637): Wearable Services stopping
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 470
D/        (29685): onPageSelected: 0
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(  470): GC_CONCURRENT freed 5535K, 44% free 12241K/21756K, paused 1ms+6ms, total 27ms
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
I/InputDispatcher(  470): Dropped event because of pending overdue app switch.
W/InputManager(  470): Input event injection from pid 29675 failed.
D/        (29685): onPageSelected: 2
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
D/LaunchScreenActivity(29685): startChooseADeviceActivity
W/DebugConnManager(29685): getNetworkInfo() on networkType 1
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.ChooseADeviceAtHomeTabActivity (has extras)} from pid 29685
D/MobilePrintBasicActivity(29685): onPause
D/Mobile Print(29685): phone type = 1
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10007, 0) failed with errno -13
D/MobilePrintBasicActivity(29685): onCreate
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/ChooseADeviceFragment(29685): onCreate
D/ChooseADeviceFragment(29685): onCreateView
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/com.sec.print.mobileprint.ui.ChooseADeviceFragment(29685): Data_Init
D/ChooseADeviceFragment(29685): launchDiscoveryTask
D/DiscoverDevices(29685): startDiscoveryService
D/MFPDiscovery(29685): InitializeDiscovery
W/ContextImpl(29685): Implicit intents with startService are not safe: Intent { act=com.sec.print.secmobileprint.DiscoveryService } android.content.ContextWrapper.startService:494 com.sec.print.mobileprint.utils.MFPDiscovery.InitializeDiscovery:107 com.sec.print.mobileprint.utils.DiscoverDevices.startDiscoveryService:70 
W/ContextImpl(29685): Implicit intents with startService are not safe: Intent { act=com.sec.print.secmobileprint.DiscoveryService } android.content.ContextWrapper.bindService:517 com.sec.print.mobileprint.utils.MFPDiscovery.InitializeDiscovery:108 com.sec.print.mobileprint.utils.DiscoverDevices.startDiscoveryService:70 
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
D/MFPDiscoveryService(29685): onCreate()
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1636755, downTime=1636755, deviceId=-1, source=0x101 }
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 470
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1636780, downTime=1636780, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/WindowManager(  470): Screenshot max retries 4 of Token{4aa48960 ActivityRecord{4a93de60 u0 com.sec.print.mobileprint/.ui.ChooseADeviceAtHomeTabActivity t209}} appWin=Window{4aa1de38 u0 com.sec.print.mobileprint/com.sec.print.mobileprint.ui.ChooseADeviceAtHomeTabActivity} drawState=2
W/WindowManager(  470): Screenshot failure taking screenshot for (720x1280) to layer 21025
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.ChooseADeviceAtHomeTabActivity: +391ms
D/DiscoverDevices(29685): startDeviceDiscovery
D/DiscoverDevices(29685): doInBackground
D/MFPDiscoveryService(29685): Start SNMP
D/MFPDiscoveryService(29685): StartSNMPDiscovery
D/DiscoveryBroadcast(29685): start
W/dalvikvm(29685): VFY: unable to find class referenced in signature (Lokhttp3/Request;)
W/dalvikvm(29685): VFY: unable to find class referenced in signature (Lokhttp3/Response;)
I/dalvikvm(29685): Could not find method okhttp3.Response.headers, referenced from method empirical.HelperClass.printOkHttpInfo
W/dalvikvm(29685): VFY: unable to resolve virtual method 52727: Lokhttp3/Response;.headers ()Lokhttp3/Headers;
D/dalvikvm(29685): VFY: replacing opcode 0x6e at 0x0006
W/dalvikvm(29685): VFY: unable to find class referenced in signature (Lokhttp3/Call;)
W/dalvikvm(29685): VFY: unable to find class referenced in signature (Lokhttp3/Response;)
I/dalvikvm(29685): Could not find method okhttp3.Call.request, referenced from method empirical.HelperClass.printOkHttpInfoFromCall
W/dalvikvm(29685): VFY: unable to resolve interface method 52721: Lokhttp3/Call;.request ()Lokhttp3/Request;
D/dalvikvm(29685): VFY: replacing opcode 0x72 at 0x0006
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("255.255.255.255")	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r10 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>()	timediff:2
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r13 = virtualinvoke $r12.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): create snmp broadcast : 172.17.100.15
I/System.out(29685): body:<org.snmp4j.smi.IpAddress: java.net.InetAddress createAnyAddress()>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r1)	timediff:1
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void <init>(org.snmp4j.smi.UdpAddress)>	sig:specialinvoke $r2.<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>($i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.mp.MPv3: byte[] createLocalEngineID()>	sig:$r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>()	timediff:1
I/System.out(29685): body:<org.snmp4j.mp.MPv3: byte[] createLocalEngineID()>	sig:$r5 = virtualinvoke $r4.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.smi.IpAddress: java.lang.String toString()>	sig:$r2 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String toString()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void setReceiveBufferSize(int)>($i1)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r13 = virtualinvoke $r12.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast: void start()>	sig:$r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): create snmp broadcast : 172.17.99.15
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void <init>(org.snmp4j.smi.UdpAddress)>	sig:specialinvoke $r2.<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>($i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.mp.MPv3: byte[] createLocalEngineID()>	sig:$r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.mp.MPv3: byte[] createLocalEngineID()>	sig:$r5 = virtualinvoke $r4.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:6
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.smi.IpAddress: java.lang.String toString()>	sig:$r2 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String toString()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MANUFACTURER:Xerox;MODEL:VersaLink C405;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void setReceiveBufferSize(int)>($i1)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:HP;CMD:PJL,PML,URP;MDL:HP LaserJet MFP M129-M134;CLS:PRINTER;DES:HP LaserJet MFP M130nw;MEM:MEM=233MB;PRN:G3Q58A;COMMENT:RES=600x1;LEDMDIS:USB#ff#04#01;CID:HPLJPCLMSMV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:FL;MCV:1.0;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Brother;CMD:PJL,PCL,PCLXL;MDL:HL-2270DW series;CLS:PRINTER;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP Color LaserJet MFP M277dw;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet MFP M277dw;MEM:MEM=214MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:DL;MCV:2.0;]]
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:4
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:HP;CMD:PJL,PML,URP;MDL:HP LaserJet MFP M129-M134;CLS:PRINTER;DES:HP LaserJet MFP M130nw;MEM:MEM=233MB;PRN:G3Q58A;COMMENT:RES=600x1;LEDMDIS:USB#ff#04#01;CID:HPLJPCLMSMV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:FL;MCV:1.0;]]
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP Color LaserJet MFP M277dw;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet MFP M277dw;MEM:MEM=214MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:DL;MCV:2.0;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
D/MFPDiscoveryService(29685): Start mDNS
D/MFPDiscoveryService(29685): StartmDNSDiscovery
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r8 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>()	timediff:1
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r10.<java.net.NetworkInterface: java.lang.String getName()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r12 = virtualinvoke $r10.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r15 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:1
D/MFPDiscoveryService(29685): Create mDNS: ip= 172.17.100.15, hostname= 172.17.100.15.local.
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:HP;MDL:HP Officejet Pro 8610;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:Adobe PostScript 3,PCL;MDL:Phaser 8560DN;CLS:Printer;DES:Xerox Phaser 8560, Color Printer,PostScript 3,Letter/A4 Size ]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MANUFACTURER:Xerox;MODEL:VersaLink C405;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/dalvikvm(29685): Could not find method java.util.concurrent.ConcurrentHashMap$KeySetView.iterator, referenced from method javax.jmdns.impl.DNSCache.toString
W/dalvikvm(29685): VFY: unable to resolve virtual method 49199: Ljava/util/concurrent/ConcurrentHashMap$KeySetView;.iterator ()Ljava/util/Iterator;
D/dalvikvm(29685): VFY: replacing opcode 0x6e at 0x0013
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo newHostInfo(java.net.InetAddress,javax.jmdns.impl.JmDNSImpl,java.lang.String)>	sig:$r8 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): [SNMP newDeviceFound] deviceId : MANUFACTURER:Xerox;MODEL:VersaLink C405;
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): getDeviceProperties : host = 172.17.100.2, version = 2
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): getDeviceProperties : host = 172.17.100.2, version = 2
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): [SNMP newDeviceFound] deviceId : MFG:HP;CMD:PJL,PML,URP;MDL:HP LaserJet MFP M129-M134;CLS:PRINTER;DES:HP LaserJet MFP M130nw;MEM:MEM=233MB;PRN:G3Q58A;COMMENT:RES=600x1;LEDMDIS:USB#ff#04#01;CID:HPLJPCLMSMV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:FL;MCV:1.0;
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: void <init>(java.net.InetAddress,java.lang.String,javax.jmdns.impl.JmDNSImpl)>	sig:$r7 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>($r1)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("224.0.0.251")	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:specialinvoke $r4.<java.net.MulticastSocket: void <init>(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>($r5)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void setTimeToLive(int)>(255)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)>($r3)	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8070;CLS:Printer;DES:Xerox AltaLink C8070;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:HP;MDL:HP Officejet Pro 8610;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:specialinvoke $r4.<java.net.DatagramPacket: void <init>(byte[],int)>($r1, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Brother;CMD:PJL,PCL,PCLXL;MDL:HL-2270DW series;CLS:PRINTER;]]
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): getDeviceProperties : host = 172.17.100.2, version = 2
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): [SNMP newDeviceFound] deviceId : MFG:Brother;CMD:PJL,PCL,PCLXL;MDL:HL-2270DW series;CLS:PRINTER;
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.99.2
D/MFPDiscoveryService(29685): [SNMP newDeviceFound] deviceId : MFG:HP;CMD:PJL,PML,URP;MDL:HP LaserJet MFP M129-M134;CLS:PRINTER;DES:HP LaserJet MFP M130nw;MEM:MEM=233MB;PRN:G3Q58A;COMMENT:RES=600x1;LEDMDIS:USB#ff#04#01;CID:HPLJPCLMSMV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:FL;MCV:1.0;
D/MFPDiscoveryService(29685): getDeviceProperties : host = 172.17.100.2, version = 2
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.99.2
D/MFPDiscoveryService(29685): [SNMP newDeviceFound] deviceId : MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP Color LaserJet MFP M277dw;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet MFP M277dw;MEM:MEM=214MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:DL;MCV:2.0;
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.100.2
D/MFPDiscoveryService(29685): [SNMP newDeviceFound] deviceId : MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP Color LaserJet MFP M277dw;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet MFP M277dw;MEM:MEM=214MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:DL;MCV:2.0;
D/MFPDiscoveryService(29685): SNMP newDeviceFound : 172.17.99.2
D/MFPDiscoveryService(29685): getDeviceProperties : host = 172.17.99.2, version = 2
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP Color LaserJet MFP M277dw;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet MFP M277dw;MEM:MEM=214MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:DL;MCV:2.0;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP Color LaserJet MFP M277dw;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet MFP M277dw;MEM:MEM=214MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;IPP-E:FF-04-01,FF-04-01,FF-09-01,FF-09-01;eSCL:FF-04-01,FF-04-01,FF-09-01,FF-09-01;MCT:MF;MCL:DL;MCV:2.0;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:Adobe PostScript 3,PCL;MDL:Phaser 8560DN;CLS:Printer;DES:Xerox Phaser 8560, Color Printer,PostScript 3,Letter/A4 Size ]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript;MDL:AltaLink B8045;CLS:Printer;DES:Xerox AltaLink B8045;CID:XR_PS_Office_Mono]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8030;CLS:Printer;DES:Xerox AltaLink C8030;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PCLXL,PCL,PDF,POSTSCRIPT;CID:HPLJPDLV1;1284.4DL:4d,4e,1;MDL:HP LaserJet 600 M601;CLS:PRINTER;DES:HP LaserJet 600 M601;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:1
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP LaserJet 500 colorMFP M570dn;CLS:PRINTER;DES:Hewlett-Packard LaserJet 500 colorMFP M570dn;MEM:MEM=227MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,MLC,BIDI-ECP,PJL,PCLXL,PCL,PDF,POSTSCRIPT;1284.4DL:4d,4e,1;MDL:HP Color LaserJet CM4730 MFP;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet CM4730 MFP;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r10.<java.net.NetworkInterface: java.lang.String getName()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r12 = virtualinvoke $r10.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r11 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: void StartmDNSDiscovery(boolean)>	sig:$r15 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/MFPDiscoveryService(29685): Create mDNS: ip= 172.17.99.15, hostname= 172.17.99.15.local.
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: javax.jmdns.impl.HostInfo newHostInfo(java.net.InetAddress,javax.jmdns.impl.JmDNSImpl,java.lang.String)>	sig:$r8 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8035;CLS:Printer;DES:Xerox AltaLink C8035;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript;MDL:AltaLink B8045;CLS:Printer;DES:Xerox AltaLink B8045;CID:XR_PS_Office_Mono]]
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript;MDL:AltaLink B8045;CLS:Printer;DES:Xerox AltaLink B8045;CID:XR_PS_Office_Mono]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: void <init>(java.net.InetAddress,java.lang.String,javax.jmdns.impl.JmDNSImpl)>	sig:$r7 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>($r1)	timediff:2
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8045;CLS:Printer;DES:Xerox AltaLink C8045;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,MLC,BIDI-ECP,PJL,PCLXL,PCL,PDF,POSTSCRIPT;1284.4DL:4d,4e,1;MDL:HP Color LaserJet CM4730 MFP;CLS:PRINTER;DES:Hewlett-Packard Color LaserJet CM4730 MFP;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PML,PCLXL,URP,PCL,PDF,POSTSCRIPT;MDL:HP LaserJet 500 colorMFP M570dn;CLS:PRINTER;DES:Hewlett-Packard LaserJet 500 colorMFP M570dn;MEM:MEM=227MB;COMMENT:RES=600x8;LEDMDIS:USB#ff#04#01;CID:HPLJPDLV1;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("224.0.0.251")	timediff:1
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:specialinvoke $r4.<java.net.MulticastSocket: void <init>(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>($r5)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void setTimeToLive(int)>(255)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void openMulticastSocket(javax.jmdns.impl.HostInfo)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)>($r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8030;CLS:Printer;DES:Xerox AltaLink C8030;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:specialinvoke $r4.<java.net.DatagramPacket: void <init>(byte[],int)>($r1, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:1
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8035;CLS:Printer;DES:Xerox AltaLink C8035;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
D/MFPDiscoveryService(29685): Start WFD
D/MFPDiscoveryService(29685): StartWFDDiscovery
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:1
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8045;CLS:Printer;DES:Xerox AltaLink C8045;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8070;CLS:Printer;DES:Xerox AltaLink C8070;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = noSuchObject]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8030;CLS:Printer;DES:Xerox AltaLink C8030;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript;MDL:AltaLink B8045;CLS:Printer;DES:Xerox AltaLink B8045;CID:XR_PS_Office_Mono]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8045;CLS:Printer;DES:Xerox AltaLink C8045;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=836320394, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Hewlett-Packard;CMD:PJL,PCLXL,PCL,PDF,POSTSCRIPT;CID:HPLJPDLV1;1284.4DL:4d,4e,1;MDL:HP LaserJet 600 M601;CLS:PRINTER;DES:HP LaserJet 600 M601;]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8045;CLS:Printer;DES:Xerox AltaLink C8045;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r7)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r15 = virtualinvoke $r7.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$r16 = virtualinvoke $r7.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$i1 = virtualinvoke $r7.<java.net.DatagramPacket: int getPort()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = RESPONSE[requestID=1742998968, errorStatus=Success(0), errorIndex=0, VBS[1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1 = MFG:Xerox;CMD:PCL, PJL, PostScript, XPS;MDL:AltaLink C8030;CLS:Printer;DES:Xerox AltaLink C8030;CID:XR_PS_Office_Color]]
I/System.out(29685): body:<com.sec.print.mobileprint.df.DiscoveryBroadcast$Listener: void onResponse(org.snmp4j.event.ResponseEvent)>	sig:$r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp newDeviceFound
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
D/MFPDiscoveryService(29685): StartSnmp
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void <init>()>	sig:$r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void <init>()>	sig:specialinvoke $r3.<java.net.DatagramSocket: void <init>(int)>($i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.mp.MPv3: byte[] createLocalEngineID()>	sig:$r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.mp.MPv3: byte[] createLocalEngineID()>	sig:$r5 = virtualinvoke $r4.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.smi.IpAddress: java.lang.String toString()>	sig:$r2 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String toString()>()	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: com.sec.print.mobileprint.df.SnmpSessionBase getSnmpSessionBase(java.lang.String)>	sig:$r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r6)	timediff:0
D/MFPDiscoveryService(29685): communityName : public
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: com.sec.print.mobileprint.df.SnmpSessionBase getSnmpSessionBase(java.lang.String)>	sig:$r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r6)	timediff:0
D/MFPDiscoveryService(29685): communityName : public
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: com.sec.print.mobileprint.df.SnmpSessionBase getSnmpSessionBase(java.lang.String)>	sig:$r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r6)	timediff:0
D/MFPDiscoveryService(29685): communityName : public
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:virtualinvoke $r3.<java.net.DatagramSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:specialinvoke $r7.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r2, $i1, $r16, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: com.sec.print.mobileprint.df.SnmpSessionBase getSnmpSessionBase(java.lang.String)>	sig:$r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r6)	timediff:0
D/MFPDiscoveryService(29685): communityName : public
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<com.sec.print.mobileprint.df.MFPDiscoveryService: com.sec.print.mobileprint.df.SnmpSessionBase getSnmpSessionBase(java.lang.String)>	sig:$r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r6)	timediff:0
D/MFPDiscoveryService(29685): communityName : public
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:1
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
D/dalvikvm(29685): GC_CONCURRENT freed 2645K, 19% free 12068K/14764K, paused 2ms+1ms, total 8ms
I/InputDispatcher(  470): Dropped event because of pending overdue app switch.
W/InputManager(  470): Input event injection from pid 29675 failed.
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:223
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:232
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:3
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
D/ChooseADeviceFragment(29685): handleMessage = { when=-317ms what=3 target=com.sec.print.mobileprint.ui.ChooseADeviceFragment$MessageHandler }
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/dalvikvm(29685): GC_EXPLICIT freed 857K, 21% free 11806K/14764K, paused 0ms+0ms, total 7ms
D/dalvikvm(29685): GC_EXPLICIT freed 7K, 21% free 11800K/14764K, paused 0ms+0ms, total 4ms
D/ChooseADeviceFragment(29685): stopDiscoveryTask
D/DiscoverDevices(29685): stopDeviceDiscovery
D/ChooseADeviceFragment(29685): onDestroyView
D/MFPDiscovery(29685): releaseService
D/ChooseADeviceFragment(29685): onDestroy
D/MobilePrintBasicActivity(29685): onPause
D/LaunchScreenActivity(29685): onActivityResult : requestCode=2, resultCode=2
D/MobilePrintBasicActivity(29685): onActivityResult : requestCode=2, resultCode=2
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/LaunchScreenActivity(29685): getPluginData
D/LaunchScreenActivity(29685): setDeivceCapability
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
W/InputMethodManagerService(  470): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4a94a430 (uid=10092 pid=29685)
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/LaunchScreenActivity(29685): GetPluginListTask : doInBackground
D/Mobile Print(29685): phone type = 1
D/PluginUtils(29685): fillPluginList: []
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/LaunchScreenActivity(29685): showLaunchScreenDialog handler
E/MainPrint(29685): plugin size: 0
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect Thread is  :1127
E/MSP     (29685): Can't get device serial number
D/Mobile Print(29685): phone type = 1
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect : old serial = <null> new serial = <null>
D/SNMP    (29685): SNMP Community Name: public
W/MSP     (29685): Can't connect to device with wrong or unspecified connection parameters via NETWORK
W/EGL_emulation(26125): eglSurfaceAttrib not implemented 3093 12436
V/IntentResolver(  470): Resolving type=null scheme=null defaultOnly=false userId=0 of Intent { act=com.sec.print.mobileprint.intent.action.FEATURE_PLUGIN flg=0x8 }
V/IntentResolver(  470): Action list: null
V/IntentResolver(  470): Final result list:
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=1637477, downTime=1637477, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=1637477, downTime=1637477, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=1637477, downTime=1637477, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=1637477, downTime=1637477, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=1637477, downTime=1637477, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=0.0, y[0]=4.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=1637473, downTime=-1, deviceId=0, source=0x10004 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
E/MainPrint(29685): plugin size: 0
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1637473, downTime=1637473, deviceId=-1, source=0x101 }
D/MobilePrintBasicActivity(29685): onPause
D/Mobile Print(29685): phone type = 1
W/System.err(29685): java.lang.IllegalArgumentException: Receiver not registered: com.sec.print.mobileprint.ui.notification.GCMService$1@4a88c6f0
W/System.err(29685): 	at android.app.LoadedApk.forgetReceiverDispatcher(LoadedApk.java:667)
W/System.err(29685): 	at android.app.ContextImpl.unregisterReceiver(ContextImpl.java:1466)
W/System.err(29685): 	at android.content.ContextWrapper.unregisterReceiver(ContextWrapper.java:489)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.notification.GCMService.unregisterReceiver(GCMService.java:48)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.LaunchScreenActivity.onPause(LaunchScreenActivity.java:819)
W/System.err(29685): 	at android.app.Activity.performPause(Activity.java:5335)
W/System.err(29685): 	at android.app.Instrumentation.callActivityOnPause(Instrumentation.java:1250)
W/System.err(29685): 	at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3046)
W/System.err(29685): 	at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3015)
W/System.err(29685): 	at android.app.ActivityThread.handlePauseActivity(ActivityThread.java:2993)
W/System.err(29685): 	at android.app.ActivityThread.access$1000(ActivityThread.java:135)
W/System.err(29685): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1207)
W/System.err(29685): 	at android.os.Handler.dispatchMessage(Handler.java:102)
W/System.err(29685): 	at android.os.Looper.loop(Looper.java:136)
W/System.err(29685): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
W/System.err(29685): 	at java.lang.reflect.Method.invokeNative(Native Method)
W/System.err(29685): 	at java.lang.reflect.Method.invoke(Method.java:515)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
W/System.err(29685): 	at dalvik.system.NativeStart.main(Native Method)
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.DocsListActivity (has extras)} from pid 29685
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:208
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:210
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:3
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:3
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:2
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:5
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:5
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
W/InputMethodManagerService(  470): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4a94a430 (uid=10092 pid=29685)
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r7.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>($r4)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$r2 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isLinkLocalAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r3.<java.net.InetAddress: boolean isMCLinkLocal()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.HostInfo: boolean shouldIgnorePacket(java.net.DatagramPacket)>	sig:$z1 = virtualinvoke $r2.<java.net.InetAddress: boolean isLoopbackAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r4 = virtualinvoke $r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$r6 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(java.net.DatagramPacket)>	sig:$i0 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:$i0 = virtualinvoke $r4.<java.net.DatagramPacket: int getPort()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$r3 = virtualinvoke $r1.<java.net.DatagramPacket: byte[] getData()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSIncoming: void <init>(int,int,boolean,java.net.DatagramPacket,long)>	sig:$i1 = virtualinvoke $r1.<java.net.DatagramPacket: int getLength()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.SocketListener: void run()>	sig:virtualinvoke $r4.<java.net.DatagramPacket: void setLength(int)>($i0)	timediff:0
W/System.err(29685): java.io.FileNotFoundException: /system/etc/vold.fstab: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:409)
W/System.err(29685): 	at java.io.FileInputStream.<init>(FileInputStream.java:78)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:158)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:138)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.readVoldFile(DocsListActivity.java:1065)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.getMicroSDCardDirectory(DocsListActivity.java:970)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.initDirectoriesToSearchFirst(DocsListActivity.java:1298)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.initStatic(DocsListActivity.java:1277)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.<clinit>(DocsListActivity.java:148)
W/System.err(29685): 	at java.lang.Class.newInstanceImpl(Native Method)
W/System.err(29685): 	at java.lang.Class.newInstance(Class.java:1208)
W/System.err(29685): 	at android.app.Instrumentation.newActivity(Instrumentation.java:1078)
W/System.err(29685): 	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2110)
W/System.err(29685): 	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2243)
W/System.err(29685): 	at android.app.ActivityThread.access$800(ActivityThread.java:135)
W/System.err(29685): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1196)
W/System.err(29685): 	at android.os.Handler.dispatchMessage(Handler.java:102)
W/System.err(29685): 	at android.os.Looper.loop(Looper.java:136)
W/System.err(29685): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
W/System.err(29685): 	at java.lang.reflect.Method.invokeNative(Native Method)
W/System.err(29685): 	at java.lang.reflect.Method.invoke(Method.java:515)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
W/System.err(29685): 	at dalvik.system.NativeStart.main(Native Method)
W/System.err(29685): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.Posix.open(Native Method)
W/System.err(29685): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:393)
W/System.err(29685): 	... 23 more
W/System.err(29685): java.io.FileNotFoundException: /system/etc/vold.fstab: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:409)
W/System.err(29685): 	at java.io.FileInputStream.<init>(FileInputStream.java:78)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:158)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:138)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.readVoldFile(DocsListActivity.java:1065)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.getMicroSDCardDirectory(DocsListActivity.java:970)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.initDirectoriesExcludedFromSearch(DocsListActivity.java:1313)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.initStatic(DocsListActivity.java:1278)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.<clinit>(DocsListActivity.java:148)
W/System.err(29685): 	at java.lang.Class.newInstanceImpl(Native Method)
W/System.err(29685): 	at java.lang.Class.newInstance(Class.java:1208)
W/System.err(29685): 	at android.app.Instrumentation.newActivity(Instrumentation.java:1078)
W/System.err(29685): 	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2110)
W/System.err(29685): 	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2243)
W/System.err(29685): 	at android.app.ActivityThread.access$800(ActivityThread.java:135)
W/System.err(29685): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1196)
W/System.err(29685): 	at android.os.Handler.dispatchMessage(Handler.java:102)
W/System.err(29685): 	at android.os.Looper.loop(Looper.java:136)
W/System.err(29685): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
W/System.err(29685): 	at java.lang.reflect.Method.invokeNative(Native Method)
W/System.err(29685): 	at java.lang.reflect.Method.invoke(Method.java:515)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
W/System.err(29685): 	at dalvik.system.NativeStart.main(Native Method)
W/System.err(29685): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.Posix.open(Native Method)
W/System.err(29685): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:393)
W/System.err(29685): 	... 23 more
D/MobilePrintBasicActivity(29685): onCreate
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/DocsList(29685): onCreate
D/MobilePrintBasicActivity(29685): setBottomBar
D/MobilePrintBasicActivity(29685): setFaxNumberBar
D/DocsList(29685): SearchFileTask:doInBackground
D/DocsList(29685): onStart
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/dalvikvm(29685): GC_EXPLICIT freed 1948K, 18% free 12116K/14764K, paused 2ms+1ms, total 13ms
D/MFPDiscoveryService(29685): Stop()
D/MFPDiscoveryService(29685): StopSNMPDiscovery
D/DiscoveryBroadcast(29685): snmp broadcast stop
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void close()>	sig:$z1 = virtualinvoke $r1.<java.net.DatagramSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void close()>	sig:virtualinvoke $r1.<java.net.DatagramSocket: void close()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp onResponse = null
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping$ListenThread: void run()>	sig:$z0 = virtualinvoke $r3.<java.net.DatagramSocket: boolean isClosed()>()	timediff:0
D/DiscoveryBroadcast(29685): snmp stop dispatcherThread
D/MFPDiscoveryService(29685): StopmDNSDiscovery
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1637601, downTime=1637601, deviceId=-1, source=0x101 }
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1637701, downTime=1637701, deviceId=-1, source=0x101 }
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.DocsListActivity: +132ms
D/DocsList(29685): Canceling downloadImageTask
D/DocsList(29685): Cancel downloadImageTask returened true
W/System.err(29685): java.io.FileNotFoundException: /system/etc/vold.fstab: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:409)
W/System.err(29685): 	at java.io.FileInputStream.<init>(FileInputStream.java:78)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:158)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:138)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.readVoldFile(DocsListActivity.java:1065)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.getMicroSDCardDirectory(DocsListActivity.java:970)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.access$27(DocsListActivity.java:968)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity$SearchFileTask.doInBackground(DocsListActivity.java:877)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity$SearchFileTask.doInBackground(DocsListActivity.java:1)
W/System.err(29685): 	at android.os.AsyncTask$2.call(AsyncTask.java:288)
W/System.err(29685): 	at java.util.concurrent.FutureTask.run(FutureTask.java:237)
W/System.err(29685): 	at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
W/System.err(29685): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(29685): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(29685): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(29685): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.Posix.open(Native Method)
W/System.err(29685): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:393)
W/System.err(29685): 	... 14 more
D/DocsList(29685): SearchFileTask:doInBackground
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1995 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(29685): GC_CONCURRENT freed 3034K, 21% free 12163K/15312K, paused 1ms+1ms, total 8ms
W/System.err(29685): java.io.FileNotFoundException: /system/etc/vold.fstab: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:409)
W/System.err(29685): 	at java.io.FileInputStream.<init>(FileInputStream.java:78)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:158)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:138)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.readVoldFile(DocsListActivity.java:1065)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.getMicroSDCardDirectory(DocsListActivity.java:970)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.access$27(DocsListActivity.java:968)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity$SearchFileTask.doInBackground(DocsListActivity.java:877)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity$SearchFileTask.doInBackground(DocsListActivity.java:1)
W/System.err(29685): 	at android.os.AsyncTask$2.call(AsyncTask.java:288)
W/System.err(29685): 	at java.util.concurrent.FutureTask.run(FutureTask.java:237)
W/System.err(29685): 	at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
W/System.err(29685): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(29685): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(29685): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(29685): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.Posix.open(Native Method)
W/System.err(29685): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:393)
W/System.err(29685): 	... 14 more
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
V/FlingTracker(  528): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  528): java.lang.Throwable
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  528): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  528): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  528): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  528): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  528): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  528): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  528): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
D/MobilePrintBasicActivity(29685): onDestroy
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1638638, downTime=1638638, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1638648, downTime=1638648, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1638649, downTime=1638649, deviceId=-1, source=0x101 }
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=0.0 v=4500.0)
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
W/WindowManager(  470): updateFocusedWindowLocked, focusedAppToken is null.
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_SCROLL_LOCK, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1638656, downTime=1638656, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1638678, downTime=1638678, deviceId=-1, source=0x101 }
W/EGL_emulation(  528): eglSurfaceAttrib not implemented 3093 12436
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=45.000004 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=45.000004 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=-2; nothing to do (h=45.000004 v=-3000.0)
W/ViewRootImpl(  528): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1638682, downTime=1638682, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-3.0, y[0]=-5.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=1638681, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1638720, downTime=1638720, deviceId=-1, source=0x101 }
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
W/EGL_emulation(  528): eglSurfaceAttrib not implemented 3093 12436
W/InputEventReceiver(29685): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputMethodManagerService(  470): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a9c9db4 attribute=null, token = android.os.BinderProxy@4ac412ec
D/DocsList(29685): SearchFileTask:doInBackground
D/AndroidRuntime(29840): 
D/AndroidRuntime(29840): >>>>>> AndroidRuntime START com.android.internal.os.RuntimeInit <<<<<<
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 470
D/dalvikvm(  528): GC_FOR_ALLOC freed 4557K, 65% free 7790K/21844K, paused 3ms, total 3ms
W/System.err(29685): java.io.FileNotFoundException: /system/etc/vold.fstab: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:409)
W/System.err(29685): 	at java.io.FileInputStream.<init>(FileInputStream.java:78)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:158)
W/System.err(29685): 	at java.util.Scanner.<init>(Scanner.java:138)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.readVoldFile(DocsListActivity.java:1065)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.getMicroSDCardDirectory(DocsListActivity.java:970)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity.access$27(DocsListActivity.java:968)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity$SearchFileTask.doInBackground(DocsListActivity.java:877)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.DocsListActivity$SearchFileTask.doInBackground(DocsListActivity.java:1)
W/System.err(29685): 	at android.os.AsyncTask$2.call(AsyncTask.java:288)
W/System.err(29685): 	at java.util.concurrent.FutureTask.run(FutureTask.java:237)
W/System.err(29685): 	at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
W/System.err(29685): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(29685): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(29685): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(29685): Caused by: libcore.io.ErrnoException: open failed: ENOENT (No such file or directory)
W/System.err(29685): 	at libcore.io.Posix.open(Native Method)
W/System.err(29685): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:110)
W/System.err(29685): 	at libcore.io.IoBridge.open(IoBridge.java:393)
W/System.err(29685): 	... 14 more
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
D/AndroidRuntime(29840): CheckJNI is OFF
D/dalvikvm(29840): Using executionMode 2
D/MobilePrintBasicActivity(29685): onPause
D/dalvikvm(29840): Trying to load lib libjavacore.so 0x0
D/DocsList(29685): onPause
D/dalvikvm(29840): Added shared lib libjavacore.so 0x0
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(29840): Trying to load lib libnativehelper.so 0x0
D/dalvikvm(29840): Added shared lib libnativehelper.so 0x0
D/dalvikvm(29840): No JNI_OnLoad found in libnativehelper.so 0x0, skipping init
D/dalvikvm(29840): Note: class Landroid/app/ActivityManagerNative; has 179 unimplemented (abstract) methods
W/EGL_emulation(26125): eglSurfaceAttrib not implemented 3093 12436
D/LaunchScreenActivity(29685): onActivityResult : requestCode=12, resultCode=0
D/MobilePrintBasicActivity(29685): onActivityResult : requestCode=12, resultCode=0
D/MainPrint(29685): onStart
D/MainPrint(29685): onStart
D/MainFax (29685): onStart
D/MobilePrintBasicActivity(29685): onResume
E/memtrack(29840): Couldn't load memtrack module (No such file or directory)
E/android.os.Debug(29840): failed to load memtrack module: -2
D/MobilePrintBasicActivity(29685): setFaxNumber
D/LaunchScreenActivity(29685): getPluginData
D/LaunchScreenActivity(29685): setDeivceCapability
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/LaunchScreenActivity(29685): GetPluginListTask : doInBackground
D/PluginUtils(29685): fillPluginList: []
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/LaunchScreenActivity(29685): showLaunchScreenDialog handler
E/MainPrint(29685): plugin size: 0
V/IntentResolver(  470): Resolving type=null scheme=null defaultOnly=false userId=0 of Intent { act=com.sec.print.mobileprint.intent.action.FEATURE_PLUGIN flg=0x8 }
V/IntentResolver(  470): Action list: null
V/IntentResolver(  470): Final result list:
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect Thread is  :1128
E/MSP     (29685): Can't get device serial number
D/Mobile Print(29685): phone type = 1
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect : old serial = <null> new serial = <null>
D/SNMP    (29685): SNMP Community Name: public
D/AndroidRuntime(29840): Calling main entry com.android.commands.am.Am
W/MSP     (29685): Can't connect to device with wrong or unspecified connection parameters via NETWORK
D/AndroidRuntime(29840): Shutting down VM
E/cutils-trace(29840): Error opening trace file: No such file or directory (2)
D/dalvikvm(29840): GC_CONCURRENT freed 95K, 15% free 588K/688K, paused 0ms+0ms, total 0ms
I/AndroidRuntime(29840): NOTE: attach of thread 'Binder_2' failed
W/ActivityManager(  470): Unable to start service Intent { flg=0x20 cmp=com.jb.zcamera/.application.PersistentProcessService (has extras) } U=0: not found
D/dalvikvm(29685): GC_CONCURRENT freed 2753K, 19% free 12499K/15396K, paused 2ms+1ms, total 12ms
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
E/MainPrint(29685): plugin size: 0
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:1
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r4, $i0)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>($r2, $i0, $r3)	timediff:0
I/System.out(29685): body:<org.snmp4j.transport.DefaultUdpTransportMapping: void sendMessage(org.snmp4j.smi.Address,byte[])>	sig:virtualinvoke $r10.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r11)	timediff:0
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10007, 1) failed with errno -13
D/        (29685): onPageSelected: 0
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
D/LaunchScreenActivity(29685): setDeivceCapability
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): startPrintOption
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.PrintSettingsActivity (has extras)} from pid 29685
D/MobilePrintBasicActivity(29685): onPause
D/Mobile Print(29685): phone type = 1
W/System.err(29685): java.lang.IllegalArgumentException: Receiver not registered: com.sec.print.mobileprint.ui.notification.GCMService$1@4a88c6f0
W/System.err(29685): 	at android.app.LoadedApk.forgetReceiverDispatcher(LoadedApk.java:667)
W/System.err(29685): 	at android.app.ContextImpl.unregisterReceiver(ContextImpl.java:1466)
W/System.err(29685): 	at android.content.ContextWrapper.unregisterReceiver(ContextWrapper.java:489)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.notification.GCMService.unregisterReceiver(GCMService.java:48)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.LaunchScreenActivity.onPause(LaunchScreenActivity.java:819)
W/System.err(29685): 	at android.app.Activity.performPause(Activity.java:5335)
W/System.err(29685): 	at android.app.Instrumentation.callActivityOnPause(Instrumentation.java:1250)
W/System.err(29685): 	at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3046)
W/System.err(29685): 	at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3015)
W/System.err(29685): 	at android.app.ActivityThread.handlePauseActivity(ActivityThread.java:2993)
W/System.err(29685): 	at android.app.ActivityThread.access$1000(ActivityThread.java:135)
W/System.err(29685): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1207)
W/System.err(29685): 	at android.os.Handler.dispatchMessage(Handler.java:102)
W/System.err(29685): 	at android.os.Looper.loop(Looper.java:136)
W/System.err(29685): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
W/System.err(29685): 	at java.lang.reflect.Method.invokeNative(Native Method)
W/System.err(29685): 	at java.lang.reflect.Method.invoke(Method.java:515)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
W/System.err(29685): 	at dalvik.system.NativeStart.main(Native Method)
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10007, 0) failed with errno -13
D/MobilePrintBasicActivity(29685): onCreate
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/com.sec.print.mobileprint.ui.PrintSettingsOptionView(29685): CheckTimeS_displaySelectedPrinterInfo
D/com.sec.print.mobileprint.ui.PrintSettingsOptionView(29685): CheckTimeE_displaySelectedPrinterInfo
D/dalvikvm(29685): Trying to load lib /data/app-lib/com.sec.print.mobileprint-1/libk2ViewerJni.so 0x94f1d380
D/dalvikvm(29685): Added shared lib /data/app-lib/com.sec.print.mobileprint-1/libk2ViewerJni.so 0x94f1d380
D/immutaek@gmail.com(29685): Creating Viewer success - handle[b876afe0]
E/        (29685): KKK K2DocumentRenderer k2lib is called
D/        (29685): DPI - PreviewMode 75DPI
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_CALL, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1639292, downTime=1639292, deviceId=-1, source=0x101 }
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.PrintSettingsActivity: +117ms
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1639396, downTime=1639396, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/InputDispatcher(  470): Dropped event because of pending overdue app switch.
W/InputManager(  470): Input event injection from pid 29675 failed.
D/MobilePrintBasicActivity(29685): onDestroy
D/DocsList(29685): onDestroy
D/dalvikvm(29685): GC_EXPLICIT freed 1830K, 21% free 12187K/15396K, paused 1ms+1ms, total 7ms
I/ActivityManager(  470): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 29685
W/PhoneFallbackEventHandler(29685): No activity found for android.intent.action.CALL_BUTTON.
D/MobilePrintBasicActivity(29685): onClick
D/dalvikvm(29685): GC_EXPLICIT freed 211K, 22% free 12079K/15396K, paused 1ms+1ms, total 5ms
D/dalvikvm(29685): GC_EXPLICIT freed 91K, 22% free 12077K/15396K, paused 1ms+1ms, total 8ms
D/MobilePrintBasicActivity(29685): onPause
W/InputManager(  470): Input event injection from pid 29675 failed.
W/InputManager(  470): Input event injection from pid 29675 failed.
W/InputManager(  470): Input event injection from pid 29675 failed.
W/InputManager(  470): Input event injection from pid 29675 failed.
D/LaunchScreenActivity(29685): onActivityResult : requestCode=2, resultCode=1
D/MobilePrintBasicActivity(29685): onActivityResult : requestCode=2, resultCode=1
D/MainPrint(29685): onStart
D/MainPrint(29685): onStart
D/MainFax (29685): onStart
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/LaunchScreenActivity(29685): getPluginData
D/LaunchScreenActivity(29685): setDeivceCapability
D/LaunchScreenActivity(29685): GetPluginListTask : doInBackground
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/PluginUtils(29685): fillPluginList: []
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/Mobile Print(29685): phone type = 1
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/LaunchScreenActivity(29685): showLaunchScreenDialog handler
E/MainPrint(29685): plugin size: 0
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect Thread is  :1128
D/Mobile Print(29685): phone type = 1
D/MPA     (29685): [Utils] updateMFPDeviceAndConnect : old serial = <null> new serial = <null>
D/SNMP    (29685): SNMP Community Name: public
W/MSP     (29685): Can't connect to device with wrong or unspecified connection parameters via NETWORK
E/MSP     (29685): Can't get device serial number
V/IntentResolver(  470): Resolving type=null scheme=null defaultOnly=false userId=0 of Intent { act=com.sec.print.mobileprint.intent.action.FEATURE_PLUGIN flg=0x8 }
V/IntentResolver(  470): Action list: null
V/IntentResolver(  470): Final result list:
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=3.0, y[0]=-2.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=19, eventTime=1639901, downTime=-1, deviceId=0, source=0x10004 }
W/EGL_emulation(26125): eglSurfaceAttrib not implemented 3093 12436
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
E/MainPrint(29685): plugin size: 0
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1639901, downTime=1639901, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_TAB, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1639965, downTime=1639965, deviceId=-1, source=0x101 }
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
D/FirmwareUpdate(29685): startUpdateCheckOnUpdateButton
D/MSP     (29685): [ATO] isDeviceConnected: ip:null model: null serial: null
W/MSP     (29685): [ATO]: IP address or model name or serial number is incorrect
E/FirmwareUpdate(29685): No device connection
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640037, downTime=1640037, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640049, downTime=1640049, deviceId=-1, source=0x101 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
D/FirmwareUpdate(29685): startUpdateCheckOnUpdateButton
D/MSP     (29685): [ATO] isDeviceConnected: ip:null model: null serial: null
W/MSP     (29685): [ATO]: IP address or model name or serial number is incorrect
E/FirmwareUpdate(29685): No device connection
D/FirmwareUpdate(29685): startUpdateOnUpdateButton() : onPostExecute
D/FirmwareUpdate(29685): checkCompletedSuccessfully = false
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640051, downTime=1640051, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640081, downTime=1640081, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DEL, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640087, downTime=1640087, deviceId=-1, source=0x101 }
D/FirmwareUpdate(29685): Setting isUpdating to false
D/MSP     (29685): [ATO] isDeviceConnected: ip:null model: null serial: null
W/MSP     (29685): [ATO]: IP address or model name or serial number is incorrect
E/MPP     (29685): Device is not selected
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640091, downTime=1640091, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640096, downTime=1640096, deviceId=-1, source=0x101 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640098, downTime=1640098, deviceId=-1, source=0x101 }
W/InputEventReceiver(29685): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(29685): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(29685): Attempted to finish an input event but the input event receiver has already been disposed.
D/FirmwareUpdate(29685): startUpdateOnUpdateButton() : onPostExecute
D/FirmwareUpdate(29685): checkCompletedSuccessfully = false
D/FirmwareUpdate(29685): Setting isUpdating to false
W/ViewRootImpl(29685): Dropping event due to root view being removed: MotionEvent { action=ACTION_POINTER_DOWN(1), id[0]=0, x[0]=43.267326, y[0]=-357.45724, toolType[0]=TOOL_TYPE_UNKNOWN, id[1]=1, x[1]=331.0, y[1]=630.0, toolType[1]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=2, historySize=0, eventTime=1640129, downTime=1640128, deviceId=0, source=0x1002 }
W/ViewRootImpl(29685): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=15.077431, y[0]=-373.68463, toolType[0]=TOOL_TYPE_UNKNOWN, id[1]=1, x[1]=284.324, y[1]=693.0, toolType[1]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=2, historySize=7, eventTime=1640130, downTime=1640128, deviceId=0, source=0x1002 }
D/MSP     (29685): [ATO] isDeviceConnected: ip:null model: null serial: null
W/MSP     (29685): [ATO]: IP address or model name or serial number is incorrect
E/MPP     (29685): Device is not selected
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640138, downTime=1640138, deviceId=-1, source=0x101 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/InputEventReceiver(29685): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(29685): Attempted to finish an input event but the input event receiver has already been disposed.
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640143, downTime=1640143, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  470): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4aa60450 attribute=null, token = android.os.BinderProxy@4af2d24c
W/ViewRootImpl(29685): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=453.65295, y[0]=-376.00024, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1640162, downTime=1640161, deviceId=0, source=0x1002 }
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.android.browser/.BrowserActivity sel={act=android.intent.action.MAIN cat=[android.intent.category.APP_BROWSER]}} from pid 470
W/InputMethodManagerService(  470): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ac5e238 attribute=null, token = android.os.BinderProxy@4af2d24c
D/MFPDiscoveryService(29685): [getDeviceProperties] response is null, 172.17.100.2
D/MFPDiscoveryService(29685): [getDeviceProperties] response is null, 172.17.100.2
D/MFPDiscoveryService(29685): [getDeviceProperties] response is null, 172.17.100.2
D/MFPDiscoveryService(29685): [getDeviceProperties] response is null, 172.17.100.2
D/MFPDiscoveryService(29685): [getDeviceProperties] response is null, 172.17.99.2
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10007, 1) failed with errno -13
D/        (29685): onPageSelected: 1
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideSoftInput:1843 com.android.internal.view.IInputMethodManager$Stub.onTransact:194 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.gallery.ImageGallery (has extras)} from pid 29685
D/MobilePrintBasicActivity(29685): onPause
D/Mobile Print(29685): phone type = 1
W/System.err(29685): java.lang.IllegalArgumentException: Receiver not registered: com.sec.print.mobileprint.ui.notification.GCMService$1@4a88c6f0
W/System.err(29685): 	at android.app.LoadedApk.forgetReceiverDispatcher(LoadedApk.java:667)
W/System.err(29685): 	at android.app.ContextImpl.unregisterReceiver(ContextImpl.java:1466)
W/System.err(29685): 	at android.content.ContextWrapper.unregisterReceiver(ContextWrapper.java:489)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.notification.GCMService.unregisterReceiver(GCMService.java:48)
W/System.err(29685): 	at com.sec.print.mobileprint.ui.LaunchScreenActivity.onPause(LaunchScreenActivity.java:819)
W/System.err(29685): 	at android.app.Activity.performPause(Activity.java:5335)
W/System.err(29685): 	at android.app.Instrumentation.callActivityOnPause(Instrumentation.java:1250)
W/System.err(29685): 	at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3046)
W/System.err(29685): 	at android.app.ActivityThread.performPauseActivity(ActivityThread.java:3015)
W/System.err(29685): 	at android.app.ActivityThread.handlePauseActivity(ActivityThread.java:2993)
W/System.err(29685): 	at android.app.ActivityThread.access$1000(ActivityThread.java:135)
W/System.err(29685): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1207)
W/System.err(29685): 	at android.os.Handler.dispatchMessage(Handler.java:102)
W/System.err(29685): 	at android.os.Looper.loop(Looper.java:136)
W/System.err(29685): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
W/System.err(29685): 	at java.lang.reflect.Method.invokeNative(Native Method)
W/System.err(29685): 	at java.lang.reflect.Method.invoke(Method.java:515)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
W/System.err(29685): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
W/System.err(29685): 	at dalvik.system.NativeStart.main(Native Method)
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10007, 0) failed with errno -13
D/MobilePrintBasicActivity(29685): onCreate
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/MobilePrintBasicActivity(29685): setBottomBar
D/MobilePrintBasicActivity(29685): setFaxNumberBar
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_8, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640233, downTime=1640233, deviceId=-1, source=0x101 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_WINDOW, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640296, downTime=1640296, deviceId=-1, source=0x101 }
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.gallery.ImageGallery: +96ms
D/dalvikvm(29685): GC_FOR_ALLOC freed 1646K, 19% free 12586K/15396K, paused 8ms, total 8ms
I/ActivityManager(  470): START u0 {act=com.android.systemui.recent.action.TOGGLE_RECENTS flg=0x10800000 cmp=com.android.systemui/.recent.RecentsActivity (has extras)} from pid 528
V/FlingTracker(  528): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  528): java.lang.Throwable
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  528): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  528): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  528): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  528): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  528): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  528): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  528): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
V/PanelView(  528): animationTick called with dtms=-14; nothing to do (h=0.0 v=0.0)
D/dalvikvm( 1031): GC_FOR_ALLOC freed 331K, 15% free 3341K/3916K, paused 2ms, total 3ms
I/dalvikvm-heap( 1031): Grow heap (frag case) to 3.557MB for 230412-byte allocation
D/dalvikvm( 1031): GC_FOR_ALLOC freed 6K, 15% free 3560K/4144K, paused 4ms, total 4ms
D/dalvikvm(  470): GC_CONCURRENT freed 2023K, 43% free 12466K/21756K, paused 0ms+3ms, total 19ms
D/dalvikvm( 1031): GC_FOR_ALLOC freed 86K, 16% free 3487K/4144K, paused 2ms, total 2ms
D/        (29685): psw : success bucket_id='1028075469' Screenshots
D/        (29685): psw : success bucket_id='-1192273535' OpenCamera
D/        (29685): psw : success bucket_id='2075115041' Cartoon_Photo
D/dalvikvm( 1031): GC_FOR_ALLOC freed 363K, 21% free 3287K/4144K, paused 3ms, total 3ms
D/        (29685): psw : success bucket_id='1510298641' com.clearchannel.iheartradio.connect
D/        (29685): psw : success bucket_id='652058132' baconreader
D/dalvikvm( 1031): GC_FOR_ALLOC freed 140K, 17% free 3459K/4144K, paused 2ms, total 2ms
D/        (29685): psw : success bucket_id='-129442523' Signature_Capture
D/dalvikvm( 1031): GC_FOR_ALLOC freed 329K, 22% free 3261K/4144K, paused 3ms, total 3ms
D/        (29685): psw : success bucket_id='-2134672859' FutbolLigaMexicana
D/        (29685): psw : success bucket_id='315787631' com.onelouder.oneweather
D/dalvikvm( 1031): GC_FOR_ALLOC freed 345K, 22% free 3259K/4144K, paused 2ms, total 2ms
D/        (29685): psw : success bucket_id='1762713431' ini
D/dalvikvm( 1031): GC_FOR_ALLOC freed 348K, 22% free 3255K/4144K, paused 2ms, total 2ms
D/        (29685): psw : success bucket_id='1921019207' workspace
D/dalvikvm( 1031): GC_FOR_ALLOC freed 125K, 17% free 3471K/4144K, paused 1ms, total 1ms
D/        (29685): psw : success bucket_id='1389444597' 0
D/        (29685): psw : success bucket_id='-326988905' living_room
I/Choreographer(29685): Skipped 36 frames!  The application may be doing too much work on its main thread.
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-1.0, y[0]=-1.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=1640505, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640530, downTime=1640530, deviceId=-1, source=0x101 }
D/        (29685): psw : success bucket_id='1028075469' Screenshots
D/        (29685): psw : success bucket_id='1028075469' Screenshots
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1640956, downTime=1640956, deviceId=-1, source=0x101 }
D/MobilePrintBasicActivity(29685): onDestroy
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.smartpanel.ATOSelectPrinterActivity} from pid 29685
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.smartpanel.ATOSelectPrinterActivity} from pid 29685
I/InputDispatcher(  470): Dropped event because of pending overdue app switch.
W/InputManager(  470): Input event injection from pid 29675 failed.
D/MobilePrintBasicActivity(29685): onPause
D/dalvikvm(29685): GC_FOR_ALLOC freed 361K, 15% free 13532K/15820K, paused 5ms, total 5ms
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_AT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641007, downTime=1641007, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.smartpanel.ATOSelectPrinterActivity: +86ms
I/ActivityManager(  470): START u0 {cmp=com.sec.print.mobileprint/.ui.ChooseADeviceAtHomeTabActivity (has extras)} from pid 29685
D/MobilePrintBasicActivity(29685): onCreate
D/MobilePrintBasicActivity(29685): getCachedMSPStatus : status = 3
D/MobilePrintBasicActivity(29685): changeTabHomeIcon : statusType = 3
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
D/ChooseADeviceFragment(29685): onCreate
D/ChooseADeviceFragment(29685): onCreateView
D/MobilePrintBasicActivity(29685): onResume
D/MobilePrintBasicActivity(29685): setFaxNumber
D/com.sec.print.mobileprint.ui.ChooseADeviceFragment(29685): Data_Init
D/ChooseADeviceFragment(29685): launchDiscoveryTask
D/DiscoverDevices(29685): startDiscoveryService
D/MFPDiscovery(29685): InitializeDiscovery
W/ContextImpl(29685): Implicit intents with startService are not safe: Intent { act=com.sec.print.secmobileprint.DiscoveryService } android.content.ContextWrapper.startService:494 com.sec.print.mobileprint.utils.MFPDiscovery.InitializeDiscovery:107 com.sec.print.mobileprint.utils.DiscoverDevices.startDiscoveryService:70 
W/ContextImpl(29685): Implicit intents with startService are not safe: Intent { act=com.sec.print.secmobileprint.DiscoveryService } android.content.ContextWrapper.bindService:517 com.sec.print.mobileprint.utils.MFPDiscovery.InitializeDiscovery:108 com.sec.print.mobileprint.utils.DiscoverDevices.startDiscoveryService:70 
D/GCPUtils(29685): GCP initGCPVal 
D/GCPUtils(29685): GCP initGCPconnection 
D/DiscoverDevices(29685): startDeviceDiscovery
D/DiscoverDevices(29685): doInBackground
D/MFPDiscoveryService(29685): Start SNMP
D/MFPDiscoveryService(29685): StartSNMPDiscovery
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
D/ChooseADeviceFragment(29685): handleMessage = { when=-32ms what=3 target=com.sec.print.mobileprint.ui.ChooseADeviceFragment$MessageHandler }
D/MobilePrintBasicActivity(29685): onCreateOptionsMenu
D/MobilePrintBasicActivity(29685): setDeviceStatus : 3
D/MobilePrintBasicActivity(29685): setDeviceStatusIcon
D/MobilePrintBasicActivity(29685): showCurrentSelectedDevice
D/MobilePrintBasicActivity(29685): showCurrentSelectedDeviceDefault1
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641099, downTime=1641099, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641181, downTime=1641181, deviceId=-1, source=0x101 }
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641184, downTime=1641184, deviceId=-1, source=0x101 }
I/ActivityManager(  470): Displayed com.sec.print.mobileprint/.ui.ChooseADeviceAtHomeTabActivity: +82ms
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641189, downTime=1641189, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/FlingTracker(  528): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  528): java.lang.Throwable
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  528): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  528): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  528): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  528): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  528): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  528): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  528): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
W/SurfaceFlinger(  166): couldn't log to binary event log: overflow.
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=0.0 v=4500.0)
W/WindowManager(  470): updateFocusedWindowLocked, focusedAppToken is null.
W/EGL_emulation(  528): eglSurfaceAttrib not implemented 3093 12436
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
W/ViewRootImpl(  528): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641600, downTime=1641600, deviceId=-1, source=0x101 }
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=-1; nothing to do (h=288.0 v=-3000.0)
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MEDIA_PLAY, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641652, downTime=1641652, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  470): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a9026ac attribute=null, token = android.os.BinderProxy@4a8c6e64
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=288.0 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=284.997 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=284.997 v=-3000.0)
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=275.97 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=275.97 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=275.97 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=275.97 v=-3000.0)
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
V/FlingTracker(  528): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  528): java.lang.Throwable
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  528): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  528): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  528): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  528): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  528): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  528): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  528): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  528): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  528): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  528): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  528): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  528): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  528): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  528): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=211.851 v=0.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=211.851 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=211.851 v=-3000.0)
D/MobilePrintBasicActivity(29685): onClick
W/WindowManager(  470): updateFocusedWindowLocked, focusedAppToken is null.
W/ViewRootImpl(  528): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641731, downTime=1641731, deviceId=-1, source=0x101 }
W/ViewRootImpl(  528): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MEDIA_STOP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641737, downTime=1641737, deviceId=-1, source=0x101 }
W/ViewRootImpl(  528): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_4, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641751, downTime=1641751, deviceId=-1, source=0x101 }
W/ViewRootImpl(  528): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641751, downTime=1641751, deviceId=-1, source=0x101 }
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/InputEventReceiver(  528): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  528): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  528): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  528): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(  528): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=111.71564, y[0]=453.6792, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=1641755, downTime=1641754, deviceId=0, source=0x1002 }
W/ViewRootImpl(  528): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-1.0, y[0]=-5.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=1641758, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(  528): Dropping event due to root view being removed: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641752, downTime=1641752, deviceId=-1, source=0x101 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=97.13999 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=0; nothing to do (h=97.13999 v=-3000.0)
V/PanelView(  528): animationTick called with dtms=-3; nothing to do (h=97.13999 v=-3000.0)
W/ViewRootImpl(29685): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=1641770, downTime=1641770, deviceId=-1, source=0x101 }
W/EGL_emulation(  528): eglSurfaceAttrib not implemented 3093 12436
D/ChooseADeviceAtHomeTabActivity(29685): onCreateOptionsMenu : OnDismissListener dismissed
W/InputEventReceiver(29685): Attempted to finish an input event but the input event receiver has already been disposed.
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.sec.print.mobileprint/.ui.IntroActivity} from pid 29675
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
D/MobilePrintBasicActivity(29685): onClick
D/dalvikvm(29685): GC_EXPLICIT freed 607K, 15% free 14263K/16772K, paused 2ms+1ms, total 7ms
D/dalvikvm(29685): GC_EXPLICIT freed 73K, 16% free 14190K/16772K, paused 2ms+1ms, total 8ms
D/ChooseADeviceFragment(29685): stopDiscoveryTask
D/DiscoverDevices(29685): stopDeviceDiscovery
D/ChooseADeviceFragment(29685): onDestroyView
D/MFPDiscovery(29685): releaseService
D/ChooseADeviceFragment(29685): onDestroy
D/MobilePrintBasicActivity(29685): onPause
D/dalvikvm(29685): GC_EXPLICIT freed 4K, 16% free 14188K/16772K, paused 0ms+1ms, total 9ms
D/dalvikvm(29685): GC_EXPLICIT freed <1K, 16% free 14188K/16772K, paused 0ms+1ms, total 7ms
W/ActivityManager(  470): Duplicate finish request for ActivityRecord{4abef6f4 u0 com.sec.print.mobileprint/.ui.ChooseADeviceAtHomeTabActivity t209 f}
D/MSP     (29685): [ATO] isDeviceConnected: ip:null model: null serial: null
W/MSP     (29685): [ATO]: IP address or model name or serial number is incorrect
E/MPP     (29685): Device is not selected
D/MobilePrintBasicActivity(29685): onClick
I/AndroidRuntime(29675): VM exiting with result code 0.
D/dalvikvm(29685): GC_EXPLICIT freed 12K, 15% free 14262K/16772K, paused 1ms+1ms, total 15ms
D/dalvikvm(29685): GC_EXPLICIT freed 2K, 15% free 14260K/16772K, paused 1ms+0ms, total 7ms
W/ActivityManager(  470): Duplicate finish request for ActivityRecord{4abef6f4 u0 com.sec.print.mobileprint/.ui.ChooseADeviceAtHomeTabActivity t209 f}
W/ViewRootImpl(29685): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=2.0, y[0]=2.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=3, eventTime=1642076, downTime=-1, deviceId=0, source=0x10004 }
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
W/EGL_emulation(29685): eglSurfaceAttrib not implemented 3093 12436
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.DNSRecord$IPv4Address: void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream)>	sig:$r4 = virtualinvoke $r3.<java.net.InetAddress: byte[] getAddress()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:specialinvoke $r6.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>($r9, $i1, $r2, $i0)	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:$z0 = virtualinvoke $r4.<java.net.MulticastSocket: boolean isClosed()>()	timediff:0
I/System.out(29685): body:<javax.jmdns.impl.JmDNSImpl: void send(javax.jmdns.impl.DNSOutgoing)>	sig:virtualinvoke $r4.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>($r6)	timediff:0
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
