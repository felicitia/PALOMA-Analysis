--------- beginning of /dev/log/main
I/Icing   (  714): Indexing F4FAA6262FE39DDD50BAE6B7AF5CDB8D73BA0DB0 from com.google.android.gms
I/Icing   (  714): Indexing done F4FAA6262FE39DDD50BAE6B7AF5CDB8D73BA0DB0
I/WearableService(  645): Wearable Services stopping
D/AndroidRuntime(24402): 
D/AndroidRuntime(24402): >>>>>> AndroidRuntime START com.android.internal.os.RuntimeInit <<<<<<
D/AndroidRuntime(24402): CheckJNI is OFF
D/dalvikvm(24402): Using executionMode 2
D/dalvikvm(24402): Trying to load lib libjavacore.so 0x0
D/dalvikvm(24402): Added shared lib libjavacore.so 0x0
D/dalvikvm(24402): Trying to load lib libnativehelper.so 0x0
D/dalvikvm(24402): Added shared lib libnativehelper.so 0x0
D/dalvikvm(24402): No JNI_OnLoad found in libnativehelper.so 0x0, skipping init
D/dalvikvm(24402): Note: class Landroid/app/ActivityManagerNative; has 179 unimplemented (abstract) methods
E/memtrack(24402): Couldn't load memtrack module (No such file or directory)
E/android.os.Debug(24402): failed to load memtrack module: -2
D/AndroidRuntime(24402): Calling main entry com.android.commands.monkey.Monkey
--------- beginning of /dev/log/system
W/BroadcastQueue(  483): Skipping deliver [background] BroadcastRecord{4aca0c54 u-1 android.net.conn.CONNECTIVITY_CHANGE} to ReceiverList{4af5e494 24402 (unknown name)/0/u-1 remote:4af30500}: process crashing
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/NetworkManagementSocketTagger(  483): setKernelCountSet(10085, 1) failed with errno -13
W/NetworkManagementSocketTagger(  483): setKernelCountSet(10012, 0) failed with errno -13
I/dalvikvm(24412): ignoring registerObject request in thread=1
I/dalvikvm(24412): ignoring registerObject request in thread=1
I/Finsky  ( 1039): [1] com.google.android.finsky.ch.a.onTrimMemory(5): Memory trim requested to level 20
I/Finsky  ( 1039): [1] com.google.android.finsky.ch.a.onTrimMemory(11): Flushing in-memory image cache
I/ActivityManager(  483): Start proc com.mychime.waveremit.app for activity com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity: pid=24412 uid=10085 gids={50085, 3003, 3002, 3001, 1028, 1015, 1023}
I/dalvikvm(24412): Could not find method android.content.pm.PackageManager.getPackageInstaller, referenced from method com.google.android.gms.common.GooglePlayServicesUtil.zzh
W/dalvikvm(24412): VFY: unable to resolve virtual method 487: Landroid/content/pm/PackageManager;.getPackageInstaller ()Landroid/content/pm/PackageInstaller;
D/dalvikvm(24412): VFY: replacing opcode 0x6e at 0x000a
I/GMPM    (24412): App measurement is starting up
D/ACRA    (24412): ACRA is enabled for com.mychime.waveremit.app, intializing...
D/dalvikvm(24412): JIT code cache reset in 0 ms (0 bytes 1/0)
D/dalvikvm(24412): GC_CONCURRENT freed 236K, 10% free 2944K/3264K, paused 2ms+1ms, total 5ms
D/ACRA    (24412): Looking for error files in /data/data/com.mychime.waveremit.app/files
D/ACRA    (24412): Looking for error files in /data/data/com.mychime.waveremit.app/files
E/GMPM    (24412): getGoogleAppId failed with status: 10
E/GMPM    (24412): Uploading is not possible. App measurement disabled
D/Rollbar (24412): Scheheduling item file handler...
D/dalvikvm(24412): GC_CONCURRENT freed 217K, 10% free 3112K/3456K, paused 2ms+0ms, total 4ms
W/MixpanelAPI.RsrcReader(24412): Can't load names for Android view ids from 'com.mychime.waveremit.app.R$id', ids by name will not be available in the events editor.
I/MixpanelAPI.RsrcReader(24412): You may be missing a Resources class for your package due to your proguard configuration, or you may be using an applicationId in your build that isn't the same as the package declared in your AndroidManifest.xml file.
I/MixpanelAPI.RsrcReader(24412): If you're using proguard, you can fix this issue by adding the following to your proguard configuration:
I/MixpanelAPI.RsrcReader(24412): 
I/MixpanelAPI.RsrcReader(24412): -keep class **.R$* {
I/MixpanelAPI.RsrcReader(24412):     <fields>;
I/MixpanelAPI.RsrcReader(24412): }
I/MixpanelAPI.RsrcReader(24412): 
I/MixpanelAPI.RsrcReader(24412): If you're not using proguard, or if your proguard configuration already contains the directive above, you can add the following to your AndroidManifest.xml file to explicitly point the Mixpanel library to the appropriate library for your resources class:
I/MixpanelAPI.RsrcReader(24412): 
I/MixpanelAPI.RsrcReader(24412): <meta-data android:name="com.mixpanel.android.MPConfig.ResourcePackageName" android:value="YOUR_PACKAGE_NAME" />
I/MixpanelAPI.RsrcReader(24412): 
I/MixpanelAPI.RsrcReader(24412): where YOUR_PACKAGE_NAME is the same string you use for the "package" attribute in your <manifest> tag.
D/MixpanelAPI.AL(24412): Context is not an instance of Activity. To detect inbound App Links, pass an instance of an Activity to getInstance.
W/dalvikvm(24412): Found non-abstract interface method Lokhttp3/Call;.request ()Lokhttp3/Request;
I/dalvikvm(24412): Could not find method okhttp3.Call.request, referenced from method empirical.HelperClass.printOkHttpInfoFromCall
W/dalvikvm(24412): VFY: unable to resolve interface method 33149: Lokhttp3/Call;.request ()Lokhttp3/Request;
D/dalvikvm(24412): VFY: replacing opcode 0x72 at 0x0006
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_0", 0, "http/1.0")	timediff:0
I/System.out(24412): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_1", 1, "http/1.1")	timediff:0
I/System.out(24412): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("SPDY_3", 2, "spdy/3.1")	timediff:0
I/System.out(24412): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_2", 3, "h2")	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_MD5", 0, "SSL_RSA_WITH_NULL_MD5", 1, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA", 1, "SSL_RSA_WITH_NULL_SHA", 2, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_RC4_40_MD5", 2, "SSL_RSA_EXPORT_WITH_RC4_40_MD5", 3, 4346, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_MD5", 3, "SSL_RSA_WITH_RC4_128_MD5", 4, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_SHA", 4, "SSL_RSA_WITH_RC4_128_SHA", 5, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", 5, "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 8, 4346, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_DES_CBC_SHA", 6, "SSL_RSA_WITH_DES_CBC_SHA", 9, 5469, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_3DES_EDE_CBC_SHA", 7, "SSL_RSA_WITH_3DES_EDE_CBC_SHA", 10, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 8, "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 17, 4346, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_DES_CBC_SHA", 9, "SSL_DHE_DSS_WITH_DES_CBC_SHA", 18, 5469, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 10, "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 19, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 11, "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 20, 4346, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_DES_CBC_SHA", 12, "SSL_DHE_RSA_WITH_DES_CBC_SHA", 21, 5469, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 13, "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 22, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_RC4_40_MD5", 14, "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 23, 4346, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_RC4_128_MD5", 15, "SSL_DH_anon_WITH_RC4_128_MD5", 24, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 16, "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 25, 4346, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_DES_CBC_SHA", 17, "SSL_DH_anon_WITH_DES_CBC_SHA", 26, 5469, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_3DES_EDE_CBC_SHA", 18, "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 27, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_SHA", 19, "TLS_KRB5_WITH_DES_CBC_SHA", 30, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 20, "TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 31, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_SHA", 21, "TLS_KRB5_WITH_RC4_128_SHA", 32, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_MD5", 22, "TLS_KRB5_WITH_DES_CBC_MD5", 34, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 23, "TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 35, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_MD5", 24, "TLS_KRB5_WITH_RC4_128_MD5", 36, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 25, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 38, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 26, "TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 40, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 27, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 41, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 28, "TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 43, 2712, 6, 2147483647)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA", 29, "TLS_RSA_WITH_AES_128_CBC_SHA", 47, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 30, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 50, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 31, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 51, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA", 32, "TLS_DH_anon_WITH_AES_128_CBC_SHA", 52, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA", 33, "TLS_RSA_WITH_AES_256_CBC_SHA", 53, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 34, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 56, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 35, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 57, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA", 36, "TLS_DH_anon_WITH_AES_256_CBC_SHA", 58, 5246, 6, 10)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA256", 37, "TLS_RSA_WITH_NULL_SHA256", 59, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA256", 38, "TLS_RSA_WITH_AES_128_CBC_SHA256", 60, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA256", 39, "TLS_RSA_WITH_AES_256_CBC_SHA256", 61, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 40, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 64, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 41, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 103, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 42, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 106, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 43, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 107, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA256", 44, "TLS_DH_anon_WITH_AES_128_CBC_SHA256", 108, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA256", 45, "TLS_DH_anon_WITH_AES_256_CBC_SHA256", 109, 5246, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_GCM_SHA256", 46, "TLS_RSA_WITH_AES_128_GCM_SHA256", 156, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_GCM_SHA384", 47, "TLS_RSA_WITH_AES_256_GCM_SHA384", 157, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 48, "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 158, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 49, "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 159, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 50, "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 162, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 51, "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 163, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_GCM_SHA256", 52, "TLS_DH_anon_WITH_AES_128_GCM_SHA256", 166, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_GCM_SHA384", 53, "TLS_DH_anon_WITH_AES_256_GCM_SHA384", 167, 5288, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 54, "TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 255, 5746, 6, 14)	timediff:1
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_NULL_SHA", 55, "TLS_ECDH_ECDSA_WITH_NULL_SHA", 49153, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 56, "TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 49154, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 57, "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 49155, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 58, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 49156, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 59, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 49157, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_NULL_SHA", 60, "TLS_ECDHE_ECDSA_WITH_NULL_SHA", 49158, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 61, "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 49159, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 62, "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 49160, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 63, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 49161, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 64, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 49162, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_NULL_SHA", 65, "TLS_ECDH_RSA_WITH_NULL_SHA", 49163, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_RC4_128_SHA", 66, "TLS_ECDH_RSA_WITH_RC4_128_SHA", 49164, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 67, "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 49165, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 68, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 49166, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 69, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 49167, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_NULL_SHA", 70, "TLS_ECDHE_RSA_WITH_NULL_SHA", 49168, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_RC4_128_SHA", 71, "TLS_ECDHE_RSA_WITH_RC4_128_SHA", 49169, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 72, "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 49170, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 73, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 49171, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 74, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 49172, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_NULL_SHA", 75, "TLS_ECDH_anon_WITH_NULL_SHA", 49173, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_RC4_128_SHA", 76, "TLS_ECDH_anon_WITH_RC4_128_SHA", 49174, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 77, "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 49175, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 78, "TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 49176, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 79, "TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 49177, 4492, 7, 14)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 80, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 49187, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 81, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 49188, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 82, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 49189, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 83, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 49190, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 84, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 49191, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 85, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 49192, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 86, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 49193, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 87, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 49194, 5289, 7, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 88, "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 49195, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 89, "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 49196, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 90, "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 49197, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 91, "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 49198, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 92, "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 49199, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 93, "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 49200, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 94, "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 49201, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 95, "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 49202, 5289, 8, 21)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_2", 0, "TLSv1.2")	timediff:0
I/System.out(24412): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_1", 1, "TLSv1.1")	timediff:0
I/System.out(24412): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_0", 2, "TLSv1")	timediff:0
I/System.out(24412): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("SSL_3_0", 3, "SSLv3")	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>	sig:specialinvoke $r1.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>	sig:specialinvoke $r2.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>	sig:specialinvoke $r0.<okhttp3.internal.Platform: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>	sig:specialinvoke $r9.<okhttp3.internal.AndroidPlatform: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>($r0, $r1, $r2, $r3, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:$r0 = staticinvoke <okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Platform: void <clinit>()>	sig:$r0 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r6 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: boolean isCleartextTrafficPermitted()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.Platform: boolean isCleartextTrafficPermitted()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.Platform: boolean isCleartextTrafficPermitted()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.Internal: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:specialinvoke $r7.<okhttp3.OkHttpClient$1: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:6
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out(24412): body:<okhttp3.CookieJar: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CookieJar$1: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CertificatePinner$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1)>	sig:specialinvoke $r0.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1)>($r2, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:$r1 = virtualinvoke $r0.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Authenticator: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Authenticator$1: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: void <clinit>()>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp ConnectionPool", 1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Dns$1: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:7
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:specialinvoke $r2.<okhttp3.CertificatePinner$Builder: void <init>()>()	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 412K, 14% free 3212K/3708K, paused 1ms+0ms, total 3ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 1ms
I/System.out(24412): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[])>	sig:specialinvoke $r6.<okhttp3.CertificatePinner$Pin: void <init>(java.lang.String,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:$r2 = virtualinvoke $r2.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[])>("app.sendwave.com", $r3)	timediff:1
I/System.out(24412): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[])>	sig:specialinvoke $r6.<okhttp3.CertificatePinner$Pin: void <init>(java.lang.String,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:$r2 = virtualinvoke $r2.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[])>("www.sendwave.com", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1)>	sig:specialinvoke $r0.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1)>($r2, null, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:$r4 = virtualinvoke $r2.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Level: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor$Level: void <init>(java.lang.String,int)>("NONE", 0)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Level: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor$Level: void <init>(java.lang.String,int)>("BASIC", 1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Level: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor$Level: void <init>(java.lang.String,int)>("HEADERS", 2)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Level: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor$Level: void <init>(java.lang.String,int)>("BODY", 3)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: void <init>()>	sig:specialinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor: void <init>(okhttp3.logging.HttpLoggingInterceptor$Logger)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:virtualinvoke $r0.<okhttp3.logging.HttpLoggingInterceptor: okhttp3.logging.HttpLoggingInterceptor setLevel(okhttp3.logging.HttpLoggingInterceptor$Level)>($r5)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
D/dalvikvm(24412): GC_FOR_ALLOC freed 33K, 14% free 3259K/3748K, paused 2ms, total 2ms
I/System.out(24412): body:<com.mixpanel.android.mpmetrics.DecideChecker: java.lang.String getDecideResponseFromServer(java.lang.String,java.lang.String,com.mixpanel.android.util.RemoteService)>	sig:$r1 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r1, "utf-8")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.mpmetrics.DecideChecker: java.lang.String getDecideResponseFromServer(java.lang.String,java.lang.String,com.mixpanel.android.util.RemoteService)>	sig:$r2 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r2, "utf-8")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(24412): <com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>###specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)###https://decide.mixpanel.com/decide?version=1&lib=android&token=d86b175627c75cc8b22f4e475d1e397a&distinct_id=d0ae09e7-a630-409d-b443-609613f1c8a0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r15 = virtualinvoke $r12.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setConnectTimeout(int)>(2000)	timediff:1
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setReadTimeout(int)>(10000)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r20 = specialinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.X509TrustManager systemDefaultTrustManager()>()	timediff:17
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r13 = specialinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager)>($r20)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>	sig:specialinvoke $r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r8.<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>($r6, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r14 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r20)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>	sig:specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r3, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:17
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:17
I/System.out(24412): body:<com.sendwave.db.DBClient: void <clinit>()>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:17
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("SUCCESS", 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("MISSING_SCHEME", 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("UNSUPPORTED_SCHEME", 2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_PORT", 3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_HOST", 4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:3
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SplashActivity} from pid 24412
D/dalvikvm(24412): GC_CONCURRENT freed 274K, 11% free 3425K/3828K, paused 0ms+1ms, total 3ms
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:156
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): URLConn;%;0;%;<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>;%;$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://decide.mixpanel.com/decide?version=1&lib=android&token=d86b175627c75cc8b22f4e475d1e397a&distinct_id=d0ae09e7-a630-409d-b443-609613f1c8a0;%;false;%;Not found;%;no-cache, no-store;%;Not found;%;Not found;%;Not found
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 334K, 11% free 3566K/3984K, paused 1ms+2ms, total 5ms
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:2
D/BluetoothManagerService(  483): Message: 20
D/BluetoothManagerService(  483): Added callback: android.bluetooth.IBluetoothManagerCallback$Stub$Proxy@4abd2844:true
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:4
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:4
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:5
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:3
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:3
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:3
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:3
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:3
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:3
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>	sig:$r5 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:3
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:3
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={} http/1.1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:specialinvoke $r4.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 432K, 13% free 3647K/4164K, paused 1ms+1ms, total 7ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 3ms
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 3ms
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:4
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023827845] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:3
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>("https://www.sendwave.com/updates/")	timediff:4
I/Updater (24412): Current APK version is 153
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r6 = virtualinvoke $r3.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r3 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r3 = virtualinvoke $r7.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/Updater (24412): Fetching update list: https://www.sendwave.com/updates/com.mychime.waveremit.app/153.txt
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine$1: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r10 = virtualinvoke $r9.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r10 = virtualinvoke $r10.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r9 = virtualinvoke $r10.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:$r13 = virtualinvoke $r9.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r6 = virtualinvoke $r5.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r7 = virtualinvoke $r1.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:1
I/System.out(24412): body:<com.sendwave.util.Updater: void checkForUpdates()>	sig:interfaceinvoke $r13.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r14)	timediff:1
I/MixpanelTracker(24412): [1524023827848] event: update: updater checked for updates {}
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:2
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:2
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:2
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:2
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 366K, 11% free 3747K/4164K, paused 2ms+1ms, total 6ms
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://www.sendwave.com/updates/com.mychime.waveremit.app/153.txt http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:3
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:11
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023827857] start timer: GET /updates/com.mychime.waveremit.app/153.txt
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:2
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit)>(2147483647, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:2
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:2
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 409K, 12% free 3735K/4232K, paused 2ms+1ms, total 4ms
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:5
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:5
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:5
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:2
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:6
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=4329472, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450487808, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023827869] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":4329472,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450487808,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:23
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:23
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:23
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:23
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:24
I/System.out(24412): body:<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.framed.FramedConnection$Listener: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 383K, 12% free 3753K/4264K, paused 0ms+1ms, total 3ms
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:3
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:3
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:27
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:28
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:30
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:35
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:35
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:35
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:3
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:3
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:4
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 357K, 12% free 3780K/4264K, paused 2ms+0ms, total 5ms
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:4
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:1
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r10 = staticinvoke <okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r10 = staticinvoke <okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r10 = staticinvoke <okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r9 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFailed(java.io.IOException)>	sig:$z1 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: boolean isMultiplexed()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFailed(java.io.IOException)>	sig:virtualinvoke $r8.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r7, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,boolean,okio.Sink)>	sig:virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: void streamFailed(java.io.IOException)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,boolean,okio.Sink)>	sig:$z2 = virtualinvoke $r6.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,boolean,okio.Sink)>	sig:$z2 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean isRecoverable(java.io.IOException,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r7 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,boolean,okio.Sink)>($r9, 1, null)	timediff:2
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r9 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void streamFailed(java.io.IOException)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r10.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/MixpanelTracker(24412): [1524023827943] event: GET /updates/com.mychime.waveremit.app/153.txt {"status":"failed","network":"WIFI","exception":"javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure!\n  Peer certificate chain:\n    sha256\/OIcizvJOXqYnRnUeGcTWL+Lc0mbR9l+vzVWo\/qCysCo=: CN=www.sendwave.com\n    sha256\/YLh1dUR9y6Kja30RrAn7JKnbQG\/uEtLMkBgFF2Fuihg=: CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US\n    sha256\/Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=: CN=DST Root CA X3,O=Digital Signature Trust Co.\n  Pinned certificates for www.sendwave.com:\n    sha256\/9+vE1l5l\/qcarNdvQrbTYoLqT2rVqckZAuVFNAPULDo="}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- HTTP FAILED: javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure!
D/OkHttp  (24412):   Peer certificate chain:
D/OkHttp  (24412):     sha256/OIcizvJOXqYnRnUeGcTWL+Lc0mbR9l+vzVWo/qCysCo=: CN=www.sendwave.com
D/OkHttp  (24412):     sha256/YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=: CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US
D/OkHttp  (24412):     sha256/Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=: CN=DST Root CA X3,O=Digital Signature Trust Co.
D/OkHttp  (24412):   Pinned certificates for www.sendwave.com:
D/OkHttp  (24412):     sha256/9+vE1l5l/qcarNdvQrbTYoLqT2rVqckZAuVFNAPULDo=
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:1
E/Updater (24412): Unable to get update list
E/Updater (24412): javax.net.ssl.SSLPeerUnverifiedException: Certificate pinning failure!
E/Updater (24412):   Peer certificate chain:
E/Updater (24412):     sha256/OIcizvJOXqYnRnUeGcTWL+Lc0mbR9l+vzVWo/qCysCo=: CN=www.sendwave.com
E/Updater (24412):     sha256/YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=: CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US
E/Updater (24412):     sha256/Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=: CN=DST Root CA X3,O=Digital Signature Trust Co.
E/Updater (24412):   Pinned certificates for www.sendwave.com:
E/Updater (24412):     sha256/9+vE1l5l/qcarNdvQrbTYoLqT2rVqckZAuVFNAPULDo=
E/Updater (24412): 	at okhttp3.CertificatePinner.check(CertificatePinner.java:187)
E/Updater (24412): 	at okhttp3.internal.io.RealConnection.connectTls(RealConnection.java:252)
E/Updater (24412): 	at okhttp3.internal.io.RealConnection.establishProtocol(RealConnection.java:196)
E/Updater (24412): 	at okhttp3.internal.io.RealConnection.buildConnection(RealConnection.java:171)
E/Updater (24412): 	at okhttp3.internal.io.RealConnection.connect(RealConnection.java:111)
E/Updater (24412): 	at okhttp3.internal.http.StreamAllocation.findConnection(StreamAllocation.java:187)
E/Updater (24412): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:123)
E/Updater (24412): 	at okhttp3.internal.http.StreamAllocation.newStream(StreamAllocation.java:93)
E/Updater (24412): 	at okhttp3.internal.http.HttpEngine.connect(HttpEngine.java:296)
E/Updater (24412): 	at okhttp3.internal.http.HttpEngine.sendRequest(HttpEngine.java:248)
E/Updater (24412): 	at okhttp3.RealCall.getResponse(RealCall.java:243)
E/Updater (24412): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(RealCall.java:201)
E/Updater (24412): 	at com.sendwave.db.TrackingInterceptor.intercept(TrackingInterceptor.java:21)
E/Updater (24412): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(RealCall.java:190)
E/Updater (24412): 	at okhttp3.logging.HttpLoggingInterceptor.intercept(HttpLoggingInterceptor.java:212)
E/Updater (24412): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(RealCall.java:190)
E/Updater (24412): 	at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:163)
E/Updater (24412): 	at okhttp3.RealCall.access$100(RealCall.java:30)
E/Updater (24412): 	at okhttp3.RealCall$AsyncCall.execute(RealCall.java:127)
E/Updater (24412): 	at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)
E/Updater (24412): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
E/Updater (24412): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
E/Updater (24412): 	at java.lang.Thread.run(Thread.java:841)
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onFailure(okhttp3.Call,java.io.IOException)>($r2, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 342K, 11% free 3841K/4276K, paused 1ms+1ms, total 6ms
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:104
D/libEGL  (24412): loaded /system/lib/egl/libEGL_adreno.so
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:71
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
D/        (24412): HostConnection::get() New Host Connection established 0xb8dafd90, tid 24412
D/libEGL  (24412): loaded /system/lib/egl/libGLESv1_CM_adreno.so
D/libEGL  (24412): loaded /system/lib/egl/libGLESv2_adreno.so
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
D/OpenGLRenderer(24412): Enabling debug mode 0
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=0.0 v=4500.0)
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12406354, downTime=12406354, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/WindowManager(  483): updateFocusedWindowLocked, focusedAppToken is null.
D/dalvikvm(24412): GC_CONCURRENT freed 461K, 13% free 3848K/4392K, paused 2ms+1ms, total 5ms
W/EGL_emulation(  538): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(  538): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_ALT_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407018, downTime=12407018, deviceId=-1, source=0x101 }
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.remit.activities.SplashActivity: +354ms (total +7s402ms)
V/PanelView(  538): animationTick called with dtms=-3; nothing to do (h=387.00003 v=-3000.0)
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407158, downTime=12407158, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  483): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ab1f864 attribute=null, token = android.os.BinderProxy@4abc0338
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
W/NetworkManagementSocketTagger(  483): setKernelCountSet(10007, 0) failed with errno -13
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:25
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:27
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:208
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:209
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:280
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:280
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:317
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:318
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:318
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:318
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:323
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:5
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:1
V/FlingTracker(  538): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  538): java.lang.Throwable
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  538): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  538): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  538): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  538): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  538): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  538): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  538): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  538): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  538): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  538): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  538): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  538): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  538): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=0.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=387.00003 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=-14; nothing to do (h=387.00003 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=231.13205 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=231.13205 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=231.13205 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=231.13205 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=231.13205 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=231.13205 v=-3000.0)
V/PanelView(  538): animationTick called with dtms=-7; nothing to do (h=231.13205 v=-3000.0)
I/MixpanelTracker(24412): [1524023828266] event: login: clicked login button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.activities.LoginActivity} from pid 24412
D/dalvikvm(24412): GC_CONCURRENT freed 463K, 13% free 3870K/4420K, paused 1ms+1ms, total 9ms
W/InputMethodManagerService(  483): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4abc3d2c (uid=10085 pid=24412)
D/dalvikvm(24412): GC_FOR_ALLOC freed 19K, 13% free 3887K/4420K, paused 2ms, total 2ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 9K, 13% free 3933K/4476K, paused 2ms, total 2ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 4.527MB for 635808-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed <1K, 11% free 4554K/5100K, paused 5ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed <1K, 11% free 4554K/5100K, paused 0ms+0ms, total 4ms
I/MixpanelTracker(24412): [1524023828307] event: login: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023828311] start timer: login: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:2
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_EQUALS, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407343, downTime=12407343, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_FOR_ALLOC freed 262K, 9% free 4699K/5144K, paused 2ms, total 2ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 7.881MB for 3369612-byte allocation
D/dalvikvm(24412): GC_CONCURRENT freed 11K, 6% free 7978K/8436K, paused 2ms+1ms, total 5ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 3ms
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:202
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:202
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: void <clinit>()>	sig:$r1 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: void <clinit>()>	sig:$r0 = virtualinvoke $r1.<okhttp3.internal.Platform: java.lang.String getPrefix()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:205
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:205
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:212
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:213
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:548
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;1;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:08 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:549
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/MixpanelTracker(24412): [1524023828394] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:557
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
D/Rollbar (24412): Item file handler running...
D/Rollbar (24412): Item file handler finished.
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;2;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:08 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:560
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={} (559ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:564
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;3;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:08 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:566
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:566
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:566
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.activities.LoginActivity: +150ms
W/EGL_emulation(  538): eglSurfaceAttrib not implemented 3093 12436
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:54
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:55
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 1164K, 13% free 8548K/9796K, paused 1ms+1ms, total 7ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 3ms
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:72
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:638
D/dalvikvm(24412): GC_CONCURRENT freed 1909K, 20% free 8510K/10512K, paused 0ms+1ms, total 3ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 3ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 1673K, 19% free 8542K/10512K, paused 3ms, total 3ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 593K, 19% free 8541K/10512K, paused 3ms, total 3ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 605K, 19% free 8541K/10512K, paused 3ms, total 3ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 799K, 19% free 8542K/10512K, paused 3ms, total 3ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 557K, 19% free 8597K/10512K, paused 2ms, total 2ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 562K, 19% free 8597K/10512K, paused 2ms, total 2ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 381K, 21% free 8327K/10512K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 11.419MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 0K, 16% free 11612K/13800K, paused 2ms, total 2ms
D/dalvikvm(24412): GC_CONCURRENT freed <1K, 16% free 11612K/13800K, paused 0ms+0ms, total 4ms
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:2
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023828614] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:3
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:4
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:4
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:3
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=14131200, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450426368, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023828628] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":14131200,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450426368,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_EISU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407644, downTime=12407644, deviceId=-1, source=0x101 }
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:71
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_STB_INPUT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407681, downTime=12407681, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_MULTIPLE, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=4, eventTime=12407706, downTime=12407706, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12407706, downTime=12407706, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12407706, downTime=12407706, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12407706, downTime=12407706, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12407706, downTime=12407706, deviceId=-1, source=0x101 }
I/MixpanelTracker(24412): [1524023828742] event: signup: clicked signup button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity} from pid 24412
V/WebViewChromium(24412): Binding Chromium to the background looper Looper (main, tid 1) {4a783a34}
I/chromium(24412): [INFO:library_loader_hooks.cc(112)] Chromium logging enabled: level = 0, default verbosity = 0
I/BrowserProcessMain(24412): Initializing chromium process, renderers=0
W/chromium(24412): [WARNING:proxy_service.cc(888)] PAC support disabled because there is no system implementation
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:4
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:1
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:5
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:85
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:85
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:156
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:156
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:159
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:159
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:159
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:159
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:160
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
I/MixpanelTracker(24412): [1524023828796] event: signup: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023828799] start timer: signup: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 5613K, 39% free 8943K/14640K, paused 4ms+2ms, total 9ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407867, downTime=12407867, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407880, downTime=12407880, deviceId=-1, source=0x101 }
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 483
D/dalvikvm(24412): GC_FOR_ALLOC freed 4051K, 62% free 5582K/14640K, paused 5ms, total 6ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 8.745MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 1K, 40% free 8871K/14640K, paused 5ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed 5K, 40% free 8868K/14640K, paused 1ms+0ms, total 5ms
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12407886, downTime=12407886, deviceId=-1, source=0x101 }
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:233
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:233
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:237
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:237
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:237
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:242
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:404
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;4;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:08 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:409
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/MixpanelTracker(24412): [1524023829028] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity: +282ms
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:447
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;5;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:08 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:450
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (449ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:450
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;6;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:08 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:452
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:452
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:452
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:77
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:78
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:92
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:544
D/dalvikvm(24412): GC_CONCURRENT freed 1736K, 38% free 9160K/14640K, paused 0ms+0ms, total 4ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 2055K, 37% free 9223K/14640K, paused 1ms+1ms, total 5ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 2152K, 38% free 9218K/14640K, paused 2ms+0ms, total 7ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 2021K, 37% free 9273K/14640K, paused 4ms, total 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 357K, 39% free 9028K/14640K, paused 2ms+0ms, total 7ms
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/dalvikvm(24412): GC_FOR_ALLOC freed 244K, 40% free 8822K/14640K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 11.903MB for 3363852-byte allocation
D/dalvikvm(24412): GC_CONCURRENT freed <1K, 18% free 12107K/14640K, paused 2ms+1ms, total 5ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 3ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/InputDispatcher(  483): Dropped event because of pending overdue app switch.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/InputManager(  483): Input event injection from pid 24402 failed.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 171
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 171
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 171
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 171
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 171
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 171
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/ActivityManager(  483): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 24412
W/PhoneFallbackEventHandler(24412): No activity found for android.intent.action.CALL_BUTTON.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/dalvikvm(24412): GC_FOR_ALLOC freed 4579K, 42% free 8873K/15156K, paused 3ms, total 3ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_CONCURRENT freed 1843K, 41% free 9049K/15156K, paused 2ms+2ms, total 8ms
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/dalvikvm(24412): GC_CONCURRENT freed 2099K, 41% free 8970K/15156K, paused 2ms+1ms, total 7ms
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_Y, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12409396, downTime=12409396, deviceId=-1, source=0x101 }
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12409415, downTime=12409415, deviceId=-1, source=0x101 }
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=580.65466, y[0]=-340.60648, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=8, eventTime=12409463, downTime=12409462, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=583.38727, y[0]=-335.86838, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12409464, downTime=12409462, deviceId=0, source=0x1002 }
W/InputMethodManagerService(  483): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4b11f6a0 attribute=android.view.inputmethod.EditorInfo@4aefe44c, token = android.os.BinderProxy@4a8caccc
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:1932 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/dalvikvm(  621): GC_CONCURRENT freed 435K, 15% free 3033K/3560K, paused 1ms+0ms, total 4ms
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/Validation(24412): Showing error message: Please enter your full legal name.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please provide a valid US phone number.
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyMultiple called from: android.webkit.WebView.onKeyMultiple(WebView.java:2179)
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/tos.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/MixpanelAPI.ConfigurationChecker(24412): com.mixpanel.android.surveys.SurveyActivity is not registered as an activity in your application, so surveys can't be shown.
I/MixpanelAPI.ConfigurationChecker(24412): Please add the child tag <activity android:name="com.mixpanel.android.surveys.SurveyActivity" /> to your <application> tag.
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:3
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023831041] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:3
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:4
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:4
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:2
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=15519744, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450315776, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023831049] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":15519744,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450315776,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_BUTTON_R1, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12410035, downTime=12410035, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12410070, downTime=12410070, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
D/Validation(24412): Showing error message: Please enter your full legal name.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:87
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:87
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:87
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/MixpanelTracker(24412): [1524023831148] event: signup: clicked signup button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
D/dalvikvm(24412): GC_CONCURRENT freed 1674K, 38% free 9446K/15156K, paused 2ms+1ms, total 11ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 1ms
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity} from pid 24412
I/MixpanelTracker(24412): [1524023831171] event: login: clicked login button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.activities.LoginActivity} from pid 24412
I/MixpanelTracker(24412): [1524023831185] event: signup: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023831188] start timer: signup: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
D/dalvikvm(24412): GC_CONCURRENT freed 1717K, 35% free 9874K/15156K, paused 2ms+1ms, total 12ms
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:16
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:16
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:95
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:95
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:182
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:182
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:185
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:185
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:185
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:185
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:186
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:3
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:1
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
I/MixpanelTracker(24412): [1524023831245] event: login: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023831253] start timer: login: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
D/dalvikvm(24412): GC_FOR_ALLOC freed 771K, 36% free 9707K/15156K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.773MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 4K, 30% free 12993K/18448K, paused 7ms, total 7ms
D/dalvikvm(24412): GC_CONCURRENT freed 0K, 30% free 12993K/18448K, paused 1ms+0ms, total 5ms
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_4, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12410158, downTime=12410158, deviceId=-1, source=0x101 }
D/dalvikvm(24412): GC_FOR_ALLOC freed 33K, 30% free 12993K/18448K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 15.981MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed <1K, 26% free 16283K/21740K, paused 5ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed 1K, 26% free 16283K/21740K, paused 1ms+0ms, total 8ms
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.activities.LoginActivity: +153ms (total +202ms)
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/dalvikvm(24412): GC_FOR_ALLOC freed 55K, 26% free 16272K/21740K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 19.178MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 5K, 22% free 19551K/25028K, paused 6ms, total 6ms
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:228
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:228
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:230
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:230
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:233
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:2
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:236
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:423
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;7;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:11 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:424
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023831468] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/tos.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:445
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;8;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:11 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:446
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (446ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:447
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;9;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:11 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:447
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:447
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:447
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:108
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:1
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:110
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:123
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:570
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/dalvikvm(24412): GC_FOR_ALLOC freed 8458K, 35% free 16545K/25128K, paused 7ms, total 7ms
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4b161e14 u0 com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity t247 f}
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023831746] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:3
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:4
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:4
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=25731072, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450299392, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023831760] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":25731072,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450299392,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12410724, downTime=12410724, deviceId=-1, source=0x101 }
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:78
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:78
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:78
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:1
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:5
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:5
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:78
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:78
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:156
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:157
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:158
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:158
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:158
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:158
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:159
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
I/MixpanelTracker(24412): [1524023832003] event: signup: clicked signup button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
D/dalvikvm(24412): GC_CONCURRENT freed 11689K, 49% free 9445K/18320K, paused 1ms+0ms, total 6ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 2ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity} from pid 24412
I/MixpanelTracker(24412): [1524023832023] event: signup: clicked signup button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity} from pid 24412
V/ActivityManager(  483): startActivityUncheckedLocked: task left null
V/ActivityManager(  483): java.lang.RuntimeException: here
V/ActivityManager(  483): 	at com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked(ActivityStackSupervisor.java:1646)
V/ActivityManager(  483): 	at com.android.server.am.ActivityStackSupervisor.startActivityLocked(ActivityStackSupervisor.java:1249)
V/ActivityManager(  483): 	at com.android.server.am.ActivityStackSupervisor.startActivityMayWait(ActivityStackSupervisor.java:741)
V/ActivityManager(  483): 	at com.android.server.am.ActivityManagerService.startActivityAsUser(ActivityManagerService.java:3118)
V/ActivityManager(  483): 	at com.android.server.am.ActivityManagerService.startActivity(ActivityManagerService.java:3104)
V/ActivityManager(  483): 	at android.app.ActivityManagerNative.onTransact(ActivityManagerNative.java:135)
V/ActivityManager(  483): 	at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2071)
V/ActivityManager(  483): 	at android.os.Binder.execTransact(Binder.java:404)
V/ActivityManager(  483): 	at dalvik.system.NativeStart.run(Native Method)
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023832045] event: signup: started {}
I/MixpanelTracker(24412): [1524023832051] start timer: signup: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:3
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:2
D/dalvikvm(24412): GC_CONCURRENT freed 1767K, 46% free 9900K/18320K, paused 0ms+1ms, total 6ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12411004, downTime=12411004, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12411129, downTime=12411129, deviceId=-1, source=0x101 }
D/dalvikvm(24412): GC_FOR_ALLOC freed 461K, 48% free 9567K/18320K, paused 6ms, total 6ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.636MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 60K, 31% free 12798K/18320K, paused 4ms, total 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 7K, 31% free 12793K/18320K, paused 1ms+1ms, total 10ms
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity: +153ms
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:278
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:278
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:280
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:280
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:281
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:283
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:443
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;10;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:12 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:444
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/MixpanelTracker(24412): [1524023832194] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
D/Validation(24412): Showing error message: Please enter your full legal name.
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:471
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;11;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:12 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:473
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (473ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:474
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;12;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:12 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:474
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:474
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:474
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/dalvikvm(  483): GC_CONCURRENT freed 5465K, 47% free 13248K/24880K, paused 2ms+2ms, total 64ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 sel={act=android.intent.action.MAIN cat=[android.intent.category.APP_CALCULATOR]}} from pid 483
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:35
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:1
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:40
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
D/dalvikvm(24412): GC_FOR_ALLOC freed 1414K, 29% free 13181K/18320K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 16.160MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 13K, 24% free 16453K/21608K, paused 7ms, total 7ms
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:68
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:542
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/FlingTracker(  538): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  538): java.lang.Throwable
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  538): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  538): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  538): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  538): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  538): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  538): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  538): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  538): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  538): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  538): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  538): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  538): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  538): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/dalvikvm(24412): GC_CONCURRENT freed 7651K, 38% free 13446K/21608K, paused 2ms+1ms, total 8ms
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/Validation(24412): Showing error message: Please provide a valid US phone number.
I/ActivityManager(  483): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 24412
W/PhoneFallbackEventHandler(24412): No activity found for android.intent.action.CALL_BUTTON.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12411625, downTime=12411625, deviceId=-1, source=0x101 }
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:1981 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:1985 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=687.7927, y[0]=501.974, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12411922, downTime=12411921, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12411906, downTime=12411906, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12411940, downTime=12411940, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12411941, downTime=12411941, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_CALL, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12411942, downTime=12411942, deviceId=-1, source=0x101 }
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:2026 
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
D/dalvikvm(24412): GC_CONCURRENT freed 4002K, 41% free 12881K/21608K, paused 1ms+0ms, total 8ms
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/tos.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/tos.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/tos.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4b161e14 u0 com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity t247 f}
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023833115] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:2
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=22126592, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450295296, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023833132] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":22126592,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450295296,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
I/ActivityManager(  483): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 24412
W/PhoneFallbackEventHandler(24412): No activity found for android.intent.action.CALL_BUTTON.
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12412143, downTime=12412143, deviceId=-1, source=0x101 }
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:69
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:69
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:69
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/MixpanelTracker(24412): [1524023833221] event: signup: clicked signup button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity} from pid 24412
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023833247] event: signup: started {}
I/MixpanelTracker(24412): [1524023833253] start timer: signup: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 3039K, 39% free 13208K/21608K, paused 1ms+0ms, total 8ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:17
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:17
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:89
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:90
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:159
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:159
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:161
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:161
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:161
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:161
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:162
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12412224, downTime=12412224, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12412328, downTime=12412328, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_FOR_ALLOC freed 4661K, 56% free 9620K/21608K, paused 7ms, total 7ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.688MB for 3369612-byte allocation
D/dalvikvm(24412): GC_CONCURRENT freed 156K, 41% free 12754K/21608K, paused 2ms+1ms, total 7ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 7ms
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity: +134ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:194
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:194
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:196
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:196
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:197
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:199
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:364
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;13;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:13 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:364
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/MixpanelTracker(24412): [1524023833481] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:389
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:3
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:5
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;14;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:13 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:403
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (402ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:404
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;15;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:13 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:410
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:410
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:410
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
D/dalvikvm(24412): GC_FOR_ALLOC freed 1085K, 42% free 12734K/21608K, paused 6ms, total 6ms
D/dalvikvm(24412): GC_CONCURRENT freed 10K, 26% free 16012K/21608K, paused 2ms+1ms, total 9ms
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:106
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:108
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:121
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:532
D/dalvikvm(24412): GC_CONCURRENT freed 7228K, 30% free 15208K/21608K, paused 1ms+0ms, total 7ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12412690, downTime=12412690, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=462.31146, y[0]=556.9137, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=1, eventTime=12412727, downTime=12412726, deviceId=0, source=0x1002 }
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=467.147, y[0]=552.57153, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12412727, downTime=12412726, deviceId=0, source=0x1002 }
W/InputMethodManagerService(  483): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a9b0c10 attribute=android.view.inputmethod.EditorInfo@4a973184, token = android.os.BinderProxy@4a94ca64
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:1932 
D/dalvikvm(24412): GC_FOR_ALLOC freed 3746K, 42% free 12651K/21608K, paused 4ms, total 5ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 15.642MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 1K, 36% free 15934K/24896K, paused 3ms, total 3ms
D/dalvikvm(24412): GC_CONCURRENT freed <1K, 36% free 16154K/24896K, paused 2ms+1ms, total 8ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12412955, downTime=12412955, deviceId=-1, source=0x101 }
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:1981 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:1985 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_POINTER_DOWN(1), id[0]=0, x[0]=448.03732, y[0]=538.8938, toolType[0]=TOOL_TYPE_UNKNOWN, id[1]=1, x[1]=80.0, y[1]=179.0, toolType[1]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=2, historySize=0, eventTime=12413065, downTime=12413065, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_POINTER_UP(1), id[0]=0, x[0]=452.10648, y[0]=545.4697, toolType[0]=TOOL_TYPE_UNKNOWN, id[1]=1, x[1]=65.148766, y[1]=180.88843, toolType[1]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=2, historySize=0, eventTime=12413065, downTime=12413065, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=455.11737, y[0]=556.2461, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12413066, downTime=12413065, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-1.0, y[0]=-1.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=20, eventTime=12413070, downTime=-1, deviceId=0, source=0x10004 }
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:2026 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
I/ActivityManager(  483): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 24412
W/PhoneFallbackEventHandler(24412): No activity found for android.intent.action.CALL_BUTTON.
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/privacy.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/privacy.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413373, downTime=12413373, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413377, downTime=12413377, deviceId=-1, source=0x101 }
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_0, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413377, downTime=12413377, deviceId=-1, source=0x101 }
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/tos.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413403, downTime=12413403, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:1981 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:1985 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12413429, downTime=12413429, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12413429, downTime=12413429, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12413429, downTime=12413429, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=203.26678, y[0]=-181.319, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12413432, downTime=12413431, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=202.38484, y[0]=-169.89816, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12413432, downTime=12413431, deviceId=0, source=0x1002 }
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(24412): Dropping event due to root view being removed: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413406, downTime=12413406, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413459, downTime=12413459, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:2026 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.android.contacts/.activities.PeopleActivity sel={act=android.intent.action.MAIN cat=[android.intent.category.APP_CONTACTS]}} from pid 483
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyMultiple called from: android.webkit.WebView.onKeyMultiple(WebView.java:2179)
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
W/UnimplementedWebViewApi(24412): Unimplemented WebView method onKeyDown called from: android.webkit.WebView.onKeyDown(WebView.java:2169)
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/MixpanelAPI.ConfigurationChecker(24412): com.mixpanel.android.surveys.SurveyActivity is not registered as an activity in your application, so surveys can't be shown.
I/MixpanelAPI.ConfigurationChecker(24412): Please add the child tag <activity android:name="com.mixpanel.android.surveys.SurveyActivity" /> to your <application> tag.
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023834641] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:2
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:3
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:3
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=25493504, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450287104, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023834657] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":25493504,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450287104,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_YEN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413690, downTime=12413690, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=4.0, y[0]=-5.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=12413704, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(24412): Dropping event due to no window focus: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=0.0, y[0]=0.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12413704, downTime=12413702, deviceId=0, source=0x10004 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:92
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:92
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:93
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
W/WindowManager(  483): updateFocusedWindowLocked, focusedAppToken is null.
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:5
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:5
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:77
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:77
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:170
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:170
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:171
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:171
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:171
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:171
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:172
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
W/ViewRootImpl(  538): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413811, downTime=12413811, deviceId=-1, source=0x101 }
W/ViewRootImpl(  538): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=3.0, y[0]=-4.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12413811, downTime=-1, deviceId=0, source=0x10004 }
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:1
I/MixpanelTracker(24412): [1524023834822] event: signup: clicked signup button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity} from pid 24412
W/InputMethodManagerService(  483): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4abc3d2c (uid=10085 pid=24412)
I/MixpanelTracker(24412): [1524023834852] event: signup: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/InputEventReceiver(  538): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  538): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  538): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  538): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  538): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(  538): Dropping event due to root view being removed: MotionEvent { action=ACTION_POINTER_DOWN(1), id[0]=0, x[0]=17.513191, y[0]=385.3523, toolType[0]=TOOL_TYPE_UNKNOWN, id[1]=1, x[1]=45.0, y[1]=645.0, toolType[1]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=2, historySize=0, eventTime=12413849, downTime=12413848, deviceId=0, source=0x1002 }
W/ViewRootImpl(  538): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=0.0, y[0]=380.36462, toolType[0]=TOOL_TYPE_UNKNOWN, id[1]=1, x[1]=6.127384, y[1]=647.76697, toolType[1]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=2, historySize=2, eventTime=12413850, downTime=12413848, deviceId=0, source=0x1002 }
W/ViewRootImpl(  538): Dropping event due to root view being removed: MotionEvent { action=ACTION_POINTER_UP(1), id[0]=0, x[0]=0.0, y[0]=380.13507, toolType[0]=TOOL_TYPE_UNKNOWN, id[1]=1, x[1]=0.0, y[1]=647.9083, toolType[1]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=2, historySize=0, eventTime=12413851, downTime=12413848, deviceId=0, source=0x1002 }
W/ViewRootImpl(  538): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=0.0, y[0]=375.07013, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12413851, downTime=12413848, deviceId=0, source=0x1002 }
W/InputEventReceiver(  538): Attempted to finish an input event but the input event receiver has already been disposed.
I/MixpanelTracker(24412): [1524023834860] start timer: signup: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
W/ViewRootImpl(  538): Dropping event due to root view being removed: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413847, downTime=12413847, deviceId=-1, source=0x101 }
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
D/dalvikvm(24412): GC_CONCURRENT freed 10788K, 62% free 9700K/24896K, paused 1ms+1ms, total 10ms
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413918, downTime=12413918, deviceId=-1, source=0x101 }
D/dalvikvm(24412): GC_FOR_ALLOC freed 217K, 62% free 9533K/24896K, paused 6ms, total 6ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.602MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed <1K, 49% free 12822K/24896K, paused 4ms, total 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 4K, 49% free 12821K/24896K, paused 1ms+1ms, total 10ms
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity: +133ms
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413934, downTime=12413934, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413977, downTime=12413977, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12413979, downTime=12413979, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/Validation(24412): Showing error message: Please enter your full legal name.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:226
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:226
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:228
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:228
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:229
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:231
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:404
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;16;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:14 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:405
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023835047] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:431
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;17;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:14 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:432
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (432ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:433
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;18;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:14 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:435
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:435
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:435
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
D/dalvikvm(24412): GC_FOR_ALLOC freed 1180K, 49% free 12833K/24896K, paused 5ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed 3305K, 49% free 12813K/24896K, paused 1ms+1ms, total 6ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:120
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:122
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:132
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:567
D/Validation(24412): Showing error message: Please enter your full legal name.
D/dalvikvm(24412): GC_CONCURRENT freed 2919K, 48% free 13117K/24896K, paused 1ms+0ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed 3239K, 47% free 13262K/24896K, paused 3ms+0ms, total 8ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4a931d74 u0 com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity t247 f}
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023835368] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:3
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:4
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:4
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=25493504, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450278912, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023835380] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":25493504,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450278912,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12414410, downTime=12414410, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12414424, downTime=12414424, deviceId=-1, source=0x101 }
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:71
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/MixpanelTracker(24412): [1524023835507] event: login: clicked login button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:1
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 3773K, 49% free 12945K/24896K, paused 1ms+1ms, total 7ms
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:8
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:8
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:80
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:81
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:152
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:153
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:154
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:154
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:154
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:154
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:155
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:3
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:3
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:4
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:2
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.activities.LoginActivity} from pid 24412
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_MULTIPLE, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=2, eventTime=12414536, downTime=12414536, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12414536, downTime=12414536, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12414536, downTime=12414536, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12414536, downTime=12414536, deviceId=-1, source=0x101 }
I/MixpanelTracker(24412): [1524023835539] event: login: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023835548] start timer: login: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:3
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12414498, downTime=12414498, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_FOR_ALLOC freed 4568K, 50% free 9449K/18556K, paused 6ms, total 6ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.521MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 9K, 32% free 12730K/18556K, paused 4ms, total 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 13K, 32% free 12719K/18556K, paused 0ms+1ms, total 6ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.activities.LoginActivity: +91ms
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4ab1d218 u0 com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity t247 f}
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/dalvikvm(24412): GC_FOR_ALLOC freed 73K, 32% free 12671K/18556K, paused 3ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 15.662MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 193K, 28% free 15763K/21844K, paused 3ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed <1K, 28% free 15763K/21844K, paused 2ms+0ms, total 7ms
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r6 = virtualinvoke $r5.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r7 = virtualinvoke $r1.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:1
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023835706] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=22368256, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450274816, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023835721] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":22368256,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450274816,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:201
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:201
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:204
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:204
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:208
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:2
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:3
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:212
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:369
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;19;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:15 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:369
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/MixpanelTracker(24412): [1524023835738] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12414632, downTime=12414632, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:393
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:2
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;20;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:15 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:397
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (396ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:398
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;21;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:15 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:399
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:399
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:399
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:73
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:73
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:73
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/MixpanelTracker(24412): [1524023835840] event: login: clicked login button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.activities.LoginActivity} from pid 24412
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:5
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:5
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:77
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:78
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:151
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:151
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:152
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:152
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:152
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:152
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:154
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023835866] event: login: started {}
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:101
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:102
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/MixpanelTracker(24412): [1524023835880] start timer: login: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 10581K, 49% free 9509K/18556K, paused 2ms+1ms, total 9ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:5
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:5
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:5
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:5
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:5
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:126
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:525
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12414917, downTime=12414917, deviceId=-1, source=0x101 }
D/dalvikvm(24412): GC_CONCURRENT freed 2214K, 49% free 9531K/18556K, paused 0ms+0ms, total 6ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 2224K, 49% free 9487K/18556K, paused 4ms, total 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 1975K, 48% free 9654K/18556K, paused 0ms+1ms, total 6ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 2ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 834K, 50% free 9279K/18556K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.355MB for 3369612-byte allocation
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_DOT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12414929, downTime=12414929, deviceId=-1, source=0x101 }
D/dalvikvm(24412): GC_FOR_ALLOC freed 1K, 33% free 12568K/18556K, paused 6ms, total 6ms
D/dalvikvm(24412): GC_CONCURRENT freed <1K, 33% free 12570K/18556K, paused 1ms+0ms, total 7ms
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.activities.LoginActivity: +135ms
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_FORWARD_DEL, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12414929, downTime=12414929, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/dalvikvm(24412): GC_FOR_ALLOC freed 27K, 33% free 12577K/18556K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 15.571MB for 3363852-byte allocation
D/dalvikvm(24412): GC_CONCURRENT freed 3K, 28% free 15859K/21844K, paused 2ms+1ms, total 5ms
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:218
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:218
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:219
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:219
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:220
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:221
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:376
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;22;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:376
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/MixpanelTracker(24412): [1524023836086] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:394
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;23;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:395
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (395ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:396
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;24;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:397
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:397
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:397
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4ab1d218 u0 com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity t247 f}
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4abd995c u0 com.mychime.waveremit.app/com.sendwave.activities.LoginActivity t247 f}
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4ab1d218 u0 com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity t247 f}
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r6 = virtualinvoke $r5.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r7 = virtualinvoke $r1.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023836166] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:2
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:2
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:2
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:2
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=22368256, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450270720, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023836176] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":22368256,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450270720,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r6 = virtualinvoke $r5.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r7 = virtualinvoke $r1.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r6 = virtualinvoke $r5.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r7 = virtualinvoke $r1.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:0
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023836194] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:2
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:2
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=22368256, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450262528, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023836201] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":22368256,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450262528,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:116
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:118
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:70
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:70
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 7145K, 40% free 13235K/21844K, paused 2ms+2ms, total 17ms
W/ViewRootImpl(24412): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=1.0, y[0]=3.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=1, eventTime=12415227, downTime=-1, deviceId=0, source=0x10004 }
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(24412): <com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>###specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)###https://api.mixpanel.com/track?ip=1
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r15 = virtualinvoke $r12.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setConnectTimeout(int)>(2000)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setReadTimeout(int)>(10000)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:158
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:555
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>("POST")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>($i2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:71
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_CONCURRENT freed 3591K, 40% free 13129K/21844K, paused 0ms+1ms, total 6ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 3344K, 40% free 13185K/21844K, paused 6ms, total 6ms
D/dalvikvm(24412): GC_CONCURRENT freed 1012K, 40% free 13293K/21844K, paused 2ms+1ms, total 7ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 20ms
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:5
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:5
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:98
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:98
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:169
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:169
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:169
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:169
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:169
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:169
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:172
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:1
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r18 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:73
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:5
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:5
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:79
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:79
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:150
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:150
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:151
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:151
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:151
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:151
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:152
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:1
I/MixpanelTracker(24412): [1524023836405] event: signup: clicked signup button {}
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity} from pid 24412
I/MixpanelTracker(24412): [1524023836437] event: signup: started {}
I/MixpanelTracker(24412): [1524023836444] start timer: signup: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:107
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): URLConn;%;25;%;<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>;%;$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://api.mixpanel.com/track?ip=1;%;true;%;1;%;no-cache, no-store;%;Not found;%;Not found;%;Not found
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:3
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:4
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.mpmetrics.DecideChecker: java.lang.String getDecideResponseFromServer(java.lang.String,java.lang.String,com.mixpanel.android.util.RemoteService)>	sig:$r1 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r1, "utf-8")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.mpmetrics.DecideChecker: java.lang.String getDecideResponseFromServer(java.lang.String,java.lang.String,com.mixpanel.android.util.RemoteService)>	sig:$r2 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r2, "utf-8")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(24412): <com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>###specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)###https://decide.mixpanel.com/decide?version=1&lib=android&token=d86b175627c75cc8b22f4e475d1e397a&distinct_id=d0ae09e7-a630-409d-b443-609613f1c8a0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r15 = virtualinvoke $r12.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setConnectTimeout(int)>(2000)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setReadTimeout(int)>(10000)	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_BUTTON_12, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12415501, downTime=12415501, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12415501, downTime=12415501, deviceId=-1, source=0x101 }
D/dalvikvm(24412): GC_FOR_ALLOC freed 6906K, 48% free 9705K/18556K, paused 7ms, total 7ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.771MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 70K, 31% free 12925K/18556K, paused 5ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed <1K, 31% free 12928K/18556K, paused 1ms+1ms, total 7ms
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:86
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): URLConn;%;26;%;<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>;%;$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://decide.mixpanel.com/decide?version=1&lib=android&token=d86b175627c75cc8b22f4e475d1e397a&distinct_id=d0ae09e7-a630-409d-b443-609613f1c8a0;%;false;%;Not found;%;no-cache, no-store;%;Not found;%;Not found;%;Not found
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity: +134ms
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:222
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:222
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:224
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:224
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:225
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:226
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:380
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;27;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:381
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:237
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:237
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/MixpanelTracker(24412): [1524023836576] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:240
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:240
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:240
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:242
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:415
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;28;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:417
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:401
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;29;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:403
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (403ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:404
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;30;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:404
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:404
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:405
I/MixpanelTracker(24412): [1524023836599] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:460
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_FOR_ALLOC freed 2393K, 31% free 12914K/18556K, paused 8ms, total 8ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 15.899MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 2K, 26% free 16197K/21844K, paused 7ms, total 8ms
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:23
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:6
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;31;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:491
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (491ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:492
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;32;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:16 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:493
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:493
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:493
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 216K, 25% free 16408K/21844K, paused 2ms+2ms, total 11ms
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
D/Validation(24412): Showing error message: Please enter your full legal name.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:123
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:125
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:4
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:5
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:72
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:73
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:2
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:142
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:548
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:97
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:590
D/dalvikvm(24412): GC_CONCURRENT freed 7261K, 38% free 13688K/21844K, paused 1ms+0ms, total 6ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 5ms
D/dalvikvm(24412): GC_CONCURRENT freed 3625K, 38% free 13673K/21844K, paused 0ms+1ms, total 7ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 7ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 3896K, 39% free 13367K/21844K, paused 6ms, total 6ms
D/dalvikvm(24412): GC_CONCURRENT freed 3366K, 39% free 13490K/21844K, paused 1ms+1ms, total 6ms
D/Validation(24412): Showing error message: Please enter your full legal name.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  483): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 24412
W/PhoneFallbackEventHandler(24412): No activity found for android.intent.action.CALL_BUTTON.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 0
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 0
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
D/Validation(24412): Showing error message: Please provide a valid US phone number.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.hideMySoftInput:2299 com.android.internal.view.IInputMethodManager$Stub.onTransact:288 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_FOR_ALLOC freed 4160K, 57% free 9563K/21844K, paused 4ms, total 4ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.632MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed <1K, 42% free 12853K/21844K, paused 5ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed 215K, 43% free 12638K/21844K, paused 0ms+1ms, total 4ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
D/dalvikvm(24412): GC_FOR_ALLOC freed 3325K, 50% free 9337K/18452K, paused 3ms, total 3ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.406MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed <1K, 42% free 12622K/21740K, paused 4ms, total 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 3K, 42% free 12619K/21740K, paused 2ms+1ms, total 7ms
D/Validation(24412): Showing error message: Please provide a valid US phone number.
D/Validation(24412): Showing error message: Please enter your full legal name.
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 200
D/UIUtil  (24412): Scroll bounds: Rect(0, 0 - 720, 1168); max h: 112
W/MixpanelAPI.ConfigurationChecker(24412): com.mixpanel.android.surveys.SurveyActivity is not registered as an activity in your application, so surveys can't be shown.
I/MixpanelAPI.ConfigurationChecker(24412): Please add the child tag <activity android:name="com.mixpanel.android.surveys.SurveyActivity" /> to your <application> tag.
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
W/ActivityManager(  483): Duplicate finish request for ActivityRecord{4ad04e00 u0 com.mychime.waveremit.app/com.sendwave.remit.activities.SignupActivity t247 f}
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:2
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:2
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:2
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:2
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:2
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:2
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:2
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/Updater (24412): Checking and cleaning up files...
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023837320] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:2
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:1
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=22261760, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450258432, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023837332] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":22261760,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450258432,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void addQueryParamsToUrl(okhttp3.HttpUrl$Builder,java.util.Map)>	sig:virtualinvoke $r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>($r1, $r0, $i2, $i1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder get()>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder get()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r6 = virtualinvoke $r5.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: java.lang.String host()>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>	sig:$r7 = virtualinvoke $r1.<okhttp3.RealCall$AsyncCall: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DB$Table: void syncInBackgroundUsingQuery(org.json.simple.JSONObject,com.sendwave.db.DB$SyncCallback)>	sig:interfaceinvoke $r7.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
W/Settings(24412): Setting install_non_market_apps has moved from android.provider.Settings.Secure to android.provider.Settings.Global.
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/Updater (24412): Request for update list is in flight; skipping check for updates
I/Updater (24412): Checking and cleaning up files...
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> GET https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} http/1.1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023837382] start timer: GET /t/srvdata
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_APOSTROPHE, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12416357, downTime=12416357, deviceId=-1, source=0x101 }
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/Updater (24412): Device info: {telephony_sim_operator=31016, app_version_code=153, telephony_sim_country=us, telephony_device_sv=null, connection_type=WIFI, device_model=SM-G955N, telephony_sim_operator_name=T-Mobile, telephony_network_operator_name=T-Mobile, app_package_name=com.mychime.waveremit.app, maximum_heap_size=201326592, total_disk_space=66009485312, telephony_network_country=us, telephony_sim_serial_number=89014103211768325417, device_manufacturer=samsung, current_heap_size=22261760, android_os_version=4.4.2, android_api_level=19, telephony_phone_type=GSM, available_disk_space=65450258432, telephony_network_operator=31016, android_profile_id=b083feaa75293926, telephony_device_id=354730020176834, mobile_number=, telephony_network_type=UMTS, telephony_line1_number=, app_version_name=1.5.3, telephony_subscriber_id=310161768325417}
I/MixpanelTracker(24412): [1524023837393] event: device_info {"telephony_sim_operator":"31016","app_version_code":153,"telephony_sim_country":"us","telephony_device_sv":null,"connection_type":"WIFI","device_model":"SM-G955N","telephony_sim_operator_name":"T-Mobile","telephony_network_operator_name":"T-Mobile","app_package_name":"com.mychime.waveremit.app","maximum_heap_size":201326592,"total_disk_space":66009485312,"telephony_network_country":"us","telephony_sim_serial_number":"89014103211768325417","device_manufacturer":"samsung","current_heap_size":22261760,"android_os_version":"4.4.2","android_api_level":19,"telephony_phone_type":"GSM","available_disk_space":65450258432,"telephony_network_operator":"31016","android_profile_id":"b083feaa75293926","telephony_device_id":"354730020176834","mobile_number":"","telephony_network_type":"UMTS","telephony_line1_number":"","app_version_name":"1.5.3","telephony_subscriber_id":"310161768325417"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:76
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:76
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:76
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
V/FlingTracker(  538): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  538): java.lang.Throwable
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  538): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  538): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  538): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  538): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  538): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  538): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  538): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  538): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  538): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  538): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  538): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  538): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  538): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  538): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  538): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  538): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  538): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  538): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:85
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:85
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:85
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:4
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:7
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:7
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:84
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:84
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:160
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:160
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:161
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:161
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:162
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:162
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:163
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 6481K, 57% free 9388K/21740K, paused 1ms+2ms, total 9ms
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:5
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:7
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:7
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:79
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:79
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:164
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:164
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:167
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:167
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:167
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:167
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:168
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
I/MixpanelTracker(24412): [1524023837557] event: login: clicked login button {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): START u0 {cmp=com.mychime.waveremit.app/com.sendwave.activities.LoginActivity} from pid 24412
W/ViewRootImpl(24412): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-5.0, y[0]=2.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=12416568, downTime=-1, deviceId=0, source=0x10004 }
I/MixpanelTracker(24412): [1524023837593] event: login: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/ActivityManager(  483): START u0 {act=android.intent.action.VIEW cat=[android.intent.category.BROWSABLE] dat=http://www.sendwave.com/tos.html cmp=com.android.browser/.BrowserActivity (has extras)} from pid 24412
I/MixpanelTracker(24412): [1524023837606] start timer: login: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_BUTTON_THUMBL, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12416568, downTime=12416568, deviceId=-1, source=0x101 }
D/dalvikvm(24412): GC_FOR_ALLOC freed 1686K, 57% free 9434K/21740K, paused 7ms, total 8ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 12.506MB for 3369612-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 2K, 42% free 12723K/21740K, paused 3ms, total 3ms
D/dalvikvm(24412): GC_CONCURRENT freed 18K, 42% free 12706K/21740K, paused 3ms+0ms, total 9ms
I/ActivityManager(  483): Displayed com.mychime.waveremit.app/com.sendwave.activities.LoginActivity: +87ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12416568, downTime=12416568, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.windowGainedFocus:2011 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 483
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:202
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:202
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:203
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:203
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:211
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:217
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:382
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;33;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:17 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:383
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023837707] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:405
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:3
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;34;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:17 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:408
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (408ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:1
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:410
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:2
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:2
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;35;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:17 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:413
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:413
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:413
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:210
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:210
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:211
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:211
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:212
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
D/dalvikvm(24412): GC_FOR_ALLOC freed 1544K, 42% free 12707K/21740K, paused 7ms, total 7ms
I/dalvikvm-heap(24412): Grow heap (frag case) to 15.697MB for 3363852-byte allocation
D/dalvikvm(24412): GC_FOR_ALLOC freed 8K, 37% free 15984K/25028K, paused 4ms, total 4ms
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:14
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:14
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:228
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:397
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;36;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:17 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:398
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/MixpanelTracker(24412): [1524023837782] event: GET /t/srvdata {"length":59417,"status":"HTTP 200","network":"WIFI"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
D/dalvikvm(24412): GC_CONCURRENT freed 523K, 36% free 16086K/25028K, paused 1ms+3ms, total 23ms
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:421
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;37;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:17 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:422
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 200 OK https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0} (422ms, 59417-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:423
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;38;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/t/srvdata?q={%22when_updated__gt%22:0};%;GET;%;[59417];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:17 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 59417
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:424
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:424
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:424
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:103
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:0
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:108
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(24412): <com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>###specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)###https://api.mixpanel.com/track?ip=1
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r15 = virtualinvoke $r12.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setConnectTimeout(int)>(2000)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setReadTimeout(int)>(10000)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>("POST")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>($i2)	timediff:0
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:128
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:541
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r18 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:11
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/dalvikvm(24412): GC_CONCURRENT freed 7370K, 48% free 13145K/25028K, paused 1ms+0ms, total 6ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/dalvikvm(24412): GC_CONCURRENT freed 3353K, 48% free 13171K/25028K, paused 0ms+1ms, total 4ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 4ms
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:94
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:1
I/System.out(24412): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: java.lang.String string()>	sig:$r3 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: java.lang.String string()>()	timediff:98
I/System.out(24412): body:<com.sendwave.db.DB$Table$2: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:4
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:5
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:1
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:112
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:537
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:55
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): URLConn;%;39;%;<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>;%;$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://api.mixpanel.com/track?ip=1;%;true;%;1;%;no-cache, no-store;%;Not found;%;Not found;%;Not found
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.mpmetrics.DecideChecker: java.lang.String getDecideResponseFromServer(java.lang.String,java.lang.String,com.mixpanel.android.util.RemoteService)>	sig:$r1 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r1, "utf-8")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.mpmetrics.DecideChecker: java.lang.String getDecideResponseFromServer(java.lang.String,java.lang.String,com.mixpanel.android.util.RemoteService)>	sig:$r2 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r2, "utf-8")	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(24412): <com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>###specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r1)###https://decide.mixpanel.com/decide?version=1&lib=android&token=d86b175627c75cc8b22f4e475d1e397a&distinct_id=d0ae09e7-a630-409d-b443-609613f1c8a0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r15 = virtualinvoke $r12.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setConnectTimeout(int)>(2000)	timediff:0
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void setReadTimeout(int)>(10000)	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 3556K, 48% free 13078K/25028K, paused 3ms+1ms, total 10ms
D/dalvikvm(24412): WAIT_FOR_CONCURRENT_GC blocked 6ms
D/dalvikvm(24412): GC_FOR_ALLOC freed 3407K, 49% free 13003K/25028K, paused 5ms, total 5ms
D/dalvikvm(24412): GC_CONCURRENT freed 1008K, 47% free 13282K/25028K, paused 1ms+1ms, total 7ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:88
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(24412): URLConn;%;40;%;<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>;%;$r19 = virtualinvoke $r16.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://decide.mixpanel.com/decide?version=1&lib=android&token=d86b175627c75cc8b22f4e475d1e397a&distinct_id=d0ae09e7-a630-409d-b443-609613f1c8a0;%;false;%;Not found;%;no-cache, no-store;%;Not found;%;Not found;%;Not found
I/System.out(24412): body:<com.mixpanel.android.util.HttpService: byte[] performRequest(java.lang.String,java.util.List,javax.net.ssl.SSLSocketFactory)>	sig:virtualinvoke $r16.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/dalvikvm(  483): GC_CONCURRENT freed 2654K, 48% free 13092K/24880K, paused 1ms+4ms, total 22ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/InputDispatcher(  483): Dropped event because of pending overdue app switch.
W/InputManager(  483): Input event injection from pid 24402 failed.
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
D/dalvikvm(  538): GC_CONCURRENT freed 2385K, 61% free 10361K/26488K, paused 1ms+1ms, total 18ms
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 483
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.showSoftInput:1753 com.android.internal.view.IInputMethodManager$Stub.onTransact:175 com.android.server.InputMethodManagerService.onTransact:818 
I/MixpanelTracker(24412): [1524023838538] event: login: submitted {"email_or_mobile":"v\n"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
D/BluetoothManagerService(  483): checkIfCallerIsForegroundUser: valid=true callingUser=0 foregroundUser=0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r6 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r7 = virtualinvoke $r4.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r5 = virtualinvoke $r6.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.FormBody bodyFromParams(java.util.Map)>	sig:specialinvoke $r1.<okhttp3.FormBody$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.FormBody bodyFromParams(java.util.Map)>	sig:virtualinvoke $r1.<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.FormBody bodyFromParams(java.util.Map)>	sig:virtualinvoke $r1.<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.FormBody bodyFromParams(java.util.Map)>	sig:virtualinvoke $r1.<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.FormBody bodyFromParams(java.util.Map)>	sig:virtualinvoke $r1.<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $r0, $i2, $i1, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.FormBody bodyFromParams(java.util.Map)>	sig:virtualinvoke $r1.<okhttp3.FormBody$Builder: okhttp3.FormBody$Builder add(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: void <clinit>()>	sig:$r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("application/x-www-form-urlencoded")	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: void <init>(java.util.List,java.util.List)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: void <init>(java.util.List,java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: void <init>(java.util.List,java.util.List)>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: void <init>(java.util.List,java.util.List,okhttp3.FormBody$1)>	sig:specialinvoke $r0.<okhttp3.FormBody: void <init>(java.util.List,java.util.List)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody$Builder: okhttp3.FormBody build()>	sig:specialinvoke $r1.<okhttp3.FormBody: void <init>(java.util.List,java.util.List,okhttp3.FormBody$1)>($r2, $r3, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.FormBody bodyFromParams(java.util.Map)>	sig:$r7 = virtualinvoke $r1.<okhttp3.FormBody$Builder: okhttp3.FormBody build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:virtualinvoke $r8.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r4 = virtualinvoke $r7.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: okhttp3.Call newCall(java.lang.String,java.lang.String,java.util.Map)>	sig:$r11 = virtualinvoke $r10.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
E/dalvikvm(24412): Could not find class 'java.beans.ConstructorProperties', referenced from method com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector$Java7Support.<init>
W/dalvikvm(24412): VFY: unable to resolve const-class 4404 (Ljava/beans/ConstructorProperties;) in Lcom/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector$Java7Support;
D/dalvikvm(24412): VFY: replacing opcode 0x1c at 0x0003
E/dalvikvm(24412): Could not find class 'java.beans.ConstructorProperties', referenced from method com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector$Java7Support.findConstructorName
W/dalvikvm(24412): VFY: unable to resolve const-class 4404 (Ljava/beans/ConstructorProperties;) in Lcom/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector$Java7Support;
D/dalvikvm(24412): VFY: replacing opcode 0x1c at 0x0006
E/dalvikvm(24412): Could not find class 'java.beans.Transient', referenced from method com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector$Java7Support.findTransient
W/dalvikvm(24412): VFY: unable to resolve const-class 4405 (Ljava/beans/Transient;) in Lcom/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector$Java7Support;
D/dalvikvm(24412): VFY: replacing opcode 0x1c at 0x0000
E/dalvikvm(24412): Could not find class 'java.beans.ConstructorProperties', referenced from method com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector$Java7Support.hasCreatorAnnotation
W/dalvikvm(24412): VFY: unable to resolve const-class 4404 (Ljava/beans/ConstructorProperties;) in Lcom/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector$Java7Support;
D/dalvikvm(24412): VFY: replacing opcode 0x1c at 0x0000
W/nAnnotationIntrospector(24412): Unable to load JDK7 annotation types; will have to skip
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r11 = virtualinvoke $r8.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r12 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Connection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r8.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: long contentLength()>	sig:$l0 = specialinvoke $r0.<okhttp3.FormBody: long writeOrCountBytes(okio.BufferedSink,boolean)>(null, 1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r11.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): --> POST https://app.sendwave.com/a/login http/1.1 (146-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/MixpanelTracker(24412): [1524023838576] start timer: POST /a/login
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r5 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r5.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r6)	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: long contentLength()>	sig:$l0 = specialinvoke $r0.<okhttp3.FormBody: long writeOrCountBytes(okio.BufferedSink,boolean)>(null, 1)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r3.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r6)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:1
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(24412): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r9 = virtualinvoke $r7.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Address: boolean equals(java.lang.Object)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient$TimeoutDns$2: java.util.List call()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:6
I/System.out(24412): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:7
I/System.out(24412): body:<com.sendwave.activities.LoginActivity: void attemptLogin(java.lang.String)>	sig:interfaceinvoke $r9.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r12)	timediff:7
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12417530, downTime=12417530, deviceId=-1, source=0x101 }
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ViewRootImpl(24412): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-2.0, y[0]=-4.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=12417592, downTime=-1, deviceId=0, source=0x10004 }
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12417593, downTime=12417593, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=12417637, downTime=12417637, deviceId=-1, source=0x101 }
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:71
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:71
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12417661, downTime=12417661, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12417661, downTime=12417661, deviceId=-1, source=0x101 }
W/ViewRootImpl(24412): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=12417661, downTime=12417661, deviceId=-1, source=0x101 }
I/System.out(24412): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>	sig:$z0 = virtualinvoke $r6.<okhttp3.CertificatePinner$Pin: boolean matches(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r2 = virtualinvoke $r6.<okhttp3.internal.tls.CertificateChainCleaner: java.util.List clean(java.util.List,java.lang.String)>($r2, $r1)	timediff:4
I/System.out(24412): body:<okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r4 = staticinvoke <okhttp3.CertificatePinner: okio.ByteString sha256(java.security.cert.X509Certificate)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:4
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(24412): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:76
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:76
I/System.out(24412): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:147
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:147
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:148
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:148
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:148
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:148
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:150
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r19 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r19 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: long contentLength()>	sig:$l0 = specialinvoke $r0.<okhttp3.FormBody: long writeOrCountBytes(okio.BufferedSink,boolean)>(null, 1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$l2 = virtualinvoke $r19.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Sink createRequestBody(okhttp3.Request,long)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSink: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSink access$300(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSink: void <init>(okhttp3.internal.http.Http1xStream,long,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSink: void <init>(okhttp3.internal.http.Http1xStream,long)>($r1, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Sink newFixedLengthSink(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSink: void <init>(okhttp3.internal.http.Http1xStream,long,okhttp3.internal.http.Http1xStream$1)>($r0, $l0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Sink createRequestBody(okhttp3.Request,long)>	sig:$r4 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Sink newFixedLengthSink(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r20 = interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: okio.Sink createRequestBody(okhttp3.Request,long)>($r1, $l2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r19 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.FormBody: void writeTo(okio.BufferedSink)>	sig:specialinvoke $r0.<okhttp3.FormBody: long writeOrCountBytes(okio.BufferedSink,boolean)>($r1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:virtualinvoke $r19.<okhttp3.RequestBody: void writeTo(okio.BufferedSink)>($r21)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSink: void write(okio.Buffer,long)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l1, 0L, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSink: void write(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSink access$300(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSink: void close()>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r2, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSink: void close()>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r2, 3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
I/InputDispatcher(  483): Dropped event because of pending overdue app switch.
W/InputManager(  483): Input event injection from pid 24402 failed.
I/System.out(24412): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:199
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:199
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:200
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:200
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:201
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:202
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:353
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;41;%;<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5);%;https://app.sendwave.com/a/login;%;POST;%;[87];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:18 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 87
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r9 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r5)	timediff:354
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = virtualinvoke $r9.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<com.sendwave.db.TrackingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i0 = virtualinvoke $r9.<okhttp3.Response: int code()>()	timediff:0
I/MixpanelTracker(24412): [1524023838930] event: POST /a/login {"length":87,"status":"HTTP 403","network":"WIFI"}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:373
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
D/dalvikvm(24412): GC_CONCURRENT freed 6918K, 62% free 9752K/25028K, paused 0ms+1ms, total 9ms
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;42;%;<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8);%;https://app.sendwave.com/a/login;%;POST;%;[87];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:18 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 87
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r10 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r8)	timediff:385
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r20 = virtualinvoke $r10.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$l1 = virtualinvoke $r20.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$i3 = virtualinvoke $r10.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r15 = virtualinvoke $r10.<okhttp3.Response: java.lang.String message()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r8 = virtualinvoke $r10.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r14 = virtualinvoke $r8.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
D/OkHttp  (24412): <-- 403 FORBIDDEN https://app.sendwave.com/a/login (384ms, 87-byte body)
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor$Logger$1: void log(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.internal.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, $r1, null)	timediff:0
I/System.out(24412): body:<okhttp3.logging.HttpLoggingInterceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:interfaceinvoke $r16.<okhttp3.logging.HttpLoggingInterceptor$Logger: void log(java.lang.String)>($r15)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:385
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(24412): OkHttpP;%;43;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://app.sendwave.com/a/login;%;POST;%;[87];%;[];%;[];%;[];%;[];%;
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out(24412): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out(24412): header:Connection: keep-alive
I/System.out(24412): Server: gunicorn/19.7.1
I/System.out(24412): Date: Wed, 18 Apr 2018 03:57:18 GMT
I/System.out(24412): Content-Type: application/json
I/System.out(24412): Content-Length: 87
I/System.out(24412): Strict-Transport-Security: max-age=31536000; includeSubDomains
I/System.out(24412): Via: 1.1 vegur
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:386
I/System.out(24412): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:386
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:386
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r3 = virtualinvoke $r2.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out(24412): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r5 = virtualinvoke $r4.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = virtualinvoke $r2.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$r6 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r6)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:1
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(24412): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:2
I/System.out(24412): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:2
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r6 = virtualinvoke $r4.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:2
I/System.out(24412): body:<okhttp3.ResponseBody$1: void <init>(okhttp3.MediaType,long,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource)>	sig:specialinvoke $r3.<okhttp3.ResponseBody$1: void <init>(okhttp3.MediaType,long,okio.BufferedSource)>($r0, $l0, $r1)	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,byte[])>	sig:$r3 = staticinvoke <okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource)>($r0, $l0, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.ResponseBody: okhttp3.ResponseBody create(okhttp3.MediaType,byte[])>($r5, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback: void onResponse(okhttp3.Call,okhttp3.Response)>	sig:$r2 = virtualinvoke $r3.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:3
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(24412): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out(24412): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:389
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$r6 = virtualinvoke $r3.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$l0 = virtualinvoke $r0.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:$r5 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: byte[] bytes()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$r7 = virtualinvoke $r6.<okhttp3.ResponseBody: byte[] bytes()>()	timediff:0
W/System.err(24412): WARNING: could not load Java7 Path class
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:$r6 = virtualinvoke $r3.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: void close()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out(24412): body:<okhttp3.ResponseBody: void close()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r1)	timediff:0
I/System.out(24412): body:<com.sendwave.db.UICallback$2: void run()>	sig:virtualinvoke $r6.<okhttp3.ResponseBody: void close()>()	timediff:0
W/EGL_emulation(24412): eglSurfaceAttrib not implemented 3093 12436
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/InputMethodManagerService(  483): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a93d048 attribute=android.view.inputmethod.EditorInfo@4a93aec0, token = android.os.BinderProxy@4ad6830c
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:1932 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
I/ActivityManager(  483): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mychime.waveremit.app/com.sendwave.remit.activities.RootActivity} from pid 24402
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.startInputLocked:1128 
E/SurfaceFlinger(  163): glCheckFramebufferStatusOES error 36054
E/SurfaceFlinger(  163): got GL_FRAMEBUFFER_COMPLETE_OES error while taking screenshot
D/SurfaceFlinger(  163): setOrientation, mFbdev=0xb7da6050, mFbDev->setOrientation=0xb696ace0, orientation=0
I/gralloc_nox(  163): setOrientation: orientation=0
I/InputReader(  483): Reconfiguring input devices.  changes=0x00000004
I/InputReader(  483): Device reconfigured: id=1, name='seamless mouse', size 1280x720, orientation 0, mode 1, display id 0
I/InputReader(  483): Device reconfigured: id=3, name='Android Input', size 1280x720, orientation 0, mode 1, display id 0
I/InputReader(  483): Device reconfigured: id=8, name='VirtualBox USB Tablet', size 1280x720, orientation 0, mode 1, display id 0
I/InputReader(  483): Reconfiguring input devices.  changes=0x00000004
D/Tinker.DefaultAppLike(  674): onConfigurationChanged:{1.0 310mcc16mnc en_US ldltr sw480dp w853dp h454dp 240dpi lrg long land finger -keyb/v/h dpad/v s.75}
I/ActivityManager(  483): Config changes=480 {1.0 310mcc16mnc en_US ldltr sw480dp w853dp h454dp 240dpi lrg long land finger -keyb/v/h dpad/v s.75}
D/PhoneStatusBar(  538): mSettingsPanelGravity = 55
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(24412): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=233.09299, y[0]=742.2765, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12418072, downTime=12418072, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=0.0, y[0]=-4.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=12418074, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=0.0, y[0]=0.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12418074, downTime=12418072, deviceId=0, source=0x10004 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=0.0, y[0]=0.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12418074, downTime=12418072, deviceId=0, source=0x10004 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=309.0, y[0]=397.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12418083, downTime=12418083, deviceId=0, source=0x1002 }
W/ViewRootImpl(24412): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=311.4489, y[0]=390.9397, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=12418084, downTime=12418083, deviceId=0, source=0x1002 }
D/Sensors (  483): Client connection accepted (166)
I/AndroidRuntime(24402): VM exiting with result code 0.
W/IInputConnectionWrapper(24412): getCursorCapsMode on inactive InputConnection
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
V/InputMethodService(  621): onEvaluateInputViewShown: config.hardKeyboardHidden = 2
W/InputMethodManagerService(  483): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ab3897c attribute=android.view.inputmethod.EditorInfo@4ab1edb4, token = android.os.BinderProxy@4ad6830c
W/ContextImpl(  483): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.showCurrentInputLocked:1791 com.android.server.InputMethodManagerService.attachNewInputLocked:1095 com.android.server.InputMethodManagerService.startInputUncheckedLocked:1166 com.android.server.InputMethodManagerService.windowGainedFocus:1932 
I/MixpanelTracker(24412): [1524023839169] event: login: started {}
W/DebugConnManager(24412): getNetworkInfo() on networkType 1
I/MixpanelTracker(24412): [1524023839182] start timer: login: completed
I/System.out(24412): body:<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r7.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder dns(okhttp3.Dns)>($r5)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(15L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r6)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r8 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r9)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r7 = virtualinvoke $r8.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(24412): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r11 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r11)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("X-Wave-Client", $r2)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(24412): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(24412): body:<com.sendwave.db.DBClient: void <init>(java.lang.String,java.lang.String,java.lang.String,com.sendwave.util.MixpanelTracker)>	sig:$r14 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
W/MixpanelAPI.Tweaks(24412): Attempt to set a tweak "New 'Got Promo' button" which has never been defined.
W/EGL_emulation(  538): eglSurfaceAttrib not implemented 3093 12436
