--------- beginning of /dev/log/main
D/dalvikvm(  470): GC_EXPLICIT freed 2213K, 49% free 16573K/32384K, paused 1ms+2ms, total 19ms
I/Icing   (  746): Indexing 9EBFE84EABD9270B25A97439CA522B4FC49A4875 from com.google.android.gms
I/Icing   (  746): Indexing done 9EBFE84EABD9270B25A97439CA522B4FC49A4875
D/AndroidRuntime( 7195): 
D/AndroidRuntime( 7195): >>>>>> AndroidRuntime START com.android.internal.os.RuntimeInit <<<<<<
D/AndroidRuntime( 7195): CheckJNI is OFF
D/dalvikvm( 7195): Using executionMode 2
D/dalvikvm( 7195): Trying to load lib libjavacore.so 0x0
D/dalvikvm( 7195): Added shared lib libjavacore.so 0x0
D/dalvikvm( 7195): Trying to load lib libnativehelper.so 0x0
D/dalvikvm( 7195): Added shared lib libnativehelper.so 0x0
D/dalvikvm( 7195): No JNI_OnLoad found in libnativehelper.so 0x0, skipping init
D/dalvikvm( 7195): Note: class Landroid/app/ActivityManagerNative; has 179 unimplemented (abstract) methods
E/memtrack( 7195): Couldn't load memtrack module (No such file or directory)
E/android.os.Debug( 7195): failed to load memtrack module: -2
D/AndroidRuntime( 7195): Calling main entry com.android.commands.monkey.Monkey
--------- beginning of /dev/log/system
W/BroadcastQueue(  470): Skipping deliver [background] BroadcastRecord{4b0eb100 u-1 android.net.conn.CONNECTIVITY_CHANGE} to ReceiverList{4acbfa7c 7195 (unknown name)/0/u-1 remote:4ac98254}: process crashing
I/ActivityManager(  470): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.coinbase.android/.signin.IntroActivity} from pid 7195
D/yeshen  ( 6059): launcher onpause
I/ActivityManager(  470): Start proc com.coinbase.android for activity com.coinbase.android/.signin.IntroActivity: pid=7205 uid=10052 gids={50052, 3003}
E/SurfaceFlinger(  165): glCheckFramebufferStatusOES error 36054
E/SurfaceFlinger(  165): got GL_FRAMEBUFFER_COMPLETE_OES error while taking screenshot
D/SurfaceFlinger(  165): setOrientation, mFbdev=0xb8e13050, mFbDev->setOrientation=0xb694cce0, orientation=3
I/gralloc_nox(  165): setOrientation: orientation=3
D/Tinker.DefaultAppLike( 6059): onConfigurationChanged:{1.0 310mcc16mnc ja_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger qwerty/v/v dpad/v s.41}
I/ActivityManager(  470): Config changes=480 {1.0 310mcc16mnc ja_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger qwerty/v/v dpad/v s.41}
D/Sensors (  470): Client connection accepted (188)
I/InputReader(  470): Reconfiguring input devices.  changes=0x00000004
I/InputReader(  470): Device reconfigured: id=1, name='seamless mouse', size 1280x720, orientation 3, mode 1, display id 0
I/InputReader(  470): Device reconfigured: id=3, name='Android Input', size 1280x720, orientation 3, mode 1, display id 0
I/InputReader(  470): Reconfiguring input devices.  changes=0x00000004
I/InputReader(  470): Device reconfigured: id=8, name='VirtualBox USB Tablet', size 1280x720, orientation 3, mode 1, display id 0
D/PhoneStatusBar(  556): mSettingsPanelGravity = 55
W/NetworkManagementSocketTagger(  470): setKernelCountSet(10052, 1) failed with errno -13
I/dalvikvm( 7205): ignoring registerObject request in thread=1
I/dalvikvm( 7205): ignoring registerObject request in thread=1
D/dalvikvm(  556): GC_FOR_ALLOC freed 6464K, 53% free 9320K/19764K, paused 18ms, total 18ms
I/dalvikvm-heap(  556): Grow heap (frag case) to 15.413MB for 6553612-byte allocation
D/dalvikvm(  556): GC_FOR_ALLOC freed 1K, 21% free 15718K/19764K, paused 8ms, total 8ms
D/dalvikvm(  556): GC_CONCURRENT freed 2K, 21% free 15718K/19764K, paused 2ms+0ms, total 18ms
D/dalvikvm( 7205): JIT code cache reset in 0 ms (0 bytes 1/0)
D/dalvikvm( 7205): GC_CONCURRENT freed 252K, 10% free 3106K/3420K, paused 2ms+9ms, total 13ms
D/dalvikvm( 7205): GC_CONCURRENT freed 145K, 7% free 3346K/3560K, paused 2ms+0ms, total 16ms
D/dalvikvm( 7205): GC_CONCURRENT freed 115K, 6% free 3622K/3816K, paused 2ms+0ms, total 3ms
D/dalvikvm( 7205): GC_CONCURRENT freed 151K, 6% free 3856K/4088K, paused 1ms+0ms, total 4ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 225K, 9% free 3983K/4348K, paused 4ms, total 4ms
I/dalvikvm-heap( 7205): Grow heap (frag case) to 4.196MB for 260108-byte allocation
D/dalvikvm( 7205): GC_FOR_ALLOC freed 126K, 11% free 4111K/4604K, paused 3ms, total 3ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 311K, 12% free 4083K/4604K, paused 3ms, total 3ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 62K, 10% free 4147K/4604K, paused 3ms, total 3ms
I/dalvikvm-heap( 7205): Grow heap (frag case) to 4.357MB for 260108-byte allocation
D/dalvikvm( 7205): GC_FOR_ALLOC freed <1K, 10% free 4401K/4860K, paused 5ms, total 5ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 126K, 13% free 4275K/4860K, paused 3ms, total 3ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 307K, 13% free 4247K/4860K, paused 2ms, total 2ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 62K, 12% free 4311K/4860K, paused 3ms, total 3ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 126K, 9% free 4439K/4860K, paused 4ms, total 4ms
D/dalvikvm( 7205): GC_CONCURRENT freed 324K, 10% free 4523K/5024K, paused 1ms+1ms, total 4ms
D/dalvikvm( 7205): GC_CONCURRENT freed 126K, 4% free 4833K/5024K, paused 1ms+0ms, total 4ms
D/dalvikvm( 7205): GC_CONCURRENT freed 156K, 5% free 5215K/5436K, paused 1ms+0ms, total 5ms
D/dalvikvm( 7205): GC_CONCURRENT freed 595K, 11% free 5415K/6072K, paused 2ms+0ms, total 12ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 2ms
D/dalvikvm( 7205): GC_CONCURRENT freed 227K, 5% free 5919K/6212K, paused 2ms+0ms, total 8ms
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/")	timediff:0
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/")###https://api.coinbase.com/
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v1/")	timediff:1
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v1/")###https://api.coinbase.com/v1/
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v2/")	timediff:0
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v2/")###https://api.coinbase.com/v2/
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.coinbase.com/oauth/")	timediff:0
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.coinbase.com/oauth/")###https://www.coinbase.com/oauth/
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/")	timediff:0
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/")###https://api.coinbase.com/
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v1/")	timediff:0
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v1/")###https://api.coinbase.com/v1/
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v2/")	timediff:0
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://api.coinbase.com/v2/")###https://api.coinbase.com/v2/
I/System.out( 7205): body:<com.coinbase.Coinbase: void <init>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.coinbase.com/oauth/")	timediff:0
I/System.out( 7205): <com.coinbase.Coinbase: void <init>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.coinbase.com/oauth/")###https://www.coinbase.com/oauth/
D/MixpanelAPI - App Links (OPTIONAL)( 7205): To enable App Links tracking android.support.v4 must be installed: getInstance [class android.content.Context]
D/MixpanelAPI - App Links (OPTIONAL)( 7205): Context is not an instance of Activity. To detect inbound App Links, pass an instance of an Activity to getInstance.
D/dalvikvm( 7205): GC_CONCURRENT freed 857K, 14% free 5962K/6884K, paused 2ms+0ms, total 7ms
I/dalvikvm( 7205): Could not find method android.app.Notification$Builder.setLocalOnly, referenced from method com.google.android.gms.common.GooglePlayServicesUtil.zza
I/CrashlyticsCore( 7205): Initializing Crashlytics 2.3.8.97
W/dalvikvm( 7205): VFY: unable to resolve virtual method 322: Landroid/app/Notification$Builder;.setLocalOnly (Z)Landroid/app/Notification$Builder;
D/dalvikvm( 7205): VFY: replacing opcode 0x6e at 0x00fb
I/dalvikvm( 7205): Could not find method android.content.pm.PackageManager.getPackageInstaller, referenced from method com.google.android.gms.common.zze.zzm
W/dalvikvm( 7205): VFY: unable to resolve virtual method 587: Landroid/content/pm/PackageManager;.getPackageInstaller ()Landroid/content/pm/PackageInstaller;
D/dalvikvm( 7205): VFY: replacing opcode 0x6e at 0x001a
D/dalvikvm( 7205): GC_CONCURRENT freed 552K, 9% free 6424K/7012K, paused 2ms+1ms, total 9ms
W/dalvikvm( 7205): VFY: unable to find class referenced in signature (Landroid/view/SearchEvent;)
I/dalvikvm( 7205): Could not find method android.view.Window$Callback.onSearchRequested, referenced from method android.support.v7.view.WindowCallbackWrapper.onSearchRequested
W/dalvikvm( 7205): VFY: unable to resolve interface method 12689: Landroid/view/Window$Callback;.onSearchRequested (Landroid/view/SearchEvent;)Z
D/dalvikvm( 7205): VFY: replacing opcode 0x72 at 0x0002
I/dalvikvm( 7205): Could not find method android.view.Window$Callback.onWindowStartingActionMode, referenced from method android.support.v7.view.WindowCallbackWrapper.onWindowStartingActionMode
W/dalvikvm( 7205): VFY: unable to resolve interface method 12693: Landroid/view/Window$Callback;.onWindowStartingActionMode (Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;
D/dalvikvm( 7205): VFY: replacing opcode 0x72 at 0x0002
D/dalvikvm( 7205): GC_FOR_ALLOC freed 613K, 15% free 6032K/7068K, paused 5ms, total 5ms
I/dalvikvm-heap( 7205): Grow heap (frag case) to 6.556MB for 635808-byte allocation
D/dalvikvm( 7205): GC_FOR_ALLOC freed 4K, 14% free 6649K/7692K, paused 4ms, total 4ms
D/dalvikvm( 7205): GC_FOR_ALLOC freed 1K, 14% free 6654K/7692K, paused 5ms, total 5ms
I/dalvikvm-heap( 7205): Grow heap (frag case) to 7.000MB for 464892-byte allocation
D/dalvikvm( 7205): GC_FOR_ALLOC freed <1K, 13% free 7107K/8148K, paused 5ms, total 5ms
I/dalvikvm( 7205): Could not find method android.content.Context.getColor, referenced from method android.databinding.ViewDataBinding.getColorFromResource
W/dalvikvm( 7205): VFY: unable to resolve virtual method 448: Landroid/content/Context;.getColor (I)I
D/dalvikvm( 7205): VFY: replacing opcode 0x6e at 0x000a
I/dalvikvm( 7205): Could not find method android.content.Context.getColorStateList, referenced from method android.databinding.ViewDataBinding.getColorStateListFromResource
W/dalvikvm( 7205): VFY: unable to resolve virtual method 449: Landroid/content/Context;.getColorStateList (I)Landroid/content/res/ColorStateList;
D/dalvikvm( 7205): VFY: replacing opcode 0x6e at 0x000a
I/dalvikvm( 7205): Could not find method android.content.Context.getDrawable, referenced from method android.databinding.ViewDataBinding.getDrawableFromResource
W/dalvikvm( 7205): VFY: unable to resolve virtual method 452: Landroid/content/Context;.getDrawable (I)Landroid/graphics/drawable/Drawable;
D/dalvikvm( 7205): VFY: replacing opcode 0x6e at 0x000a
W/MixpanelAPI.ConfigurationChecker( 7205): com.mixpanel.android.surveys.SurveyActivity is not registered as an activity in your application, so surveys can't be shown.
I/MixpanelAPI.ConfigurationChecker( 7205): Please add the child tag <activity android:name="com.mixpanel.android.surveys.SurveyActivity" /> to your <application> tag.
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getInternalApiService()>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_0", 0, "http/1.0")	timediff:0
I/System.out( 7205): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_1", 1, "http/1.1")	timediff:0
I/System.out( 7205): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("SPDY_3", 2, "spdy/3.1")	timediff:0
I/System.out( 7205): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_2", 3, "h2")	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_MD5", 0, "SSL_RSA_WITH_NULL_MD5", 1, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA", 1, "SSL_RSA_WITH_NULL_SHA", 2, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_RC4_40_MD5", 2, "SSL_RSA_EXPORT_WITH_RC4_40_MD5", 3, 4346, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_MD5", 3, "SSL_RSA_WITH_RC4_128_MD5", 4, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_SHA", 4, "SSL_RSA_WITH_RC4_128_SHA", 5, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", 5, "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 8, 4346, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_DES_CBC_SHA", 6, "SSL_RSA_WITH_DES_CBC_SHA", 9, 5469, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_3DES_EDE_CBC_SHA", 7, "SSL_RSA_WITH_3DES_EDE_CBC_SHA", 10, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 8, "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 17, 4346, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_DES_CBC_SHA", 9, "SSL_DHE_DSS_WITH_DES_CBC_SHA", 18, 5469, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 10, "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 19, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 11, "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 20, 4346, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_DES_CBC_SHA", 12, "SSL_DHE_RSA_WITH_DES_CBC_SHA", 21, 5469, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 13, "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 22, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_RC4_40_MD5", 14, "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 23, 4346, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_RC4_128_MD5", 15, "SSL_DH_anon_WITH_RC4_128_MD5", 24, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 16, "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 25, 4346, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_DES_CBC_SHA", 17, "SSL_DH_anon_WITH_DES_CBC_SHA", 26, 5469, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_3DES_EDE_CBC_SHA", 18, "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 27, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_SHA", 19, "TLS_KRB5_WITH_DES_CBC_SHA", 30, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 20, "TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 31, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_SHA", 21, "TLS_KRB5_WITH_RC4_128_SHA", 32, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_MD5", 22, "TLS_KRB5_WITH_DES_CBC_MD5", 34, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 23, "TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 35, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_MD5", 24, "TLS_KRB5_WITH_RC4_128_MD5", 36, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 25, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 38, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 26, "TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 40, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 27, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 41, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 28, "TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 43, 2712, 6, 2147483647)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA", 29, "TLS_RSA_WITH_AES_128_CBC_SHA", 47, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 30, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 50, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 31, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 51, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA", 32, "TLS_DH_anon_WITH_AES_128_CBC_SHA", 52, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA", 33, "TLS_RSA_WITH_AES_256_CBC_SHA", 53, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 34, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 56, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 35, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 57, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA", 36, "TLS_DH_anon_WITH_AES_256_CBC_SHA", 58, 5246, 6, 10)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA256", 37, "TLS_RSA_WITH_NULL_SHA256", 59, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA256", 38, "TLS_RSA_WITH_AES_128_CBC_SHA256", 60, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA256", 39, "TLS_RSA_WITH_AES_256_CBC_SHA256", 61, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 40, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 64, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 41, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 103, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 42, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 106, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 43, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 107, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA256", 44, "TLS_DH_anon_WITH_AES_128_CBC_SHA256", 108, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA256", 45, "TLS_DH_anon_WITH_AES_256_CBC_SHA256", 109, 5246, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_GCM_SHA256", 46, "TLS_RSA_WITH_AES_128_GCM_SHA256", 156, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_GCM_SHA384", 47, "TLS_RSA_WITH_AES_256_GCM_SHA384", 157, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 48, "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 158, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 49, "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 159, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 50, "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 162, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 51, "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 163, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_GCM_SHA256", 52, "TLS_DH_anon_WITH_AES_128_GCM_SHA256", 166, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_GCM_SHA384", 53, "TLS_DH_anon_WITH_AES_256_GCM_SHA384", 167, 5288, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 54, "TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 255, 5746, 6, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_NULL_SHA", 55, "TLS_ECDH_ECDSA_WITH_NULL_SHA", 49153, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 56, "TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 49154, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 57, "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 49155, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 58, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 49156, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 59, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 49157, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_NULL_SHA", 60, "TLS_ECDHE_ECDSA_WITH_NULL_SHA", 49158, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 61, "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 49159, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 62, "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 49160, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 63, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 49161, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 64, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 49162, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_NULL_SHA", 65, "TLS_ECDH_RSA_WITH_NULL_SHA", 49163, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_RC4_128_SHA", 66, "TLS_ECDH_RSA_WITH_RC4_128_SHA", 49164, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 67, "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 49165, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 68, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 49166, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 69, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 49167, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_NULL_SHA", 70, "TLS_ECDHE_RSA_WITH_NULL_SHA", 49168, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_RC4_128_SHA", 71, "TLS_ECDHE_RSA_WITH_RC4_128_SHA", 49169, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 72, "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 49170, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 73, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 49171, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 74, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 49172, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_NULL_SHA", 75, "TLS_ECDH_anon_WITH_NULL_SHA", 49173, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_RC4_128_SHA", 76, "TLS_ECDH_anon_WITH_RC4_128_SHA", 49174, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 77, "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 49175, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 78, "TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 49176, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 79, "TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 49177, 4492, 7, 14)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 80, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 49187, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 81, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 49188, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 82, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 49189, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 83, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 49190, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 84, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 49191, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 85, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 49192, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 86, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 49193, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 87, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 49194, 5289, 7, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 88, "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 49195, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 89, "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 49196, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 90, "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 49197, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 91, "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 49198, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 92, "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 49199, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 93, "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 49200, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 94, "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 49201, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 95, "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 49202, 5289, 8, 21)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_2", 0, "TLSv1.2")	timediff:0
I/System.out( 7205): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_1", 1, "TLSv1.1")	timediff:0
I/System.out( 7205): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_0", 2, "TLSv1")	timediff:0
I/System.out( 7205): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("SSL_3_0", 3, "SSLv3")	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r5)	timediff:1
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>	sig:specialinvoke $r1.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>	sig:specialinvoke $r2.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>	sig:specialinvoke $r0.<okhttp3.internal.Platform: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>	sig:specialinvoke $r9.<okhttp3.internal.AndroidPlatform: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>($r0, $r1, $r2, $r3, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:$r0 = staticinvoke <okhttp3.internal.AndroidPlatform: okhttp3.internal.Platform buildIfSupported()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Platform: void <clinit>()>	sig:$r0 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r6 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: boolean isCleartextTrafficPermitted()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.Platform: boolean isCleartextTrafficPermitted()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.Platform: boolean isCleartextTrafficPermitted()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.Internal: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:specialinvoke $r7.<okhttp3.OkHttpClient$1: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:4
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CookieJar: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CookieJar$1: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CertificatePinner$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1)>	sig:specialinvoke $r0.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1)>($r2, null, null)	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:$r1 = virtualinvoke $r0.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Authenticator: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Authenticator$1: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <clinit>()>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp ConnectionPool", 1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dns: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Dns$1: void <init>()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:5
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r3 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r4, "sslParameters")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>	sig:$r6 = staticinvoke <okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "java/lang/Object", "delegate")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "x509TrustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "trustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r4 = virtualinvoke $r3.<okhttp3.internal.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>	sig:specialinvoke $r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r8.<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r9 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r4)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>($r4)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getService(java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("SUCCESS", 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("MISSING_SCHEME", 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("UNSUPPORTED_SCHEME", 2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_PORT", 3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_HOST", 4)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List pathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>	sig:specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r3, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getService(java.lang.String)>	sig:$r7 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void <init>(java.lang.String,okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.MediaType,boolean,boolean,boolean)>	sig:specialinvoke $r6.<okhttp3.Request$Builder: void <init>()>()	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r11 = virtualinvoke $r4.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>($r7)	timediff:1
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r10 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: okhttp3.Call createRawCall()>	sig:$r6 = interfaceinvoke $r5.<okhttp3.Call$Factory: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>	sig:$r5 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:2
I/System.out( 7205): body:<retrofit2.OkHttpCall: void enqueue(retrofit2.Callback)>	sig:interfaceinvoke $r2.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:2
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-VERSION", "2016-08-10")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-CLIENT", $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine$1: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:7
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
D/dalvikvm( 7205): GC_CONCURRENT freed 1000K, 13% free 7525K/8592K, paused 2ms+2ms, total 13ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 6ms
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:6
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:6
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:13
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder onlyIfCached()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit)>(2147483647, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 7ms
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getInternalApiService()>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r3 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r4, "sslParameters")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>	sig:$r6 = staticinvoke <okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "java/lang/Object", "delegate")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "x509TrustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "trustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r4 = virtualinvoke $r3.<okhttp3.internal.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>	sig:specialinvoke $r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r8.<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r9 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r4)	timediff:1
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r2)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>($r4)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getService(java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List pathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>	sig:specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r3, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getService(java.lang.String)>	sig:$r7 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void <init>(java.lang.String,okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.MediaType,boolean,boolean,boolean)>	sig:specialinvoke $r6.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void addQueryParam(java.lang.String,java.lang.String,boolean)>	sig:$r4 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void addQueryParam(java.lang.String,java.lang.String,boolean)>	sig:virtualinvoke $r4.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r4 = virtualinvoke $r5.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r10 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: okhttp3.Call createRawCall()>	sig:$r6 = interfaceinvoke $r5.<okhttp3.Call$Factory: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>	sig:$r5 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: void enqueue(retrofit2.Callback)>	sig:interfaceinvoke $r2.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:0
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getInternalApiService()>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:1
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r3 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r4, "sslParameters")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>	sig:$r6 = staticinvoke <okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "java/lang/Object", "delegate")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "x509TrustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "trustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r4 = virtualinvoke $r3.<okhttp3.internal.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>	sig:specialinvoke $r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r8.<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r9 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r4)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>($r4)	timediff:1
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getService(java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List pathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>	sig:specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r3, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.api.internal.CoinbaseInternal: android.util.Pair getService(java.lang.String)>	sig:$r7 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void <init>(java.lang.String,okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.MediaType,boolean,boolean,boolean)>	sig:specialinvoke $r6.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void addQueryParam(java.lang.String,java.lang.String,boolean)>	sig:$r4 = virtualinvoke $r5.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void addQueryParam(java.lang.String,java.lang.String,boolean)>	sig:virtualinvoke $r4.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r4 = virtualinvoke $r5.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r10 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: okhttp3.Call createRawCall()>	sig:$r6 = interfaceinvoke $r5.<okhttp3.Call$Factory: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>	sig:$r5 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-VERSION", "2016-08-10")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-CLIENT", $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
D/dalvikvm( 7205): GC_CONCURRENT freed 1370K, 16% free 7593K/9028K, paused 2ms+1ms, total 9ms
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:10
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:11
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:13
I/System.out( 7205): body:<retrofit2.OkHttpCall: void enqueue(retrofit2.Callback)>	sig:interfaceinvoke $r2.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:13
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-VERSION", "2016-08-10")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-CLIENT", $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:92
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:92
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:92
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:92
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:93
I/System.out( 7205): body:<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.framed.FramedConnection$Listener: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:50
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:50
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:50
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:50
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:50
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:54
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:54
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:54
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:54
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:54
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:3
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:3
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:4
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:4
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:5
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:5
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:7
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:7
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:9
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:9
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:9
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:9
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:10
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:10
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:10
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:72
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:72
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:91
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:91
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:144
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:144
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:144
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:145
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:146
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
D/dalvikvm( 7205): GC_CONCURRENT freed 1460K, 17% free 7718K/9240K, paused 20ms+1ms, total 32ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 13ms
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:13
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:13
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:102
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:103
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:113
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:113
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:171
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:171
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:171
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:172
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:182
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String encodedQuery()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i1, $i2, 35)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 8ms
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:15
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 6ms
I/System.out( 7205): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:105
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:105
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r3 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:40
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:187
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:6
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;0;%;<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/prices/BTC-USD/historic?period=day;%;GET;%;[];%;[public, max-age=30];%;[Sat, 14 Apr 2018 05:22:11 GMT];%;[];%;[__cfduid=debed63106940601a83f218561ad535e91523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:21:41 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Transfer-Encoding: chunked
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=debed63106940601a83f218561ad535e91523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=30
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob: https://coinbase.ada.support; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api https://coinbase.ada.support/api/; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://d124s1zbdqkqqe.cloudfront.net https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"d447c3199328c6ec5532e1e3804b9018"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: 749f782b-3d49-4442-9ec9-1f8d5e0cf929
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:11 GMT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3baf91b8e78c2-LAX
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:221
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:221
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 10ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 10ms
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:24
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;1;%;<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/prices/BTC-USD/historic?period=day;%;GET;%;[];%;[public, max-age=30];%;[Sat, 14 Apr 2018 05:22:11 GMT];%;[];%;[__cfduid=d52351ea113a06f6816d53d5484c3ecdc1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:19
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;2;%;<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/mobile/config;%;GET;%;[];%;[public, max-age=60];%;[Sat, 14 Apr 2018 05:22:41 GMT];%;[];%;[__cfduid=dda2cd898329e4ecf4b78298832b6b63b1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:21:41 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=dda2cd898329e4ecf4b78298832b6b63b1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=60
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob:; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"33f45c82391067be9f37c02f8db351d3"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:41 GMT
I/System.out( 7205): Pragma: no-cache
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: 063e8a0e-d085-4b52-af18-e15f3286c8b9
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3baf919d976d0-LAX
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:268
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:269
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;3;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/mobile/config;%;GET;%;[];%;[public, max-age=60];%;[Sat, 14 Apr 2018 05:22:41 GMT];%;[];%;[__cfduid=dda2cd898329e4ecf4b78298832b6b63b1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:21:41 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=dda2cd898329e4ecf4b78298832b6b63b1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=60
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob:; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"33f45c82391067be9f37c02f8db351d3"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:41 GMT
I/System.out( 7205): Pragma: no-cache
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: 063e8a0e-d085-4b52-af18-e15f3286c8b9
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3baf919d976d0-LAX
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:271
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:271
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:271
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r7 = virtualinvoke $r5.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$l0 = virtualinvoke $r5.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$NoContentResponseBody: void <init>(okhttp3.MediaType,long)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r1 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void <init>(okhttp3.ResponseBody)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okio.BufferedSource source()>	sig:$r3 = virtualinvoke $r2.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.InputStream byteStream()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: java.io.InputStream byteStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:1
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:1
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:1
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r4 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:1
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:$r3 = virtualinvoke $r1.<okhttp3.ResponseBody: java.io.Reader charStream()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
D/dalvikvm( 7205): GC_CONCURRENT freed 1492K, 18% free 7803K/9408K, paused 2ms+1ms, total 8ms
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:16
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;4;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/prices/BTC-USD/historic?period=day;%;GET;%;[];%;[public, max-age=30];%;[Sat, 14 Apr 2018 05:22:11 GMT];%;[];%;[__cfduid=debed63106940601a83f218561ad535e91523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:21:41 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Transfer-Encoding: chunked
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=debed63106940601a83f218561ad535e91523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=30
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob: https://coinbase.ada.support; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api https://coinbase.ada.support/api/; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://d124s1zbdqkqqe.cloudfront.net https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"d447c3199328c6ec5532e1e3804b9018"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: 749f782b-3d49-4442-9ec9-1f8d5e0cf929
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:11 GMT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3baf91b8e78c2-LAX
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:239
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:239
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:239
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r7 = virtualinvoke $r5.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$l0 = virtualinvoke $r5.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$NoContentResponseBody: void <init>(okhttp3.MediaType,long)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r1 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void <init>(okhttp3.ResponseBody)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okio.BufferedSource source()>	sig:$r3 = virtualinvoke $r2.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.InputStream byteStream()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: java.io.InputStream byteStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r4 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:$r3 = virtualinvoke $r1.<okhttp3.ResponseBody: java.io.Reader charStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:15
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:21:41 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Transfer-Encoding: chunked
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=d52351ea113a06f6816d53d5484c3ecdc1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=30
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob: https://coinbase.ada.support; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api https://coinbase.ada.support/api/; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://d124s1zbdqkqqe.cloudfront.net https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"d447c3199328c6ec5532e1e3804b9018"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: 749f782b-3d49-4442-9ec9-1f8d5e0cf929
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:11 GMT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3baf90b0b78a4-LAX
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:227
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:228
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;5;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/prices/BTC-USD/historic?period=day;%;GET;%;[];%;[public, max-age=30];%;[Sat, 14 Apr 2018 05:22:11 GMT];%;[];%;[__cfduid=d52351ea113a06f6816d53d5484c3ecdc1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:1
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:21:41 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Transfer-Encoding: chunked
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=d52351ea113a06f6816d53d5484c3ecdc1523683301; expires=Sun, 14-Apr-19 05:21:41 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=30
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob: https://coinbase.ada.support; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api https://coinbase.ada.support/api/; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://d124s1zbdqkqqe.cloudfront.net https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"d447c3199328c6ec5532e1e3804b9018"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: 749f782b-3d49-4442-9ec9-1f8d5e0cf929
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:11 GMT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3baf90b0b78a4-LAX
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:230
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:232
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:232
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:15
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void close()>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:0
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Response)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:18
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:289
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:5
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:5
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:5
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:1
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r7 = virtualinvoke $r5.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$l0 = virtualinvoke $r5.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$NoContentResponseBody: void <init>(okhttp3.MediaType,long)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r1 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void <init>(okhttp3.ResponseBody)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okio.BufferedSource source()>	sig:$r3 = virtualinvoke $r2.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.InputStream byteStream()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: java.io.InputStream byteStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r4 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:$r3 = virtualinvoke $r1.<okhttp3.ResponseBody: java.io.Reader charStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r8 = virtualinvoke $r4.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:2
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$ChunkedSource: void endOfInput(boolean)>(1)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>()	timediff:2
I/System.out( 7205): body:<okhttp3.internal.Util: boolean discard(okio.Source,int,java.util.concurrent.TimeUnit)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit)>($r0, $i0, $r1)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void close()>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean discard(okio.Source,int,java.util.concurrent.TimeUnit)>($r0, 100, $r1)	timediff:2
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r1)	timediff:2
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void close()>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:2
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:2
I/System.out( 7205): body:<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Response)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:17
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:256
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:$r8 = virtualinvoke $r4.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$ChunkedSource: void endOfInput(boolean)>(1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: long read(okio.Buffer,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$ChunkedSource: void readChunkSize()>()	timediff:2
I/System.out( 7205): body:<okhttp3.internal.Util: boolean discard(okio.Source,int,java.util.concurrent.TimeUnit)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit)>($r0, $i0, $r1)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$ChunkedSource: void close()>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean discard(okio.Source,int,java.util.concurrent.TimeUnit)>($r0, 100, $r1)	timediff:2
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r1)	timediff:2
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void close()>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:2
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:2
I/System.out( 7205): body:<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Response)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:15
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:247
I/WearableService(  668): Wearable Services stopping
W/ActivityManager(  470): Launch timeout has expired, giving up wake lock!
W/WindowManager(  470): Window freeze timeout expired.
W/WindowManager(  470): Force clearing orientation change: Window{4a9639a4 u0 StatusBar}
W/WindowManager(  470): Force clearing orientation change: Window{4a8e1ea0 u0 Starting com.coinbase.android}
W/WindowManager(  470): Force clearing orientation change: Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}
W/WindowManager(  470): App freeze timeout expired.
W/WindowManager(  470): Force clearing freeze: AppWindowToken{4ae63d28 token=Token{4abf1034 ActivityRecord{4a8d9f00 u0 com.coinbase.android/.signin.IntroActivity t44}}}
E/WindowManager(  470): Starting window AppWindowToken{4ae63d28 token=Token{4abf1034 ActivityRecord{4a8d9f00 u0 com.coinbase.android/.signin.IntroActivity t44}}} timed out
D/yeshen  ( 6059): launcher onstop
W/DebugConnManager( 6059): getNetworkInfo() on networkType 1
I/WindowManager(  470): Screen frozen for +10s154ms due to Window{4a9639a4 u0 StatusBar}
I/InputDispatcher(  470): Dropped event because it is stale.
I/Choreographer(  556): Skipped 606 frames!  The application may be doing too much work on its main thread.
W/InputManager(  470): Input event injection from pid 7195 failed.
D/dalvikvm( 6059): GC_FOR_ALLOC freed 1460K, 6% free 85300K/90040K, paused 15ms, total 15ms
D/dalvikvm( 6059): GC_FOR_ALLOC freed 369K, 6% free 88045K/92848K, paused 15ms, total 15ms
D/libEGL  ( 7205): loaded /system/lib/egl/libEGL_adreno.so
W/Fabric  ( 7205): Could not call getAdvertisingIdInfo on com.google.android.gms.ads.identifier.AdvertisingIdClient
W/Fabric  ( 7205): Could not call isLimitAdTrackingEnabled on com.google.android.gms.ads.identifier.AdvertisingIdClient$Info
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): <io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>###specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1)###https://settings.crashlytics.com/spi/v2/platforms/android/apps/com.coinbase.android/settings?instance=9ca8e194641210eacff8f8bbb5fe62e3a3b61242&source=1&build_version=149&icon_hash=e6eb032f2607f3467cc64b7f82ae7a6264c9045a&display_version=4.4.6
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getHost()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$i0 = virtualinvoke $r3.<java.net.URL: int getPort()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getProtocol()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r7 = virtualinvoke $r3.<java.net.URL: java.lang.String getPath()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r8 = virtualinvoke $r3.<java.net.URL: java.lang.String getQuery()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:specialinvoke $r6.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, $r1, $r7, $r8, null)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r8 = virtualinvoke $r6.<java.net.URI: java.lang.String toASCIIString()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: void <init>(java.lang.CharSequence,java.lang.String)>	sig:specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): <io.fabric.sdk.android.services.network.HttpRequest: void <init>(java.lang.CharSequence,java.lang.String)>###specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>($r4)###https://settings.crashlytics.com/spi/v2/platforms/android/apps/com.coinbase.android/settings?instance=9ca8e194641210eacff8f8bbb5fe62e3a3b61242&source=1&build_version=149&icon_hash=e6eb032f2607f3467cc64b7f82ae7a6264c9045a&display_version=4.4.6
D/dalvikvm( 7205): GC_FOR_ALLOC freed 1116K, 16% free 7999K/9448K, paused 7ms, total 7ms
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest$ConnectionFactory$1: java.net.HttpURLConnection create(java.net.URL)>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:19
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.net.HttpURLConnection createConnection()>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest useCaches(boolean)>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setUseCaches(boolean)>($z0)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest connectTimeout(int)>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: int code()>	sig:$i0 = virtualinvoke $r2.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:856
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: int intHeader(java.lang.String,int)>	sig:$i0 = virtualinvoke $r2.<java.net.HttpURLConnection: int getHeaderFieldInt(java.lang.String,int)>($r1, $i0)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: int code()>	sig:$i0 = virtualinvoke $r2.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.io.InputStream stream()>	sig:$r2 = virtualinvoke $r3.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:1
I/System.out( 7205): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out( 7205): URLConn;%;6;%;<io.fabric.sdk.android.services.network.HttpRequest: java.io.InputStream stream()>;%;$r2 = virtualinvoke $r3.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://settings.crashlytics.com/spi/v2/platforms/android/apps/com.coinbase.android/settings?instance=9ca8e194641210eacff8f8bbb5fe62e3a3b61242&source=1&build_version=149&icon_hash=e6eb032f2607f3467cc64b7f82ae7a6264c9045a&display_version=4.4.6;%;false;%;Not found;%;Not found;%;Not found;%;Not found;%;Not found
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): <io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>###specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1)###https://e.crashlytics.com/spi/v2/events
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getHost()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$i0 = virtualinvoke $r3.<java.net.URL: int getPort()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getProtocol()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r7 = virtualinvoke $r3.<java.net.URL: java.lang.String getPath()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r8 = virtualinvoke $r3.<java.net.URL: java.lang.String getQuery()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:specialinvoke $r6.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, $r1, $r7, $r8, null)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r8 = virtualinvoke $r6.<java.net.URI: java.lang.String toASCIIString()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: void <init>(java.lang.CharSequence,java.lang.String)>	sig:specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): <io.fabric.sdk.android.services.network.HttpRequest: void <init>(java.lang.CharSequence,java.lang.String)>###specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>($r4)###https://e.crashlytics.com/spi/v2/events
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest$ConnectionFactory$1: java.net.HttpURLConnection create(java.net.URL)>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.net.HttpURLConnection createConnection()>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest useCaches(boolean)>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setUseCaches(boolean)>($z0)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest connectTimeout(int)>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest openOutput()>	sig:virtualinvoke $r2.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest openOutput()>	sig:$r3 = virtualinvoke $r2.<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>("Content-Type")	timediff:0
W/DebugConnManager( 6059): getNetworkInfo() on networkType 1
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest openOutput()>	sig:$r4 = virtualinvoke $r2.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:319
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: int code()>	sig:$i0 = virtualinvoke $r2.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:76
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getHost()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$i0 = virtualinvoke $r3.<java.net.URL: int getPort()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getProtocol()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r7 = virtualinvoke $r3.<java.net.URL: java.lang.String getPath()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r8 = virtualinvoke $r3.<java.net.URL: java.lang.String getQuery()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:specialinvoke $r6.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, $r1, $r7, $r8, null)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>	sig:$r8 = virtualinvoke $r6.<java.net.URI: java.lang.String toASCIIString()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: void <init>(java.lang.CharSequence,java.lang.String)>	sig:specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): <io.fabric.sdk.android.services.network.HttpRequest: void <init>(java.lang.CharSequence,java.lang.String)>###specialinvoke $r5.<java.net.URL: void <init>(java.lang.String)>($r4)###https://e.crashlytics.com/spi/v2/events
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest$ConnectionFactory$1: java.net.HttpURLConnection create(java.net.URL)>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: java.net.HttpURLConnection createConnection()>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest useCaches(boolean)>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setUseCaches(boolean)>($z0)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest connectTimeout(int)>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest openOutput()>	sig:virtualinvoke $r2.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)	timediff:0
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest openOutput()>	sig:$r3 = virtualinvoke $r2.<java.net.HttpURLConnection: java.lang.String getRequestProperty(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): <io.fabric.sdk.android.services.network.HttpRequest: java.lang.String encode(java.lang.CharSequence)>###specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1)###https://e.crashlytics.com/spi/v2/events
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest openOutput()>	sig:$r4 = virtualinvoke $r2.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:11
I/System.out( 7205): body:<io.fabric.sdk.android.services.network.HttpRequest: int code()>	sig:$i0 = virtualinvoke $r2.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:76
I/InputDispatcher(  470): Application is not responding: AppWindowToken{4ae63d28 token=Token{4abf1034 ActivityRecord{4a8d9f00 u0 com.coinbase.android/.signin.IntroActivity t44}}} - Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}.  It has been 5006.0ms since event, 5005.3ms since wait started.  Reason: Waiting because the focused window has not finished processing the input events that were previously delivered to it.
I/Choreographer(  470): Skipped 297 frames!  The application may be doing too much work on its main thread.
W/SurfaceFlinger(  165): setTransactionState timed out waiting for previous animation frame
I/Choreographer(  470): Skipped 299 frames!  The application may be doing too much work on its main thread.
I/Choreographer( 6059): Skipped 603 frames!  The application may be doing too much work on its main thread.
I/InputDispatcher(  470): Dropped event because it is stale.
I/WindowManager(  470): Input event dispatching timed out sending to com.coinbase.android/com.coinbase.android.signin.IntroActivity.  Reason: Waiting because the focused window has not finished processing the input events that were previously delivered to it.
W/InputManager(  470): Input event injection from pid 7195 failed.
I/Process (  470): Sending signal. PID: 7205 SIG: 3
I/dalvikvm( 7205): threadid=3: reacting to signal 3
I/Process (  470): Sending signal. PID: 470 SIG: 3
I/dalvikvm(  470): threadid=3: reacting to signal 3
I/dalvikvm(  470): Wrote stack traces to '/data/anr/traces.txt'
I/Process (  470): Sending signal. PID: 680 SIG: 3
I/dalvikvm(  680): threadid=3: reacting to signal 3
I/dalvikvm(  680): Wrote stack traces to '/data/anr/traces.txt'
I/Process (  470): Sending signal. PID: 556 SIG: 3
I/dalvikvm(  556): threadid=3: reacting to signal 3
I/dalvikvm( 7205): Wrote stack traces to '/data/anr/traces.txt'
I/dalvikvm(  556): Wrote stack traces to '/data/anr/traces.txt'
D/dalvikvm(  470): GC_EXPLICIT freed 440K, 49% free 16801K/32384K, paused 1ms+1ms, total 10ms
W/InputManager(  470): Input event injection from pid 7195 timed out.
I/InputDispatcher(  470): Application is not responding: AppWindowToken{4ae63d28 token=Token{4abf1034 ActivityRecord{4a8d9f00 u0 com.coinbase.android/.signin.IntroActivity t44}}} - Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}.  It has been 5009.1ms since event, 5005.0ms since wait started.  Reason: Waiting because the focused window has not finished processing the input events that were previously delivered to it.
I/WindowManager(  470): Input event dispatching timed out sending to com.coinbase.android/com.coinbase.android.signin.IntroActivity.  Reason: Waiting because the focused window has not finished processing the input events that were previously delivered to it.
D/        ( 7205): HostConnection::get() New Host Connection established 0xb8ed10d0, tid 7205
D/libEGL  ( 7205): loaded /system/lib/egl/libGLESv1_CM_adreno.so
D/libEGL  ( 7205): loaded /system/lib/egl/libGLESv2_adreno.so
W/EGL_emulation(  556): eglSurfaceAttrib not implemented 3093 12436
I/Choreographer(  556): Skipped 901 frames!  The application may be doing too much work on its main thread.
W/EGL_emulation( 7205): eglSurfaceAttrib not implemented 3093 12436
D/dalvikvm(  470): GC_EXPLICIT freed 760K, 48% free 17004K/32384K, paused 0ms+1ms, total 13ms
E/ActivityManager(  470): ANR in com.coinbase.android (com.coinbase.android/.signin.IntroActivity)
E/ActivityManager(  470): PID: 7205
E/ActivityManager(  470): Reason: Input dispatching timed out (Waiting because the focused window has not finished processing the input events that were previously delivered to it.)
E/ActivityManager(  470): Load: 2.91 / 2.69 / 2.04
E/ActivityManager(  470): CPU usage from 0ms to 5653ms later:
E/ActivityManager(  470):   1.7% 470/system_server: 0.8% user + 0.8% kernel / faults: 327 minor
E/ActivityManager(  470):   0% 162/debuggerd: 0% user + 0% kernel / faults: 2702 minor
E/ActivityManager(  470):   0.3% 556/com.android.systemui: 0.2% user + 0% kernel / faults: 2 minor
E/ActivityManager(  470):   0.3% 7205/com.coinbase.android: 0.1% user + 0.1% kernel / faults: 134 minor
E/ActivityManager(  470):   0.1% 6059/com.vphone.launcher: 0.1% user + 0% kernel / faults: 42 minor
E/ActivityManager(  470):   0% 165/surfaceflinger: 0% user + 0% kernel
E/ActivityManager(  470): 2.9% TOTAL: 1.6% user + 1.2% kernel
E/ActivityManager(  470): CPU usage from 5150ms to 5652ms later:
E/ActivityManager(  470):   2% 470/system_server: 0% user + 2% kernel
E/ActivityManager(  470):     2% 484/android.bg: 0% user + 2% kernel
E/ActivityManager(  470): 2% TOTAL: 0% user + 2% kernel
I/ActivityManager(  470): Skipping duplicate ANR: ProcessRecord{4ac945b8 7205:com.coinbase.android/u0a52} Input dispatching timed out (Waiting because the focused window has not finished processing the input events that were previously delivered to it.)
I/InputDispatcher(  470): Application is not responding: AppWindowToken{4ae63d28 token=Token{4abf1034 ActivityRecord{4a8d9f00 u0 com.coinbase.android/.signin.IntroActivity t44}}} - Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}.  It has been 5006.9ms since event, 5006.0ms since wait started.  Reason: Waiting because the focused window has not finished processing the input events that were previously delivered to it.
W/SurfaceFlinger(  165): setTransactionState timed out waiting for previous animation frame
I/Choreographer(  470): Skipped 299 frames!  The application may be doing too much work on its main thread.
D/OpenGLRenderer( 7205): Enabling debug mode 0
I/Choreographer(  556): Skipped 300 frames!  The application may be doing too much work on its main thread.
I/InputDispatcher(  470): Window 'Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}' spent 20183.9ms processing the last input event: MotionEvent(deviceId=3, source=0x00001002, action=9, flags=0x00000000, metaState=0x00000000, buttonState=0x00000000, edgeFlags=0x00000000, xPrecision=1.0, yPrecision=1.0, displayId=0, pointers=[0: (85.9, 60.0)]), policyFlags=0x42000000
I/InputDispatcher(  470): Window 'Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}' spent 20184.1ms processing the last input event: MotionEvent(deviceId=3, source=0x00001002, action=9, flags=0x00000000, metaState=0x00000000, buttonState=0x00000000, edgeFlags=0x00000000, xPrecision=1.0, yPrecision=1.0, displayId=0, pointers=[0: (85.9, 60.0)]), policyFlags=0x42000000
I/InputDispatcher(  470): Window 'Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}' spent 20184.3ms processing the last input event: MotionEvent(deviceId=3, source=0x00001002, action=7, flags=0x00000000, metaState=0x00000000, buttonState=0x00000000, edgeFlags=0x00000000, xPrecision=1.0, yPrecision=1.0, displayId=0, pointers=[0: (85.9, 60.0)]), policyFlags=0x42000000
I/InputDispatcher(  470): Window 'Window{4a97edf4 u0 com.coinbase.android/com.coinbase.android.signin.IntroActivity}' spent 10126.9ms processing the last input event: MotionEvent(deviceId=3, source=0x00001002, action=10, flags=0x00000000, metaState=0x00000000, buttonState=0x00000000, edgeFlags=0x00000000, xPrecision=1.0, yPrecision=1.0, displayId=0, pointers=[0: (85.9, 60.0)]), policyFlags=0x42000000
I/Choreographer( 7205): Skipped 1783 frames!  The application may be doing too much work on its main thread.
I/WindowManager(  470): Input event dispatching timed out sending to com.coinbase.android/com.coinbase.android.signin.IntroActivity.  Reason: Waiting because the focused window has not finished processing the input events that were previously delivered to it.
W/InputManager(  470): Input event injection from pid 7195 timed out.
I/ActivityManager(  470): Skipping duplicate ANR: ProcessRecord{4ac945b8 7205:com.coinbase.android/u0a52} Input dispatching timed out (Waiting because the focused window has not finished processing the input events that were previously delivered to it.)
I/System.out( 7205): body:<retrofit2.Response: boolean isSuccessful()>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Response: boolean isSuccessful()>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: android.util.Pair getApiService()>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:1
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r3 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r4, "sslParameters")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>	sig:$r6 = staticinvoke <okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "java/lang/Object", "delegate")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "x509TrustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "trustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r4 = virtualinvoke $r3.<okhttp3.internal.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>	sig:specialinvoke $r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r8.<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r9 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r4)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>($r4)	timediff:1
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: android.util.Pair getService(java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:2
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:2
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List pathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>	sig:specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r3, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<com.coinbase.Coinbase: android.util.Pair getService(java.lang.String)>	sig:$r7 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:1
I/ActivityManager(  470): Displayed com.coinbase.android/.signin.IntroActivity: +30s463ms
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void <init>(java.lang.String,okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.MediaType,boolean,boolean,boolean)>	sig:specialinvoke $r6.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:2
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:2
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r11 = virtualinvoke $r4.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>($r7)	timediff:2
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r10 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: okhttp3.Call createRawCall()>	sig:$r6 = interfaceinvoke $r5.<okhttp3.Call$Factory: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
D/dalvikvm( 7205): GC_CONCURRENT freed 1549K, 17% free 8173K/9784K, paused 1ms+1ms, total 13ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 5ms
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:5
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:5
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:5
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>	sig:$r5 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:3
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:8
I/System.out( 7205): body:<retrofit2.OkHttpCall: void enqueue(retrofit2.Callback)>	sig:interfaceinvoke $r2.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:8
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:3
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:3
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:3
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-VERSION", "2016-08-10")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-CLIENT", $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:2
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:5
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:5
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:5
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:5
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:5
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:4
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:4
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:4
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:7
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:8
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:12
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:12
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:18
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:18
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:18
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:18
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:19
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Response: boolean isSuccessful()>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: android.util.Pair getApiService()>	sig:$r2 = virtualinvoke $r1.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r3 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r4, "sslParameters")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>	sig:$r6 = staticinvoke <okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "java/lang/Object", "delegate")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "x509TrustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.AndroidPlatform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r2, class "javax/net/ssl/X509TrustManager", "trustManager")	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r4 = virtualinvoke $r3.<okhttp3.internal.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>	sig:specialinvoke $r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r8.<okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner: void <init>(java.lang.Object,java.lang.reflect.Method)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>	sig:$r9 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r4)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder protocols(java.util.List)>($r4)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: okhttp3.OkHttpClient$Builder generateClientBuilder(javax.net.ssl.SSLContext)>	sig:virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r5)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: android.util.Pair getService(java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List pathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>	sig:specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r3, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r16.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase: android.util.Pair getService(java.lang.String)>	sig:$r7 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: void <init>(java.lang.String,okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.MediaType,boolean,boolean,boolean)>	sig:specialinvoke $r6.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r11 = virtualinvoke $r4.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>($r7)	timediff:2
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r9 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>($r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
D/dalvikvm( 7205): GC_CONCURRENT freed 1593K, 17% free 8230K/9892K, paused 2ms+1ms, total 8ms
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:8
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:8
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:8
I/System.out( 7205): body:<retrofit2.RequestBuilder: okhttp3.Request build()>	sig:$r10 = virtualinvoke $r9.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:8
I/System.out( 7205): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: okhttp3.Call createRawCall()>	sig:$r6 = interfaceinvoke $r5.<okhttp3.Call$Factory: okhttp3.Call newCall(okhttp3.Request)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:$r2 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$100(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String access$200(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int access$300(okhttp3.HttpUrl)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i3, $z0, 1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>	sig:$r4 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>($r0, $r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>	sig:$r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>	sig:$r2 = virtualinvoke $r2.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>("/...")	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.RealCall: okhttp3.HttpUrl redactedUrl()>()	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:$r5 = virtualinvoke $r3.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>	sig:$r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.NamedRunnable: void <init>(java.lang.String,java.lang.Object[])>("OkHttp %s", $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>	sig:specialinvoke $r0.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean)>($r1, $r2, $z0)	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:specialinvoke $r6.<okhttp3.RealCall$AsyncCall: void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1)>($r0, $r1, $z0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$i1 = specialinvoke $r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>	sig:$r5 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>	sig:virtualinvoke $r2.<okhttp3.Dispatcher: void enqueue(okhttp3.RealCall$AsyncCall)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: void enqueue(okhttp3.Callback)>	sig:virtualinvoke $r0.<okhttp3.RealCall: void enqueue(okhttp3.Callback,boolean)>($r1, 0)	timediff:1
I/System.out( 7205): body:<retrofit2.OkHttpCall: void enqueue(retrofit2.Callback)>	sig:interfaceinvoke $r2.<okhttp3.Call: void enqueue(okhttp3.Callback)>($r8)	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r3, $i1, $r1, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r2.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-VERSION", "2016-08-10")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r3 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>("CB-CLIENT", $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r2 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r3, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r3, $i0, $i1, 47)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r7.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r8, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:3
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:3
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:3
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:3
I/System.out( 7205): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:3
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:3
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:4
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r2.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r3, null, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i6 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out( 7205): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z0, $z1, $i0, $i1, $z2, $z3, $z4, $i2, $i3, $z5, $z6, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r2 = virtualinvoke $r9.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r1 = virtualinvoke $r9.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r10, $r3, $r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r2 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r5 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r6.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r14 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, $i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r4.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r5, $r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:3
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r2, $r1)	timediff:3
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r15 = virtualinvoke $r3.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r2.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r7 = virtualinvoke $r9.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r9.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r3.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:14
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r10.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r9, $r11, $i0)	timediff:14
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r1)	timediff:14
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r9.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r6.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r2)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r3, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r10.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r2, $r1, $z0)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r6.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.AndroidPlatform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r5.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:2
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:2
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:3
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:71
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:71
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:71
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:71
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:71
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
D/dalvikvm( 7205): GC_CONCURRENT freed 1757K, 19% free 8257K/10092K, paused 1ms+1ms, total 17ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 7ms
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:18
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;8;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/prices/BTC-USD/spot;%;GET;%;[];%;[public, max-age=30];%;[Sat, 14 Apr 2018 05:22:41 GMT];%;[];%;[__cfduid=d779e4f4e8961cd4a579d0363a666fa151523683331; expires=Sun, 14-Apr-19 05:22:11 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:22:11 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=d779e4f4e8961cd4a579d0363a666fa151523683331; expires=Sun, 14-Apr-19 05:22:11 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=30
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob: https://coinbase.ada.support; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api https://coinbase.ada.support/api/; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://d124s1zbdqkqqe.cloudfront.net https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"f75f904b0e7a11e51f01529855d286b4"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: ed1b0174-40fc-473c-85e9-688ed5dd956f
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:41 GMT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3bbb33dec76d0-LAX
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:123
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:123
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:123
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r7 = virtualinvoke $r5.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$l0 = virtualinvoke $r5.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$NoContentResponseBody: void <init>(okhttp3.MediaType,long)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 9ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 9ms
I/System.out( 7205): body:<okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>	sig:$r2 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite valueOf(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r7 = staticinvoke <okhttp3.CipherSuite: okhttp3.CipherSuite forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r8 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>	sig:specialinvoke $r9.<okhttp3.Handshake: void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List)>($r8, $r7, $r4, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r16 = virtualinvoke $r6.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$r4 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>($r2, 2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>	sig:$z1 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.lang.String)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate)>($r1, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>	sig:$z0 = virtualinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r24 = virtualinvoke $r6.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r9 = virtualinvoke $r6.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r9.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>()	timediff:0
I/System.out( 7205): body:<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>	sig:$r5 = virtualinvoke $r0.<okhttp3.CertificatePinner: java.util.List findMatchingPins(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r3, $r13)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r3 = virtualinvoke $r12.<okhttp3.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out( 7205): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r12.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $r1)	timediff:29
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector)>($i1, $i2, $r1)	timediff:29
I/System.out( 7205): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.io.RealConnection: void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector)>($i0, $i1, $i2, $r2)	timediff:43
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r1.<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>($i0, $i1, $i2, $r15, $z0)	timediff:43
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r16 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r12 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Address: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r16.<okhttp3.internal.RouteDatabase: void connected(okhttp3.Route)>($r12)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>($i0, $i1, $i2, $z0)	timediff:46
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r6 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z0, $z1)	timediff:46
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>	sig:specialinvoke r14.<okhttp3.internal.http.Http1xStream: void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r0, $r8, $r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r5 = virtualinvoke $r4.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean)>($i0, $i1, $i2, $z1, $z0)	timediff:46
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>()	timediff:46
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:interfaceinvoke $r5.<okhttp3.internal.http.HttpStream: void setHttpEngine(okhttp3.internal.http.HttpEngine)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: boolean writeRequestHeadersEagerly()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void sendRequest()>()	timediff:51
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r15 = virtualinvoke $r2.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection)>($r0, 0, $r3, $r15)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = virtualinvoke $r5.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r18 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: void writingRequestHeaders()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>	sig:$r2 = virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r3 = virtualinvoke $r2.<okhttp3.internal.http.HttpEngine: okhttp3.Connection getConnection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r4 = interfaceinvoke $r3.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = virtualinvoke $r0.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$z0 = staticinvoke <okhttp3.internal.http.RequestLine: boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type)>($r0, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r4 = virtualinvoke $r0.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<okhttp3.HttpUrl: java.lang.String encodedPath()>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i1, "?#")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r2 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPath()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>	sig:$r3 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String requestPath(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void writeRequestHeaders(okhttp3.Request)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:interfaceinvoke $r18.<okhttp3.internal.http.HttpStream: void writeRequestHeaders(okhttp3.Request)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request)>($r4, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.HttpEngine: boolean permitsRequestBody(okhttp3.Request)>($r1)	timediff:0
W/IInputConnectionWrapper( 6059): showStatusIcon on inactive InputConnection
W/ContextImpl(  470): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: void finishRequest()>()	timediff:6
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:9
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:9
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r1 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:9
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void <init>(okhttp3.ResponseBody)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okio.BufferedSource source()>	sig:$r3 = virtualinvoke $r2.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.InputStream byteStream()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: java.io.InputStream byteStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r4 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:$r3 = virtualinvoke $r1.<okhttp3.ResponseBody: java.io.Reader charStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:1
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void close()>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:0
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Response)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:10
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:133
I/System.out( 7205): body:<okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>	sig:specialinvoke $r6.<okhttp3.internal.http.StatusLine: void <init>(okhttp3.Protocol,int,java.lang.String)>($r3, $i3, $r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: void addLenient(okhttp3.Headers$Builder,java.lang.String)>	sig:virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>($r1, $r3)	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>	sig:$r5 = virtualinvoke $r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r10 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Headers readHeaders()>()	timediff:2
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponseHeaders()>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okhttp3.Response$Builder readResponse()>()	timediff:40
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.Response$Builder readResponseHeaders()>()	timediff:40
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r6 = virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r7 = virtualinvoke $r6.<okhttp3.internal.io.RealConnection: okhttp3.Handshake handshake()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r8 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r8.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>	sig:$r3 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream$AbstractSource: void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>	sig:specialinvoke $r4.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void <init>(okhttp3.internal.http.Http1xStream,long)>($r0, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source newFixedLengthSource(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.Http1xStream: okio.Source getTransferStream(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>	sig:specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r9 = interfaceinvoke $r2.<okhttp3.internal.http.HttpStream: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r4 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r9)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r1 = virtualinvoke $r4.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r11 = virtualinvoke $r3.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>	sig:$r1 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response readNetworkResponse()>()	timediff:46
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r16 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response access$200(okhttp3.internal.http.HttpEngine)>($r4)	timediff:46
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$i1 = virtualinvoke $r16.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r1 = virtualinvoke $r14.<okhttp3.internal.http.HttpEngine$NetworkInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r3)	timediff:47
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>	sig:$r4 = virtualinvoke $r2.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:virtualinvoke $r0.<okhttp3.internal.http.HttpEngine: void receiveHeaders(okhttp3.Headers)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder priorResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder cacheResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>(null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>	sig:$r0 = virtualinvoke $r2.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Response stripBody(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void checkSupportResponse(java.lang.String,okhttp3.Response)>("networkResponse", $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder networkResponse(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: okhttp3.Request request()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>	sig:$i0 = virtualinvoke $r0.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpEngine: boolean hasBody(okhttp3.Response)>($r7)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void maybeCache()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine: void maybeCache()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response)>($r22, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Response: java.lang.String header(java.lang.String,java.lang.String)>($r1, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r4 = virtualinvoke $r3.<okhttp3.Response: java.lang.String header(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r8 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r9 = virtualinvoke $r9.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>("Content-Encoding")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r9 = virtualinvoke $r9.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r8 = virtualinvoke $r9.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r10 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r8)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:specialinvoke $r11.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r8, $r7)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r10 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r11)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>	sig:$r3 = virtualinvoke $r10.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:1
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void readResponse()>	sig:$r7 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Response unzip(okhttp3.Response)>($r7)	timediff:1
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void readResponse()>()	timediff:49
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r11 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Response getResponse()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r4 = virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection connection()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r1 = interfaceinvoke $r4.<okhttp3.Connection: okhttp3.Route route()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$i0 = virtualinvoke $r3.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: okhttp3.Request followUpRequest()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>	sig:virtualinvoke $r1.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r7.<okhttp3.internal.http.HttpEngine: void releaseStreamAllocation()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = virtualinvoke $r3.<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>($r1, $z0)	timediff:101
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:1
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;9;%;<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>;%;$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/prices/BTC-USD/spot;%;GET;%;[];%;[public, max-age=30];%;[Sat, 14 Apr 2018 05:22:41 GMT];%;[];%;[__cfduid=d779e4f4e8961cd4a579d0363a666fa151523683331; expires=Sun, 14-Apr-19 05:22:11 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:22:11 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=d779e4f4e8961cd4a579d0363a666fa151523683331; expires=Sun, 14-Apr-19 05:22:11 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=30
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob: https://coinbase.ada.support; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api https://coinbase.ada.support/api/; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://d124s1zbdqkqqe.cloudfront.net https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"f75f904b0e7a11e51f01529855d286b4"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: ed1b0174-40fc-473c-85e9-688ed5dd956f
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:41 GMT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3bbb3be1b76d0-LAX
I/System.out( 7205): body:<com.coinbase.Coinbase$5: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>	sig:$r6 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:102
I/System.out( 7205): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r8 = interfaceinvoke $r7.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>($r2)	timediff:102
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:responseHeaders = virtualinvoke resp.<okhttp3.Response: okhttp3.Headers headers()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r0 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r1 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Cache-Control")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r2 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Expires")	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r3 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Age")	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.util.List values(java.lang.String)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r4 = virtualinvoke responseHeaders.<okhttp3.Headers: java.util.List values(java.lang.String)>("Set-Cookie")	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r13 = virtualinvoke req.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl: java.lang.String toString()>()	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r17 = virtualinvoke req.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out( 7205): OkHttpP;%;10;%;<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>;%;$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2);%;https://api.coinbase.com/v2/prices/BTC-USD/spot;%;GET;%;[];%;[public, max-age=30];%;[Sat, 14 Apr 2018 05:22:41 GMT];%;[];%;[__cfduid=d779e4f4e8961cd4a579d0363a666fa151523683331; expires=Sun, 14-Apr-19 05:22:11 GMT; path=/; domain=.coinbase.com; HttpOnly];%;
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$i1 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i0)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String toString()>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i0)	timediff:0
I/System.out( 7205): body:<empirical.HelperClass: void printOkHttpInfo(java.lang.String,java.lang.String,okhttp3.Request,okhttp3.Response)>	sig:$r48 = virtualinvoke responseHeaders.<okhttp3.Headers: java.lang.String toString()>()	timediff:0
I/System.out( 7205): header:Date: Sat, 14 Apr 2018 05:22:11 GMT
I/System.out( 7205): Content-Type: application/json; charset=utf-8
I/System.out( 7205): Connection: keep-alive
I/System.out( 7205): Set-Cookie: __cfduid=d779e4f4e8961cd4a579d0363a666fa151523683331; expires=Sun, 14-Apr-19 05:22:11 GMT; path=/; domain=.coinbase.com; HttpOnly
I/System.out( 7205): Cache-Control: public, max-age=30
I/System.out( 7205): content-disposition: attachment; filename=response.json
I/System.out( 7205): Content-Security-Policy: default-src 'self' https://www.coinbase.com; child-src 'self' https://www.coinbase.com https://*.online-metrix.net https://*.wpstn.com https://netverify.com https://platform.twitter.com https://www.google.com/recaptcha/ https://cdn.plaid.com/link/ https://*.doubleclick.net/ blob: https://coinbase.ada.support; connect-src 'self' https://www.coinbase.com https://api.coinbase.com https://api.mixpanel.com https://*.online-metrix.net https://api.cloudinary.com https://ott9.wpstn.com/live https://api.amplitude.com/ static.coinbase.com wss://ws.coinbase.com wss://ws.coinbase.com:443 https://www.coinbase.com/api https://coinbase.ada.support/api/; font-src 'self' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; img-src 'self' data: https://www.coinbase.com https://images.coinbase.com https://exceptions.coinbase.com https://coinbase-uploads.s3.amazonaws.com https://s3.amazonaws.com/app-public/ https://maps.gstatic.com https://ssl.google-analytics.com https://www.google.com https://maps.googleapis.com https://csi.gstatic.com https://www.google-analytics.com https://res.cloudinary.com https://secure.gravatar.com https://i2.wp.com https://*.online-metrix.net https://assets.coinbase.com/ https://hexagon-analytics.com https://api.mixpanel.com https://cb-brand.s3.amazonaws.com https://googleads.g.doubleclick.net blob: static.coinbase.com https://d124s1zbdqkqqe.cloudfront.net https://www.facebook.com/tr; media-src 'self' https://www.coinbase.com blob:; object-src 'self' data: https://www.coinbase.com https://cdn.siftscience.com https://*.online-metrix.net https://www.gstatic.com https://www.google.com/recaptcha/api/; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.coinbase.com https://cdn.siftscience.com https://*.newrelic.com https://bam.nr-data.net https://*.google-analytics.com https://www.google.com https://www.gstatic.com https://*.online-metrix.net https://code.jquery.com https://chart.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://netverify.com https://ajax.cloudflare.com https://cdn.plaid.com/link/v2/stable/ https://www.googletagmanager.com/gtag/js https://www.googleadservices.com https://googleads.g.doubleclick.net https://assets.coinbase.com/ static.coinbase.com; style-src 'self' 'unsafe-inline' https://www.coinbase.com https://assets.coinbase.com/ static.coinbase.com; report-uri /csp-report
I/System.out( 7205): ETag: W/"f75f904b0e7a11e51f01529855d286b4"
I/System.out( 7205): Expect-CT: enforce; max-age=86400; report-uri="https://coinbase.report-uri.io/r/default/ct/reportOnly"
I/System.out( 7205): Public-Key-Pins: max-age=5184000; pin-sha256="r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E="; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg="; report-uri="https://coinbase.report-uri.io/r/default/hpkp/enforce"
I/System.out( 7205): Referrer-Policy: strict-origin-when-cross-origin
I/System.out( 7205): Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
I/System.out( 7205): Vary: Origin,Accept-Encoding
I/System.out( 7205): X-Content-Type-Options: nosniff
I/System.out( 7205): X-Download-Options: noopen
I/System.out( 7205): X-Frame-Options: DENY
I/System.out( 7205): X-Permitted-Cross-Domain-Policies: none
I/System.out( 7205): X-Powered-By: Proof-of-Work
I/System.out( 7205): X-Request-Id: ed1b0174-40fc-473c-85e9-688ed5dd956f
I/System.out( 7205): X-XSS-Protection: 1; mode=block
I/System.out( 7205): CF-Cache-Status: HIT
I/System.out( 7205): Expires: Sat, 14 Apr 2018 05:22:41 GMT
I/System.out( 7205): Server: cloudflare
I/System.out( 7205): CF-RAY: 40b3bbb3be1b76d0-LAX
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:$r3 = interfaceinvoke $r1.<okhttp3.Interceptor$Chain: okhttp3.Response proceed(okhttp3.Request)>($r2)	timediff:103
I/System.out( 7205): body:<okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>	sig:$r1 = specialinvoke $r0.<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>($z0)	timediff:103
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.Response access$100(okhttp3.RealCall,boolean)>($r2, $z1)	timediff:103
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.ResponseBody body()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r2 = staticinvoke <okhttp3.Response: okhttp3.Request access$1300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r3 = staticinvoke <okhttp3.Response: okhttp3.Protocol access$1400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$i0 = staticinvoke <okhttp3.Response: int access$1500(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r4 = staticinvoke <okhttp3.Response: java.lang.String access$1600(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r5 = staticinvoke <okhttp3.Response: okhttp3.Handshake access$1700(okhttp3.Response)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r6 = staticinvoke <okhttp3.Response: okhttp3.Headers access$1800(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r8 = staticinvoke <okhttp3.Response: okhttp3.ResponseBody access$1900(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2000(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2100(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$r9 = staticinvoke <okhttp3.Response: okhttp3.Response access$2200(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2300(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response)>	sig:$l1 = staticinvoke <okhttp3.Response: long access$2400(okhttp3.Response)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response$Builder: void <init>(okhttp3.Response)>($r1)	timediff:1
I/System.out( 7205): body:<okhttp3.Response: okhttp3.Response$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Response$Builder: void <init>(okhttp3.Response,okhttp3.Response$1)>($r0, null)	timediff:1
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>()	timediff:1
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r7 = virtualinvoke $r5.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$r1 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length")	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long stringToLong(java.lang.String)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: long contentLength()>	sig:$l0 = staticinvoke <okhttp3.internal.http.OkHeaders: long contentLength(okhttp3.Headers)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$l0 = virtualinvoke $r5.<okhttp3.ResponseBody: long contentLength()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$NoContentResponseBody: void <init>(okhttp3.MediaType,long)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r6 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r4)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r2 = staticinvoke <okhttp3.Response$Builder: okhttp3.Request access$000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r3 = staticinvoke <okhttp3.Response$Builder: okhttp3.Protocol access$100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$i0 = staticinvoke <okhttp3.Response$Builder: int access$200(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r4 = staticinvoke <okhttp3.Response$Builder: java.lang.String access$300(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r5 = staticinvoke <okhttp3.Response$Builder: okhttp3.Handshake access$400(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r6 = staticinvoke <okhttp3.Response$Builder: okhttp3.Headers$Builder access$500(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r8 = staticinvoke <okhttp3.Response$Builder: okhttp3.ResponseBody access$600(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$700(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$800(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$r9 = staticinvoke <okhttp3.Response$Builder: okhttp3.Response access$900(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1000(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder)>	sig:$l1 = staticinvoke <okhttp3.Response$Builder: long access$1100(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>	sig:specialinvoke $r0.<okhttp3.Response: void <init>(okhttp3.Response$Builder)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.Response$Builder: okhttp3.Response build()>	sig:specialinvoke $r6.<okhttp3.Response: void <init>(okhttp3.Response$Builder,okhttp3.Response$1)>($r0, null)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$r1 = virtualinvoke $r6.<okhttp3.Response$Builder: okhttp3.Response build()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall: retrofit2.Response parseResponse(okhttp3.Response)>	sig:$i1 = virtualinvoke $r1.<okhttp3.Response: int code()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void <init>(okhttp3.ResponseBody)>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okio.BufferedSource source()>	sig:$r3 = virtualinvoke $r2.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.InputStream byteStream()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: java.io.InputStream byteStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Type")	timediff:0
I/System.out( 7205): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r6, $r7, $r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.RealResponseBody: okhttp3.MediaType contentType()>	sig:$r3 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: okhttp3.MediaType contentType()>	sig:$r2 = virtualinvoke $r1.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r2 = virtualinvoke $r0.<okhttp3.ResponseBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.nio.charset.Charset charset()>	sig:$r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: java.io.Reader charStream()>	sig:$r4 = specialinvoke $r0.<okhttp3.ResponseBody: java.nio.charset.Charset charset()>()	timediff:0
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:$r3 = virtualinvoke $r1.<okhttp3.ResponseBody: java.io.Reader charStream()>()	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:$r7 = staticinvoke <okhttp3.internal.http.Http1xStream: okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream)>($r6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$i0 = staticinvoke <okhttp3.internal.http.Http1xStream: int access$500(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>	sig:specialinvoke $r0.<okhttp3.internal.http.Http1xStream: void detachTimeout(okio.ForwardingTimeout)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout)>($r1, $r5)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:staticinvoke <okhttp3.internal.http.Http1xStream: int access$502(okhttp3.internal.http.Http1xStream,int)>($r1, 6)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:$r6 = staticinvoke <okhttp3.internal.http.Http1xStream: okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream)>($r1)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out( 7205): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:6
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:6
I/System.out( 7205): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out( 7205): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>($z0, 0, 1)	timediff:6
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$AbstractSource: void endOfInput(boolean)>	sig:virtualinvoke $r6.<okhttp3.internal.http.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpStream)>($z0, $r1)	timediff:6
I/System.out( 7205): body:<okhttp3.internal.http.Http1xStream$FixedLengthSource: long read(okio.Buffer,long)>	sig:virtualinvoke $r0.<okhttp3.internal.http.Http1xStream$FixedLengthSource: void endOfInput(boolean)>(1)	timediff:6
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:$r1 = virtualinvoke $r0.<okhttp3.ResponseBody: okio.BufferedSource source()>()	timediff:0
I/System.out( 7205): body:<okhttp3.ResponseBody: void close()>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r1)	timediff:0
I/System.out( 7205): body:<retrofit2.OkHttpCall$ExceptionCatchingRequestBody: void close()>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:0
I/System.out( 7205): body:<retrofit2.converter.gson.GsonResponseBodyConverter: java.lang.Object convert(okhttp3.ResponseBody)>	sig:virtualinvoke $r1.<okhttp3.ResponseBody: void close()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Response)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:interfaceinvoke $r4.<okhttp3.Callback: void onResponse(okhttp3.Call,okhttp3.Response)>($r2, $r3)	timediff:7
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r5 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out( 7205): body:<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>	sig:specialinvoke $r0.<okhttp3.Dispatcher: void promoteCalls()>()	timediff:0
I/System.out( 7205): body:<okhttp3.RealCall$AsyncCall: void execute()>	sig:virtualinvoke $r6.<okhttp3.Dispatcher: void finished(okhttp3.RealCall$AsyncCall)>($r0)	timediff:0
I/System.out( 7205): body:<okhttp3.internal.NamedRunnable: void run()>	sig:virtualinvoke $r0.<okhttp3.internal.NamedRunnable: void execute()>()	timediff:110
D/dalvikvm( 7205): GC_FOR_ALLOC freed 1679K, 19% free 8226K/10092K, paused 6ms, total 6ms
I/dalvikvm-heap( 7205): Grow heap (frag case) to 9.775MB for 1765452-byte allocation
D/dalvikvm( 7205): GC_CONCURRENT freed 2K, 16% free 9947K/11820K, paused 2ms+0ms, total 9ms
D/dalvikvm( 7205): WAIT_FOR_CONCURRENT_GC blocked 3ms
I/System.out( 7205): body:<retrofit2.Response: boolean isSuccessful()>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/System.out( 7205): body:<retrofit2.Response: boolean isSuccessful()>	sig:$z0 = virtualinvoke $r1.<okhttp3.Response: boolean isSuccessful()>()	timediff:0
I/AndroidRuntime( 7195): VM exiting with result code 5.
