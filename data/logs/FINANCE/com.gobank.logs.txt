--------- beginning of /dev/log/main
I/Icing   (26586): Indexing F4FAA6262FE39DDD50BAE6B7AF5CDB8D73BA0DB0 from com.google.android.gms
I/Icing   (26586): Indexing done F4FAA6262FE39DDD50BAE6B7AF5CDB8D73BA0DB0
D/AndroidRuntime(17452): 
D/AndroidRuntime(17452): >>>>>> AndroidRuntime START com.android.internal.os.RuntimeInit <<<<<<
D/AndroidRuntime(17452): CheckJNI is OFF
D/dalvikvm(17452): Using executionMode 2
D/dalvikvm(17452): Trying to load lib libjavacore.so 0x0
D/dalvikvm(17452): Added shared lib libjavacore.so 0x0
D/dalvikvm(17452): Trying to load lib libnativehelper.so 0x0
D/dalvikvm(17452): Added shared lib libnativehelper.so 0x0
D/dalvikvm(17452): No JNI_OnLoad found in libnativehelper.so 0x0, skipping init
D/dalvikvm(17452): Note: class Landroid/app/ActivityManagerNative; has 179 unimplemented (abstract) methods
E/memtrack(17452): Couldn't load memtrack module (No such file or directory)
E/android.os.Debug(17452): failed to load memtrack module: -2
D/AndroidRuntime(17452): Calling main entry com.android.commands.monkey.Monkey
--------- beginning of /dev/log/system
W/BroadcastQueue(  346): Skipping deliver [background] BroadcastRecord{4b4a83bc u-1 android.net.conn.CONNECTIVITY_CHANGE} to ReceiverList{4b6a65d4 17452 (unknown name)/0/u-1 remote:4ab2e6b4}: process crashing
D/yeshen  (11448): launcher onpause
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/ActivityManager(  346): Start proc com.gobank for activity com.gobank/.activity.RootActivity: pid=17462 uid=10128 gids={50128, 3003, 1028, 1015, 1023}
E/SurfaceFlinger(  172): glCheckFramebufferStatusOES error 36054
E/SurfaceFlinger(  172): got GL_FRAMEBUFFER_COMPLETE_OES error while taking screenshot
D/SurfaceFlinger(  172): setOrientation, mFbdev=0xb7d21d80, mFbDev->setOrientation=0xb69f9ce0, orientation=3
I/gralloc_nox(  172): setOrientation: orientation=3
I/ActivityManager(  346): Config changes=480 {1.0 310mcc16mnc en_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger -keyb/v/h dpad/v s.134}
D/Tinker.DefaultAppLike(11448): onConfigurationChanged:{1.0 310mcc16mnc en_US ldltr sw480dp w480dp h828dp 240dpi lrg long port finger -keyb/v/h dpad/v s.134}
D/PhoneStatusBar(  531): mSettingsPanelGravity = 55
I/InputReader(  346): Reconfiguring input devices.  changes=0x00000004
I/InputReader(  346): Device reconfigured: id=1, name='seamless mouse', size 1280x720, orientation 3, mode 1, display id 0
I/InputReader(  346): Device reconfigured: id=3, name='Android Input', size 1280x720, orientation 3, mode 1, display id 0
I/InputReader(  346): Reconfiguring input devices.  changes=0x00000004
I/InputReader(  346): Device reconfigured: id=8, name='VirtualBox USB Tablet', size 1280x720, orientation 3, mode 1, display id 0
D/dalvikvm(  531): GC_FOR_ALLOC freed 6452K, 52% free 11633K/23916K, paused 3ms, total 3ms
D/Sensors (  346): Client connection accepted (209)
I/dalvikvm-heap(  531): Grow heap (frag case) to 17.669MB for 6553612-byte allocation
W/NetworkManagementSocketTagger(  346): setKernelCountSet(10128, 1) failed with errno -13
D/dalvikvm(  531): GC_CONCURRENT freed 3K, 41% free 18029K/30320K, paused 1ms+1ms, total 5ms
D/dalvikvm(  531): WAIT_FOR_CONCURRENT_GC blocked 4ms
D/dalvikvm(  531): WAIT_FOR_CONCURRENT_GC blocked 2ms
D/dalvikvm(  531): WAIT_FOR_CONCURRENT_GC blocked 2ms
D/dalvikvm(  531): WAIT_FOR_CONCURRENT_GC blocked 2ms
I/dalvikvm(17462): ignoring registerObject request in thread=1
I/dalvikvm(17462): ignoring registerObject request in thread=1
I/System.out(17462): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r4, $r5, $r7)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void <clinit>()>	sig:$r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("application/json; charset=utf-8")	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_0", 0, "http/1.0")	timediff:0
I/System.out(17462): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_1", 1, "http/1.1")	timediff:0
I/System.out(17462): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("SPDY_3", 2, "spdy/3.1")	timediff:0
I/System.out(17462): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_2", 3, "h2")	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_MD5", 0, "SSL_RSA_WITH_NULL_MD5", 1, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA", 1, "SSL_RSA_WITH_NULL_SHA", 2, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_RC4_40_MD5", 2, "SSL_RSA_EXPORT_WITH_RC4_40_MD5", 3, 4346, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_MD5", 3, "SSL_RSA_WITH_RC4_128_MD5", 4, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_SHA", 4, "SSL_RSA_WITH_RC4_128_SHA", 5, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", 5, "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 8, 4346, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_DES_CBC_SHA", 6, "SSL_RSA_WITH_DES_CBC_SHA", 9, 5469, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_3DES_EDE_CBC_SHA", 7, "SSL_RSA_WITH_3DES_EDE_CBC_SHA", 10, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 8, "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 17, 4346, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_DES_CBC_SHA", 9, "SSL_DHE_DSS_WITH_DES_CBC_SHA", 18, 5469, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 10, "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 19, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 11, "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 20, 4346, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_DES_CBC_SHA", 12, "SSL_DHE_RSA_WITH_DES_CBC_SHA", 21, 5469, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 13, "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 22, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_RC4_40_MD5", 14, "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 23, 4346, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_RC4_128_MD5", 15, "SSL_DH_anon_WITH_RC4_128_MD5", 24, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 16, "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 25, 4346, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_DES_CBC_SHA", 17, "SSL_DH_anon_WITH_DES_CBC_SHA", 26, 5469, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_3DES_EDE_CBC_SHA", 18, "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 27, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_SHA", 19, "TLS_KRB5_WITH_DES_CBC_SHA", 30, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 20, "TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 31, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_SHA", 21, "TLS_KRB5_WITH_RC4_128_SHA", 32, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_MD5", 22, "TLS_KRB5_WITH_DES_CBC_MD5", 34, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 23, "TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 35, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_MD5", 24, "TLS_KRB5_WITH_RC4_128_MD5", 36, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 25, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 38, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 26, "TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 40, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 27, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 41, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 28, "TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 43, 2712, 6, 2147483647)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA", 29, "TLS_RSA_WITH_AES_128_CBC_SHA", 47, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 30, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 50, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 31, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 51, 5246, 6, 10)	timediff:0
D/dalvikvm(17462): JIT code cache reset in 0 ms (0 bytes 1/0)
D/dalvikvm(17462): GC_CONCURRENT freed 260K, 10% free 3032K/3352K, paused 1ms+0ms, total 4ms
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA", 32, "TLS_DH_anon_WITH_AES_128_CBC_SHA", 52, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA", 33, "TLS_RSA_WITH_AES_256_CBC_SHA", 53, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 34, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 56, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 35, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 57, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA", 36, "TLS_DH_anon_WITH_AES_256_CBC_SHA", 58, 5246, 6, 10)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA256", 37, "TLS_RSA_WITH_NULL_SHA256", 59, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA256", 38, "TLS_RSA_WITH_AES_128_CBC_SHA256", 60, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA256", 39, "TLS_RSA_WITH_AES_256_CBC_SHA256", 61, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 40, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 64, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 41, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 103, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 42, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 106, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 43, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 107, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA256", 44, "TLS_DH_anon_WITH_AES_128_CBC_SHA256", 108, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA256", 45, "TLS_DH_anon_WITH_AES_256_CBC_SHA256", 109, 5246, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_GCM_SHA256", 46, "TLS_RSA_WITH_AES_128_GCM_SHA256", 156, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_GCM_SHA384", 47, "TLS_RSA_WITH_AES_256_GCM_SHA384", 157, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 48, "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 158, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 49, "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 159, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 50, "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 162, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 51, "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 163, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_GCM_SHA256", 52, "TLS_DH_anon_WITH_AES_128_GCM_SHA256", 166, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_GCM_SHA384", 53, "TLS_DH_anon_WITH_AES_256_GCM_SHA384", 167, 5288, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 54, "TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 255, 5746, 6, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_NULL_SHA", 55, "TLS_ECDH_ECDSA_WITH_NULL_SHA", 49153, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 56, "TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 49154, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 57, "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 49155, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 58, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 49156, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 59, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 49157, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_NULL_SHA", 60, "TLS_ECDHE_ECDSA_WITH_NULL_SHA", 49158, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 61, "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 49159, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 62, "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 49160, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 63, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 49161, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 64, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 49162, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_NULL_SHA", 65, "TLS_ECDH_RSA_WITH_NULL_SHA", 49163, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_RC4_128_SHA", 66, "TLS_ECDH_RSA_WITH_RC4_128_SHA", 49164, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 67, "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 49165, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 68, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 49166, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 69, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 49167, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_NULL_SHA", 70, "TLS_ECDHE_RSA_WITH_NULL_SHA", 49168, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_RC4_128_SHA", 71, "TLS_ECDHE_RSA_WITH_RC4_128_SHA", 49169, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 72, "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 49170, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 73, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 49171, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 74, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 49172, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_NULL_SHA", 75, "TLS_ECDH_anon_WITH_NULL_SHA", 49173, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_RC4_128_SHA", 76, "TLS_ECDH_anon_WITH_RC4_128_SHA", 49174, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 77, "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 49175, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 78, "TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 49176, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 79, "TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 49177, 4492, 7, 14)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 80, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 49187, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 81, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 49188, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 82, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 49189, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 83, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 49190, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 84, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 49191, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 85, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 49192, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 86, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 49193, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 87, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 49194, 5289, 7, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 88, "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 49195, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 89, "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 49196, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 90, "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 49197, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 91, "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 49198, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 92, "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 49199, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 93, "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 49200, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 94, "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 49201, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 95, "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 49202, 5289, 8, 21)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_2", 0, "TLSv1.2")	timediff:0
I/System.out(17462): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_1", 1, "TLSv1.1")	timediff:0
I/System.out(17462): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_0", 2, "TLSv1")	timediff:0
I/System.out(17462): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("SSL_3_0", 3, "SSLv3")	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r5)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.Internal: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:specialinvoke $r5.<okhttp3.OkHttpClient$1: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:4
I/System.out(17462): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out(17462): body:<okhttp3.CookieJar: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CookieJar$1: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.tls.OkHostnameVerifier: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CertificatePinner$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.CertificatePinner$Builder: java.util.List access$000(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r3 = staticinvoke <okhttp3.CertificatePinner$Builder: okhttp3.internal.tls.TrustRootIndex access$100(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>	sig:specialinvoke $r0.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:$r1 = virtualinvoke $r0.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Authenticator: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Authenticator$1: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionPool: void <clinit>()>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp ConnectionPool", 1)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Dns: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Dns$1: void <init>()>()	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:specialinvoke $r5.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:5
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:$r5 = virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(5L, $r3)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:$r5 = virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(90L, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 218K, 9% free 3207K/3492K, paused 2ms+0ms, total 4ms
I/System.out(17462): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:specialinvoke $r1.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:specialinvoke $r4.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>	sig:specialinvoke $r0.<okhttp3.internal.Platform: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:specialinvoke $r7.<okhttp3.internal.Platform$Android: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>($r0, $r1, $r4, $r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform: void <clinit>()>	sig:$r0 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>()	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r15 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.Platform$Android: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r3 = staticinvoke <okhttp3.internal.Platform$Android: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r2, "sslParameters")	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "java/lang/Object", "delegate")	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform$Android: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r3, class "javax/net/ssl/X509TrustManager", "x509TrustManager")	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform$Android: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r3, class "javax/net/ssl/X509TrustManager", "trustManager")	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r15.<okhttp3.internal.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r13)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r15 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.tls.AndroidTrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r4.<okhttp3.internal.tls.AndroidTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)>($r0, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: okhttp3.internal.tls.TrustRootIndex trustRootIndex(javax.net.ssl.X509TrustManager)>	sig:$r2 = staticinvoke <okhttp3.internal.tls.AndroidTrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r14 = virtualinvoke $r15.<okhttp3.internal.Platform: okhttp3.internal.tls.TrustRootIndex trustRootIndex(javax.net.ssl.X509TrustManager)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner$Builder: void <init>(okhttp3.CertificatePinner)>	sig:$r3 = staticinvoke <okhttp3.CertificatePinner: java.util.List access$200(okhttp3.CertificatePinner)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner$Builder: void <init>(okhttp3.CertificatePinner)>	sig:$r5 = staticinvoke <okhttp3.CertificatePinner: okhttp3.internal.tls.TrustRootIndex access$300(okhttp3.CertificatePinner)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner$Builder: void <init>(okhttp3.CertificatePinner)>($r0)	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r25 = virtualinvoke $r24.<okhttp3.CertificatePinner: okhttp3.CertificatePinner$Builder newBuilder()>()	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r25 = virtualinvoke $r25.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner$Builder trustRootIndex(okhttp3.internal.tls.TrustRootIndex)>($r14)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.CertificatePinner$Builder: java.util.List access$000(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r3 = staticinvoke <okhttp3.CertificatePinner$Builder: okhttp3.internal.tls.TrustRootIndex access$100(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>	sig:specialinvoke $r0.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r24 = virtualinvoke $r25.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:19
I/System.out(17462): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:19
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:19
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.lang.String)>	sig:specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.lang.String)>	sig:specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>($r1)	timediff:0
E/SQLiteLog(17462): (14) cannot open file at line 30191 of [00bb9c9ce4]
E/SQLiteLog(17462): (14) os_unix.c:30191: (2) open(/data/data/com.gobank/databases/zipcodes.jpg) - 
E/SQLiteDatabase(17462): Failed to open database '/data/data/com.gobank/databases/zipcodes.jpg'.
E/SQLiteDatabase(17462): android.database.sqlite.SQLiteCantOpenDatabaseException: unknown error (code 14): Could not open database
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteConnection.nativeOpen(Native Method)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteConnection.open(SQLiteConnection.java:209)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteConnection.open(SQLiteConnection.java:193)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteConnectionPool.openConnectionLocked(SQLiteConnectionPool.java:463)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:185)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteConnectionPool.open(SQLiteConnectionPool.java:177)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteDatabase.openInner(SQLiteDatabase.java:804)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteDatabase.open(SQLiteDatabase.java:789)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteDatabase.openDatabase(SQLiteDatabase.java:694)
E/SQLiteDatabase(17462): 	at android.database.sqlite.SQLiteDatabase.openDatabase(SQLiteDatabase.java:669)
E/SQLiteDatabase(17462): 	at com.gobank.provider.ZipCodeDbHelper.c(SourceFile:94)
E/SQLiteDatabase(17462): 	at com.gobank.provider.ZipCodeDbHelper.a(SourceFile:61)
E/SQLiteDatabase(17462): 	at com.gobank.service.CoreServices.<init>(SourceFile:131)
E/SQLiteDatabase(17462): 	at com.gobank.LooptApplication.onCreate(SourceFile:1093)
E/SQLiteDatabase(17462): 	at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1024)
E/SQLiteDatabase(17462): 	at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4346)
E/SQLiteDatabase(17462): 	at android.app.ActivityThread.access$1500(ActivityThread.java:135)
E/SQLiteDatabase(17462): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1256)
E/SQLiteDatabase(17462): 	at android.os.Handler.dispatchMessage(Handler.java:102)
E/SQLiteDatabase(17462): 	at android.os.Looper.loop(Looper.java:136)
E/SQLiteDatabase(17462): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
E/SQLiteDatabase(17462): 	at java.lang.reflect.Method.invokeNative(Native Method)
E/SQLiteDatabase(17462): 	at java.lang.reflect.Method.invoke(Method.java:515)
E/SQLiteDatabase(17462): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
E/SQLiteDatabase(17462): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
E/SQLiteDatabase(17462): 	at dalvik.system.NativeStart.main(Native Method)
D/dalvikvm(17462): GC_CONCURRENT freed 324K, 11% free 3369K/3756K, paused 0ms+2ms, total 10ms
I/Crittercism(17462): Initializing Crittercism 5.0.6 for App ID 515f4eb3c463c27a59000002
I/System.out(17462): body:<a.a.ac: void a(android.content.Context,java.lang.String,com.crittercism.app.CrittercismConfig)>	sig:specialinvoke $r16.<java.net.URL: void <init>(java.lang.String)>($r6)	timediff:0
I/System.out(17462): <a.a.ac: void a(android.content.Context,java.lang.String,com.crittercism.app.CrittercismConfig)>###specialinvoke $r16.<java.net.URL: void <init>(java.lang.String)>($r6)###https://apm.crittercism.com/api/apm/network
I/System.out(17462): body:<a.a.fn: void <clinit>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.google.com")	timediff:0
I/System.out(17462): <a.a.fn: void <clinit>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.google.com")###https://www.google.com
I/System.out(17462): body:<a.a.e: void <init>()>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.fn: boolean g()>	sig:specialinvoke $r6.<java.net.Socket: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.fn: boolean g()>	sig:staticinvoke <java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>($r11)	timediff:0
E/FlurryAgent(17462): Listener cannot be null
D/dalvikvm(17462): GC_CONCURRENT freed 339K, 10% free 3500K/3888K, paused 0ms+2ms, total 6ms
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] A fresh start of Root Activity
I/ActivityManager(  346): START u0 {flg=0x4000000 cmp=com.gobank/.activity.prelogin.PreLoginWelcomeActivity} from pid 17462
I/dalvikvm(17462): Could not find method android.content.pm.PackageManager.getPackageInstaller, referenced from method com.google.android.gms.common.zze.zzl
W/dalvikvm(17462): VFY: unable to resolve virtual method 1600: Landroid/content/pm/PackageManager;.getPackageInstaller ()Landroid/content/pm/PackageInstaller;
D/dalvikvm(17462): VFY: replacing opcode 0x6e at 0x001a
W/EGL_emulation(  531): eglSurfaceAttrib not implemented 3093 12436
I/dalvikvm(17462): Could not find method android.app.Notification$Builder.setLocalOnly, referenced from method com.google.android.gms.common.GooglePlayServicesUtil.zza
W/dalvikvm(17462): VFY: unable to resolve virtual method 1338: Landroid/app/Notification$Builder;.setLocalOnly (Z)Landroid/app/Notification$Builder;
D/dalvikvm(17462): VFY: replacing opcode 0x6e at 0x00fb
I/System.out(17462): body:<a.a.eg: java.net.URL a()>	sig:specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)	timediff:0
I/System.out(17462): <a.a.eg: java.net.URL a()>###specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)###https://appload.ingest.crittercism.com/v0/appload/
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:$r3 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:2
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoInput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r12)	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 366K, 11% free 3656K/4068K, paused 1ms+2ms, total 13ms
D/dalvikvm(17462): GC_FOR_ALLOC freed 52K, 10% free 3669K/4068K, paused 2ms, total 2ms
I/dalvikvm-heap(17462): Grow heap (frag case) to 4.246MB for 635808-byte allocation
D/dalvikvm(17462): GC_FOR_ALLOC freed <1K, 9% free 4289K/4692K, paused 2ms, total 2ms
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 24K, 9% free 4301K/4692K, paused 1ms+1ms, total 5ms
I/WindowManager(  346): Screen frozen for +185ms due to Window{4aa07324 u0 StatusBar}
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
D/dalvikvm(17462): GC_FOR_ALLOC freed 28K, 7% free 4487K/4780K, paused 5ms, total 5ms
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
D/dalvikvm(17462): GC_CONCURRENT freed 229K, 7% free 4769K/5104K, paused 1ms+1ms, total 6ms
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:2
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
W/ViewRootImpl(17462): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-5.0, y[0]=-4.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=14788609, downTime=-1, deviceId=0, source=0x10004 }
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<a.a.eo: void a()>	sig:$r7 = virtualinvoke $r5.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:75
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 512K, 11% free 4812K/5388K, paused 0ms+0ms, total 3ms
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:6
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:6
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:7
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("SUCCESS", 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("MISSING_SCHEME", 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("UNSUPPORTED_SCHEME", 2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_PORT", 3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_HOST", 4)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:9
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:12
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:12
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine$1: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:2
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:3
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:1
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:2
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noCache()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder onlyIfCached()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit)>(2147483647, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<a.a.eo: void a()>	sig:$i0 = virtualinvoke $r5.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:27
I/System.out(17462): body:<a.a.eo: void a()>	sig:$r9 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 485K, 10% free 4896K/5428K, paused 2ms+1ms, total 9ms
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:10
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:10
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:10
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): URLConn;%;0;%;<a.a.eo: void a()>;%;$r9 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>();%;https://appload.ingest.crittercism.com/v0/appload/;%;true;%;371;%;Not found;%;Not found;%;Not found;%;Not found
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.eo: void a()>	sig:virtualinvoke $r5.<java.net.HttpURLConnection: void disconnect()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<a.a.eg: java.net.URL a()>	sig:specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)	timediff:0
I/System.out(17462): <a.a.eg: java.net.URL a()>###specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)###https://api.crittercism.com/android_v2/update_user_metadata
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:$r3 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoInput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r12)	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
D/libEGL  (17462): loaded /system/lib/egl/libEGL_adreno.so
D/        (17462): HostConnection::get() New Host Connection established 0xb7b11870, tid 17462
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
D/libEGL  (17462): loaded /system/lib/egl/libGLESv1_CM_adreno.so
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
D/libEGL  (17462): loaded /system/lib/egl/libGLESv2_adreno.so
I/System.out(17462): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:27
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:27
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:27
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:27
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:27
I/System.out(17462): body:<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.framed.FramedConnection$Listener: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:8
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:8
W/dalvikvm(17462): VFY: unable to find class referenced in signature (Ljava/nio/file/Path;)
W/dalvikvm(17462): VFY: unable to find class referenced in signature ([Ljava/nio/file/OpenOption;)
I/dalvikvm(17462): Could not find method java.nio.file.Files.newOutputStream, referenced from method okio.Okio.sink
W/dalvikvm(17462): VFY: unable to resolve static method 42995: Ljava/nio/file/Files;.newOutputStream (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;
D/dalvikvm(17462): VFY: replacing opcode 0x71 at 0x000a
W/dalvikvm(17462): VFY: unable to find class referenced in signature (Ljava/nio/file/Path;)
W/dalvikvm(17462): VFY: unable to find class referenced in signature ([Ljava/nio/file/OpenOption;)
I/dalvikvm(17462): Could not find method java.nio.file.Files.newInputStream, referenced from method okio.Okio.source
W/dalvikvm(17462): VFY: unable to resolve static method 42994: Ljava/nio/file/Files;.newInputStream (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;
D/dalvikvm(17462): VFY: replacing opcode 0x71 at 0x000a
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 652K, 13% free 4952K/5664K, paused 0ms+0ms, total 4ms
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
D/dalvikvm(17462): WAIT_FOR_CONCURRENT_GC blocked 2ms
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
D/OpenGLRenderer(17462): Enabling debug mode 0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:9
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:9
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:2
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:1
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
D/dalvikvm(17462): GC_FOR_ALLOC freed 186K, 13% free 4962K/5664K, paused 3ms, total 3ms
I/dalvikvm-heap(17462): Grow heap (frag case) to 5.482MB for 608412-byte allocation
D/dalvikvm(17462): GC_FOR_ALLOC freed 7K, 12% free 5549K/6260K, paused 4ms, total 4ms
I/System.out(17462): body:<a.a.eo: void a()>	sig:$r7 = virtualinvoke $r5.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:71
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
D/dalvikvm(17462): GC_FOR_ALLOC freed 66K, 11% free 5578K/6260K, paused 3ms, total 3ms
I/dalvikvm-heap(17462): Grow heap (frag case) to 6.084MB for 608412-byte allocation
D/dalvikvm(17462): GC_FOR_ALLOC freed <1K, 10% free 6172K/6856K, paused 3ms, total 3ms
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b79b90: Failure in SSL library, usually a protocol error
E/GreendotCorp(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17462): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b79b90: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17462): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17462): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17462): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17462): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17462): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17462): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17462): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17462): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17462): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b24630: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 		... 19 more
W/System.err(17462): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b24630: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 		... 18 more
W/System.err(17462): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b79b90: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 	... 18 more
I/System.out(17462): body:<a.a.eo: void a()>	sig:$i0 = virtualinvoke $r5.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:19
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.eo: void a()>	sig:virtualinvoke $r5.<java.net.HttpURLConnection: void disconnect()>()	timediff:1
W/FragmentManager(17462): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a8260e8 #1 id=0x7f0d0139} not updated inline; expected state 3 found 2
D/dalvikvm(17462): GC_FOR_ALLOC freed 160K, 10% free 6204K/6856K, paused 2ms, total 2ms
I/dalvikvm-heap(17462): Grow heap (frag case) to 6.695MB for 608412-byte allocation
D/dalvikvm(17462): GC_FOR_ALLOC freed <1K, 9% free 6797K/7452K, paused 3ms, total 3ms
W/FragmentManager(17462): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a905c28 #2 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14788610, downTime=14788610, deviceId=-1, source=0x101 }
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14788800, downTime=14788800, deviceId=-1, source=0x101 }
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(17462): <com.flurry.sdk.kn: void r()>###specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r1)###https://data.flurry.com/aap.do
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r7 = virtualinvoke $r6.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r1)	timediff:1
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>($z0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoInput(boolean)>(1)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r1, $r13)	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/ActivityManager(  346): Displayed com.gobank/.activity.prelogin.PreLoginWelcomeActivity: +323ms (total +491ms)
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
W/IInputConnectionWrapper(11448): showStatusIcon on inactive InputConnection
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(17462): body:<a.a.b: java.io.OutputStream getOutputStream()>	sig:$r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<a.a.b: java.io.InputStream getInputStream()>	sig:$r4 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<a.a.b: java.net.InetAddress getLocalAddress()>	sig:$r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.net.InetAddress getLocalAddress()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r15 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:118
I/System.out(17462): body:<a.a.b: a.a.ct a(boolean)>	sig:$r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>()	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$i0 = virtualinvoke $r4.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:38
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r19 = virtualinvoke $r4.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>()	timediff:0
I/System.out(17462): body:<a.a.fl: void a(a.a.ct)>	sig:$r6 = virtualinvoke $r5.<java.net.URL: java.lang.String getHost()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r24 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): URLConn;%;1;%;<com.flurry.sdk.kn: void r()>;%;$r24 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://data.flurry.com/aap.do;%;true;%;Not found;%;Not found;%;Not found;%;0;%;Not found
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: int getSoTimeout()>	sig:$i0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: int getSoTimeout()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: int getSoTimeout()>	sig:$i0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: int getSoTimeout()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void t()>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void disconnect()>()	timediff:1
W/InputEventReceiver(17462): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(17462): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(17462): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-1.0, y[0]=3.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=14789068, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14789081, downTime=14789081, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4acc0ee0 attribute=null, token = android.os.BinderProxy@4a9cdcf4
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Exiting the whole application
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] A fresh start of Root Activity
I/ActivityManager(  346): START u0 {flg=0x4000000 cmp=com.gobank/.activity.prelogin.PreLoginWelcomeActivity} from pid 17462
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14789164, downTime=14789164, deviceId=-1, source=0x101 }
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14789164, downTime=14789164, deviceId=-1, source=0x101 }
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14789164, downTime=14789164, deviceId=-1, source=0x101 }
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14789164, downTime=14789164, deviceId=-1, source=0x101 }
D/dalvikvm(11448): GC_FOR_ALLOC freed 4817K, 5% free 138250K/145064K, paused 26ms, total 26ms
D/dalvikvm(17462): GC_CONCURRENT freed 1015K, 14% free 6994K/8072K, paused 2ms+1ms, total 7ms
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
D/dalvikvm(11448): GC_FOR_ALLOC freed 524K, 4% free 141111K/146000K, paused 21ms, total 21ms
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14789131, downTime=14789131, deviceId=-1, source=0x101 }
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:1
D/dalvikvm(11448): GC_FOR_ALLOC freed 316K, 4% free 143966K/148808K, paused 20ms, total 20ms
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:2
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:3
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:4
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:4
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:4
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:7
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:8
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
W/FragmentManager(17462): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4aa5f158 #1 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17462): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4aa5f248 #2 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:2
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:3
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:2
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:2
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:2
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:5
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:1
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: okhttp3.Route nextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:9
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:9
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/ActivityManager(  346): Displayed com.gobank/.activity.prelogin.PreLoginWelcomeActivity: +199ms
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
D/yeshen  (11448): launcher onstop
W/DebugConnManager(11448): getNetworkInfo() on networkType 1
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:9
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:9
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:1
D/FirebaseApp(11448): Notifying background state change listeners.
D/Tinker.DefaultAppLike(11448): onTrimMemory level:20
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bde900: Failure in SSL library, usually a protocol error
E/GreendotCorp(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17462): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bde900: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17462): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17462): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17462): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17462): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17462): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17462): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17462): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17462): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17462): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c0d910: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 		... 19 more
W/System.err(17462): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c0d910: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 		... 18 more
W/System.err(17462): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bde900: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 	... 18 more
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
W/InputEventReceiver(17462): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(17462): Dropping event due to root view being removed: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14789447, downTime=14789447, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4acb0da8 attribute=android.view.inputmethod.EditorInfo@4b12d05c, token = android.os.BinderProxy@4a999e5c
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 1179K, 15% free 7160K/8400K, paused 1ms+2ms, total 8ms
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:9
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:9
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:9
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:9
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:9
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:10
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:10
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:1
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:2
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:2
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:2
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:2
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:2
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Exiting the whole application
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:5
I/System.out(17462): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:3
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:4
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:2
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:2
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:2
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:6
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:4
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:4
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:4
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:4
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: okhttp3.Route nextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:2
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
W/EGL_emulation(17462): eglSurfaceAttrib not implemented 3093 12436
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
V/FlingTracker(  531): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  531): java.lang.Throwable
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  531): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  531): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  531): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  531): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  531): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  531): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  531): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  531): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  531): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  531): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  531): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  531): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  531): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
W/ViewRootImpl(17462): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14789567, downTime=14789567, deviceId=-1, source=0x101 }
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:9
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:10
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:2
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:3
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:5
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:1
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:1
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:11
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:11
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] A fresh start of Root Activity
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:3
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:3
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:3
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:3
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/ActivityManager(  346): START u0 {flg=0x4000000 cmp=com.gobank/.activity.prelogin.PreLoginWelcomeActivity} from pid 17462
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b76e00: Failure in SSL library, usually a protocol error
E/GreendotCorp(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17462): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b76e00: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17462): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17462): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17462): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17462): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17462): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17462): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17462): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17462): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17462): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b76e00: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 		... 19 more
W/System.err(17462): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b76e00: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 		... 18 more
W/System.err(17462): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b76e00: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 	... 18 more
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
I/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:1
I/System.out(17462): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17462): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:4
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 1314K, 16% free 7234K/8608K, paused 2ms+2ms, total 7ms
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:2
I/System.out(17462): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:3
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
D/AndroidRuntime(17462): Shutting down VM
W/dalvikvm(17462): threadid=1: thread exiting with uncaught exception (group=0x94d0db20)
W/System.err(17462): android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@4aa6ae68 is not valid; is your activity running?
W/System.err(17462): 	at android.view.ViewRootImpl.setView(ViewRootImpl.java:539)
W/System.err(17462): 	at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:259)
W/System.err(17462): 	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:69)
W/System.err(17462): 	at android.app.Dialog.show(Dialog.java:286)
W/System.err(17462): 	at com.gobank.extension.HoloDialog.a(SourceFile:141)
W/System.err(17462): 	at com.gobank.extension.HoloDialog.a(SourceFile:85)
W/System.err(17462): 	at com.gobank.util.LptNetworkErrorMessage.b(SourceFile:1263)
W/System.err(17462): 	at com.gobank.activity.prelogin.PreLoginWelcomeActivity$5.run(SourceFile:1359)
W/System.err(17462): 	at android.os.Handler.handleCallback(Handler.java:733)
W/System.err(17462): 	at android.os.Handler.dispatchMessage(Handler.java:95)
W/System.err(17462): 	at android.os.Looper.loop(Looper.java:136)
W/System.err(17462): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
W/System.err(17462): 	at java.lang.reflect.Method.invokeNative(Native Method)
W/System.err(17462): 	at java.lang.reflect.Method.invoke(Method.java:515)
W/System.err(17462): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
W/System.err(17462): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
W/System.err(17462): 	at dalvik.system.NativeStart.main(Native Method)
W/WindowManager(  346): Attempted to add application window with unknown token Token{4a92d938 ActivityRecord{4ad40d6c u0 com.gobank/.activity.prelogin.PreLoginWelcomeActivity t298 f}}.  Aborting.
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:4
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:13
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:13
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:17
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:1
I/System.out(17462): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:2
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:1
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:3
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17462): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17462): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:10
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:10
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:1
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: okhttp3.Route nextPostponed()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:11
I/System.out(17462): <com.flurry.sdk.kn: void r()>###specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r1)###https://data.flurry.com/aap.do
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r7 = virtualinvoke $r6.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>($z0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoInput(boolean)>(1)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r1, $r13)	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: int getSoTimeout()>	sig:$i0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: int getSoTimeout()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:1
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r15 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:11
I/System.out(17462): body:<a.a.b: a.a.ct a(boolean)>	sig:$r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>()	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:11
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:11
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:2
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:2
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:2
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:3
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:1
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:1
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:6
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:6
I/System.out(17462): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17462): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:1
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17462): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
W/DebugConnManager(17462): getNetworkInfo() on networkType 0
I/System.out(17462): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:1
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
W/DebugConnManager(17462): getNetworkInfo() on networkType 1
D/dalvikvm(17462): GC_CONCURRENT freed 1318K, 16% free 7401K/8780K, paused 0ms+1ms, total 8ms
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17462): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17462): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17462): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:1
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:1
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17462): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17462): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17462): fid:31c1dfa2-dd7e-4231-85de-c11cec3ce75c[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bea2d0: Failure in SSL library, usually a protocol error
E/GreendotCorp(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17462): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bea2d0: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17462): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17462): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17462): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17462): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17462): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17462): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17462): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17462): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17462): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17462): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17462): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17462): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17462): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bea2a0: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 		... 19 more
W/System.err(17462): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bea2a0: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
D/dalvikvm(17462): GC_FOR_ALLOC freed 321K, 16% free 7542K/8928K, paused 4ms, total 4ms
W/System.err(17462): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 		... 18 more
W/System.err(17462): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bea2d0: Failure in SSL library, usually a protocol error
W/System.err(17462): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17462): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17462): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17462): 	... 18 more
I/System.out(17462): body:<a.a.eg: java.net.URL a()>	sig:specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)	timediff:0
I/System.out(17462): <a.a.eg: java.net.URL a()>###specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)###https://api.crittercism.com/android_v2/handle_crashes
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$i0 = virtualinvoke $r4.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:85
I/System.out(17462): body:<a.a.fl: void a(a.a.ct)>	sig:$r6 = virtualinvoke $r5.<java.net.URL: java.lang.String getHost()>()	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r19 = virtualinvoke $r4.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>()	timediff:1
I/System.out(17462): body:<com.flurry.sdk.kn: void r()>	sig:$r24 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): URLConn;%;2;%;<com.flurry.sdk.kn: void r()>;%;$r24 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://data.flurry.com/aap.do;%;true;%;Not found;%;Not found;%;Not found;%;0;%;Not found
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: int getSoTimeout()>	sig:$i0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: int getSoTimeout()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: int getSoTimeout()>	sig:$i0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: int getSoTimeout()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:1
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:1
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<com.flurry.sdk.kn: void t()>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
D/dalvikvm(17462): GC_CONCURRENT freed 1536K, 18% free 7474K/9068K, paused 2ms+1ms, total 7ms
D/dalvikvm(17462): GC_CONCURRENT freed 1493K, 18% free 7518K/9076K, paused 0ms+0ms, total 6ms
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:$r3 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoInput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>($z0)	timediff:0
I/System.out(17462): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r12)	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17462): body:<a.a.eo: void a()>	sig:$r7 = virtualinvoke $r5.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:11
D/dalvikvm(17462): GC_FOR_ALLOC freed 985K, 16% free 7690K/9152K, paused 4ms, total 4ms
I/System.out(17462): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17462): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17462): body:<a.a.eo: void a()>	sig:$i0 = virtualinvoke $r5.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:27
I/System.out(17462): body:<a.a.eo: void a()>	sig:$r9 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17462): URLConn;%;3;%;<a.a.eo: void a()>;%;$r9 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>();%;https://api.crittercism.com/android_v2/handle_crashes;%;true;%;0;%;Not found;%;Not found;%;Not found;%;crittercism.did=2845bd72-a0e2-47e3-8fe9-ec59c8e029b9;Max-Age=2147483647;Path="/";Version=1
I/System.out(17462): body:<a.a.eo: void a()>	sig:virtualinvoke $r5.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
I/Process (  346): Sending signal. PID: 17462 SIG: 9
E/AndroidRuntime(17462): FATAL EXCEPTION: main
E/AndroidRuntime(17462): Process: com.gobank, PID: 17462
E/AndroidRuntime(17462): android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@4aa6ae68 is not valid; is your activity running?
E/AndroidRuntime(17462): 	at android.view.ViewRootImpl.setView(ViewRootImpl.java:539)
E/AndroidRuntime(17462): 	at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:259)
E/AndroidRuntime(17462): 	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:69)
E/AndroidRuntime(17462): 	at android.app.Dialog.show(Dialog.java:286)
E/AndroidRuntime(17462): 	at com.gobank.extension.HoloDialog.a(SourceFile:141)
E/AndroidRuntime(17462): 	at com.gobank.extension.HoloDialog.a(SourceFile:85)
E/AndroidRuntime(17462): 	at com.gobank.util.LptNetworkErrorMessage.b(SourceFile:1263)
E/AndroidRuntime(17462): 	at com.gobank.activity.prelogin.PreLoginWelcomeActivity$5.run(SourceFile:1359)
E/AndroidRuntime(17462): 	at android.os.Handler.handleCallback(Handler.java:733)
E/AndroidRuntime(17462): 	at android.os.Handler.dispatchMessage(Handler.java:95)
E/AndroidRuntime(17462): 	at android.os.Looper.loop(Looper.java:136)
E/AndroidRuntime(17462): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
E/AndroidRuntime(17462): 	at java.lang.reflect.Method.invokeNative(Native Method)
E/AndroidRuntime(17462): 	at java.lang.reflect.Method.invoke(Method.java:515)
E/AndroidRuntime(17462): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
E/AndroidRuntime(17462): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
E/AndroidRuntime(17462): 	at dalvik.system.NativeStart.main(Native Method)
W/ActivityManager(  346): Force-killing crashed app com.gobank at watcher's request
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.am.ActivityManagerService.handleApplicationCrashInner:9670 com.android.server.am.ActivityManagerService.handleApplicationCrash:9644 android.app.ActivityManagerNative.onTransact:1311 com.android.server.am.ActivityManagerService.onTransact:2071 
W/NetworkManagementSocketTagger(  346): setKernelCountSet(10128, 0) failed with errno -13
W/InputDispatcher(  346): channel '4b4b03f0 com.gobank/com.gobank.activity.prelogin.PreLoginWelcomeActivity (server)' ~ Consumer closed input channel or an error occurred.  events=0x9
E/InputDispatcher(  346): channel '4b4b03f0 com.gobank/com.gobank.activity.prelogin.PreLoginWelcomeActivity (server)' ~ Channel is unrecoverably broken and will be disposed!
W/InputDispatcher(  346): Attempted to unregister already unregistered input channel '4b4b03f0 com.gobank/com.gobank.activity.prelogin.PreLoginWelcomeActivity (server)'
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/WindowState(  346): WIN DEATH: Window{4ac46ccc u0 com.gobank/com.gobank.activity.prelogin.PreLoginWelcomeActivity EXITING}
I/ActivityManager(  346): Process com.gobank (pid 17462) has died.
W/ActivityManager(  346): Force removing ActivityRecord{4abab150 u0 com.gobank/.activity.prelogin.PreLoginWelcomeActivity t298}: app died, no saved state
I/WindowState(  346): WIN DEATH: Window{4ad10164 u0 com.gobank/com.gobank.activity.RootActivity}
I/WindowState(  346): WIN DEATH: Window{4a975138 u0 com.gobank/com.gobank.activity.prelogin.PreLoginWelcomeActivity}
I/WindowState(  346): WIN DEATH: Window{4b4b03f0 u0 com.gobank/com.gobank.activity.prelogin.PreLoginWelcomeActivity}
W/ActivityManager(  346): Force removing ActivityRecord{4ab9c188 u0 com.gobank/.activity.RootActivity t298}: app died, no saved state
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
D/FirebaseApp(11448): Notifying background state change listeners.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/Launcher(11448): setApplicationContext called twice! old=com.vphone.launcher.LauncherApplicationEx@4a7e86e8 new=com.vphone.launcher.LauncherApplicationEx@4a7e86e8
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/ResourceType(11448): Attempt to retrieve bag 0x7f0b0001 which is invalid or in a cycle.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
D/Launcher(11448): 11683562 - bindAddScreens()
D/Launcher(11448): 11683562 -   orderedScreenIds: 1
D/Launcher.Workspace(11448): 11683562 - insertNewWorkspaceScreen(): 1 at index: 0
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.android.contacts/.activities.PeopleActivity sel={act=android.intent.action.MAIN cat=[android.intent.category.APP_CONTACTS]}} from pid 346
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
V/FlingTracker(  531): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  531): java.lang.Throwable
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  531): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  531): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  531): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  531): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  531): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  531): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  531): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  531): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  531): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  531): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  531): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  531): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  531): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
D/dalvikvm(11448): GC_FOR_ALLOC freed 1827K, 3% free 148580K/152204K, paused 29ms, total 29ms
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/ContextImpl(11448): Calling a method in the system process without a qualified user: android.app.ContextImpl.startService:1492 android.content.ContextWrapper.startService:494 com.vphone.launcher.Launcher.i:690 com.vphone.launcher.Launcher.b:182 com.vphone.launcher.Launcher$11.run:650 
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
I/InputDispatcher(  346): Dropping event because there is no focused window or focused application.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
D/Sensors (  346): Client connection accepted (209)
W/EGL_emulation(11448): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(11448): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790090, downTime=14790090, deviceId=-1, source=0x101 }
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/Binder  (  631): Caught a RuntimeException from the binder stub implementation.
W/Binder  (  631): java.lang.NullPointerException
W/Binder  (  631): 	at android.inputmethodservice.IInputMethodWrapper.setSessionEnabled(IInputMethodWrapper.java:280)
W/Binder  (  631): 	at com.android.internal.view.IInputMethod$Stub.onTransact(IInputMethod.java:129)
W/Binder  (  631): 	at android.os.Binder.execTransact(Binder.java:404)
W/Binder  (  631): 	at dalvik.system.NativeStart.run(Native Method)
W/InputMethodManagerService(  346): Got RemoteException sending setActive(false) notification to pid 17462 uid 10128
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
D/yeshen  (11448): launcher onpause
I/ActivityManager(  346): Start proc com.gobank for activity com.gobank/.activity.RootActivity: pid=17525 uid=10128 gids={50128, 3003, 1028, 1015, 1023}
W/NetworkManagementSocketTagger(  346): setKernelCountSet(10128, 1) failed with errno -13
I/dalvikvm(17525): ignoring registerObject request in thread=1
I/dalvikvm(17525): ignoring registerObject request in thread=1
D/dalvikvm(17525): JIT code cache reset in 0 ms (0 bytes 1/0)
D/dalvikvm(17525): GC_CONCURRENT freed 209K, 9% free 2985K/3260K, paused 0ms+1ms, total 2ms
I/System.out(17525): body:<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>	sig:specialinvoke $r11.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r4, $r5, $r7)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void <clinit>()>	sig:$r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("application/json; charset=utf-8")	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r3.<okhttp3.Dispatcher: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_0", 0, "http/1.0")	timediff:0
I/System.out(17525): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_1", 1, "http/1.1")	timediff:0
I/System.out(17525): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("SPDY_3", 2, "spdy/3.1")	timediff:0
I/System.out(17525): body:<okhttp3.Protocol: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_2", 3, "h2")	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_MD5", 0, "SSL_RSA_WITH_NULL_MD5", 1, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA", 1, "SSL_RSA_WITH_NULL_SHA", 2, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_RC4_40_MD5", 2, "SSL_RSA_EXPORT_WITH_RC4_40_MD5", 3, 4346, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_MD5", 3, "SSL_RSA_WITH_RC4_128_MD5", 4, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_RC4_128_SHA", 4, "SSL_RSA_WITH_RC4_128_SHA", 5, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", 5, "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", 8, 4346, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_DES_CBC_SHA", 6, "SSL_RSA_WITH_DES_CBC_SHA", 9, 5469, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_3DES_EDE_CBC_SHA", 7, "SSL_RSA_WITH_3DES_EDE_CBC_SHA", 10, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 8, "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", 17, 4346, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_DES_CBC_SHA", 9, "SSL_DHE_DSS_WITH_DES_CBC_SHA", 18, 5469, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 10, "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 19, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 11, "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", 20, 4346, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_DES_CBC_SHA", 12, "SSL_DHE_RSA_WITH_DES_CBC_SHA", 21, 5469, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 13, "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 22, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_RC4_40_MD5", 14, "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 23, 4346, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_RC4_128_MD5", 15, "SSL_DH_anon_WITH_RC4_128_MD5", 24, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 16, "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 25, 4346, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_DES_CBC_SHA", 17, "SSL_DH_anon_WITH_DES_CBC_SHA", 26, 5469, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_3DES_EDE_CBC_SHA", 18, "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", 27, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_SHA", 19, "TLS_KRB5_WITH_DES_CBC_SHA", 30, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 20, "TLS_KRB5_WITH_3DES_EDE_CBC_SHA", 31, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_SHA", 21, "TLS_KRB5_WITH_RC4_128_SHA", 32, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_DES_CBC_MD5", 22, "TLS_KRB5_WITH_DES_CBC_MD5", 34, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 23, "TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 35, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_WITH_RC4_128_MD5", 24, "TLS_KRB5_WITH_RC4_128_MD5", 36, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 25, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 38, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 26, "TLS_KRB5_EXPORT_WITH_RC4_40_SHA", 40, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 27, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", 41, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 28, "TLS_KRB5_EXPORT_WITH_RC4_40_MD5", 43, 2712, 6, 2147483647)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA", 29, "TLS_RSA_WITH_AES_128_CBC_SHA", 47, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 30, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", 50, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 31, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 51, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA", 32, "TLS_DH_anon_WITH_AES_128_CBC_SHA", 52, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA", 33, "TLS_RSA_WITH_AES_256_CBC_SHA", 53, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 34, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", 56, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 35, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", 57, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA", 36, "TLS_DH_anon_WITH_AES_256_CBC_SHA", 58, 5246, 6, 10)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_NULL_SHA256", 37, "TLS_RSA_WITH_NULL_SHA256", 59, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_CBC_SHA256", 38, "TLS_RSA_WITH_AES_128_CBC_SHA256", 60, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_CBC_SHA256", 39, "TLS_RSA_WITH_AES_256_CBC_SHA256", 61, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 40, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 64, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 41, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", 103, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 42, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 106, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 43, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", 107, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_CBC_SHA256", 44, "TLS_DH_anon_WITH_AES_128_CBC_SHA256", 108, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_CBC_SHA256", 45, "TLS_DH_anon_WITH_AES_256_CBC_SHA256", 109, 5246, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_128_GCM_SHA256", 46, "TLS_RSA_WITH_AES_128_GCM_SHA256", 156, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_RSA_WITH_AES_256_GCM_SHA384", 47, "TLS_RSA_WITH_AES_256_GCM_SHA384", 157, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 48, "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", 158, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 49, "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", 159, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 50, "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", 162, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 51, "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 163, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_128_GCM_SHA256", 52, "TLS_DH_anon_WITH_AES_128_GCM_SHA256", 166, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_DH_anon_WITH_AES_256_GCM_SHA384", 53, "TLS_DH_anon_WITH_AES_256_GCM_SHA384", 167, 5288, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 54, "TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 255, 5746, 6, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_NULL_SHA", 55, "TLS_ECDH_ECDSA_WITH_NULL_SHA", 49153, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 56, "TLS_ECDH_ECDSA_WITH_RC4_128_SHA", 49154, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 57, "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", 49155, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 58, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 49156, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 59, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", 49157, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_NULL_SHA", 60, "TLS_ECDHE_ECDSA_WITH_NULL_SHA", 49158, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 61, "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", 49159, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 62, "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 49160, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 63, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 49161, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 64, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", 49162, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_NULL_SHA", 65, "TLS_ECDH_RSA_WITH_NULL_SHA", 49163, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_RC4_128_SHA", 66, "TLS_ECDH_RSA_WITH_RC4_128_SHA", 49164, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 67, "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", 49165, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 68, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", 49166, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 69, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 49167, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_NULL_SHA", 70, "TLS_ECDHE_RSA_WITH_NULL_SHA", 49168, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_RC4_128_SHA", 71, "TLS_ECDHE_RSA_WITH_RC4_128_SHA", 49169, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 72, "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", 49170, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 73, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 49171, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 74, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", 49172, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_NULL_SHA", 75, "TLS_ECDH_anon_WITH_NULL_SHA", 49173, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_RC4_128_SHA", 76, "TLS_ECDH_anon_WITH_RC4_128_SHA", 49174, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 77, "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 49175, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 78, "TLS_ECDH_anon_WITH_AES_128_CBC_SHA", 49176, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 79, "TLS_ECDH_anon_WITH_AES_256_CBC_SHA", 49177, 4492, 7, 14)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 80, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", 49187, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 81, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 49188, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 82, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", 49189, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 83, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", 49190, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 84, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", 49191, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 85, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", 49192, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 86, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 49193, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 87, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", 49194, 5289, 7, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 88, "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 49195, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 89, "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", 49196, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 90, "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", 49197, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 91, "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", 49198, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 92, "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", 49199, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 93, "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 49200, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 94, "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 49201, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.CipherSuite: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CipherSuite: void <init>(java.lang.String,int,java.lang.String,int,int,int,int)>("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 95, "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", 49202, 5289, 8, 21)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_2", 0, "TLSv1.2")	timediff:0
I/System.out(17525): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_1", 1, "TLSv1.1")	timediff:0
I/System.out(17525): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_0", 2, "TLSv1")	timediff:0
I/System.out(17525): body:<okhttp3.TlsVersion: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("SSL_3_0", 3, "SSLv3")	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>	sig:$r0 = virtualinvoke $r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r1 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <clinit>()>	sig:$r5 = virtualinvoke $r1.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.Internal: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <clinit>()>	sig:specialinvoke $r5.<okhttp3.OkHttpClient$1: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$000()>()	timediff:3
I/System.out(17525): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r2 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$100()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:$r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>()	timediff:0
I/System.out(17525): body:<okhttp3.CookieJar: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CookieJar$1: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.tls.OkHostnameVerifier: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CertificatePinner$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.CertificatePinner$Builder: java.util.List access$000(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r3 = staticinvoke <okhttp3.CertificatePinner$Builder: okhttp3.internal.tls.TrustRootIndex access$100(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>	sig:specialinvoke $r0.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <clinit>()>	sig:$r1 = virtualinvoke $r0.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Authenticator: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Authenticator$1: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>	sig:specialinvoke $r1.<okhttp3.internal.Util$1: void <init>(java.lang.String,boolean)>($r0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionPool: void <clinit>()>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp ConnectionPool", 1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r2.<okhttp3.ConnectionPool$1: void <init>(okhttp3.ConnectionPool)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>	sig:specialinvoke $r5.<okhttp3.internal.RouteDatabase: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionPool: void <init>()>	sig:specialinvoke $r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$Builder: void <init>()>	sig:specialinvoke $r10.<okhttp3.ConnectionPool: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Dns: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.Dns$1: void <init>()>()	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:specialinvoke $r5.<okhttp3.OkHttpClient$Builder: void <init>()>()	timediff:6
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:$r5 = virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(5L, $r3)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:$r5 = virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(90L, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$z1 = virtualinvoke $r12.<okhttp3.ConnectionSpec: boolean isTls()>()	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 315K, 11% free 3131K/3512K, paused 1ms+1ms, total 5ms
D/dalvikvm(17525): WAIT_FOR_CONCURRENT_GC blocked 1ms
I/System.out(17525): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:specialinvoke $r1.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:specialinvoke $r4.<okhttp3.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>	sig:specialinvoke $r0.<okhttp3.internal.Platform: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>	sig:specialinvoke $r7.<okhttp3.internal.Platform$Android: void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod)>($r0, $r1, $r4, $r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.internal.Platform: void <clinit>()>	sig:$r0 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform findPlatform()>()	timediff:1
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r15 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.Platform$Android: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r3 = staticinvoke <okhttp3.internal.Platform$Android: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r1, $r2, "sslParameters")	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r0, class "java/lang/Object", "delegate")	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform$Android: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r3, class "javax/net/ssl/X509TrustManager", "x509TrustManager")	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform$Android: java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String)>($r3, class "javax/net/ssl/X509TrustManager", "trustManager")	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r16 = virtualinvoke $r15.<okhttp3.internal.Platform: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r13)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r15 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.tls.AndroidTrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager)>	sig:specialinvoke $r4.<okhttp3.internal.tls.AndroidTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)>($r0, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: okhttp3.internal.tls.TrustRootIndex trustRootIndex(javax.net.ssl.X509TrustManager)>	sig:$r2 = staticinvoke <okhttp3.internal.tls.AndroidTrustRootIndex: okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r14 = virtualinvoke $r15.<okhttp3.internal.Platform: okhttp3.internal.tls.TrustRootIndex trustRootIndex(javax.net.ssl.X509TrustManager)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner$Builder: void <init>(okhttp3.CertificatePinner)>	sig:$r3 = staticinvoke <okhttp3.CertificatePinner: java.util.List access$200(okhttp3.CertificatePinner)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner$Builder: void <init>(okhttp3.CertificatePinner)>	sig:$r5 = staticinvoke <okhttp3.CertificatePinner: okhttp3.internal.tls.TrustRootIndex access$300(okhttp3.CertificatePinner)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: okhttp3.CertificatePinner$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner$Builder: void <init>(okhttp3.CertificatePinner)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r25 = virtualinvoke $r24.<okhttp3.CertificatePinner: okhttp3.CertificatePinner$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r25 = virtualinvoke $r25.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner$Builder trustRootIndex(okhttp3.internal.tls.TrustRootIndex)>($r14)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.CertificatePinner$Builder: java.util.List access$000(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>	sig:$r3 = staticinvoke <okhttp3.CertificatePinner$Builder: okhttp3.internal.tls.TrustRootIndex access$100(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>	sig:specialinvoke $r0.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>	sig:specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(okhttp3.CertificatePinner$Builder,okhttp3.CertificatePinner$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>	sig:$r24 = virtualinvoke $r25.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>	sig:specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1)	timediff:14
I/System.out(17525): body:<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>	sig:specialinvoke $r1.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1)>($r0, null)	timediff:14
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void <init>(java.lang.String,com.gobank.data.UserState)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>()	timediff:14
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.lang.String)>	sig:specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.lang.String)>	sig:specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>($r1)	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 206K, 8% free 3310K/3592K, paused 1ms+0ms, total 3ms
I/Crittercism(17525): Initializing Crittercism 5.0.6 for App ID 515f4eb3c463c27a59000002
I/System.out(17525): body:<a.a.ac: void a(android.content.Context,java.lang.String,com.crittercism.app.CrittercismConfig)>	sig:specialinvoke $r16.<java.net.URL: void <init>(java.lang.String)>($r6)	timediff:0
I/System.out(17525): <a.a.ac: void a(android.content.Context,java.lang.String,com.crittercism.app.CrittercismConfig)>###specialinvoke $r16.<java.net.URL: void <init>(java.lang.String)>($r6)###https://apm.crittercism.com/api/apm/network
I/System.out(17525): body:<a.a.fn: void <clinit>()>	sig:specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.google.com")	timediff:0
I/System.out(17525): <a.a.fn: void <clinit>()>###specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>("https://www.google.com")###https://www.google.com
I/System.out(17525): body:<a.a.e: void <init>()>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.fn: boolean g()>	sig:specialinvoke $r6.<java.net.Socket: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.fn: boolean g()>	sig:staticinvoke <java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>($r11)	timediff:0
E/FlurryAgent(17525): Listener cannot be null
D/dalvikvm(17525): GC_CONCURRENT freed 376K, 11% free 3460K/3884K, paused 1ms+3ms, total 7ms
I/dalvikvm(17525): Could not find method android.content.pm.PackageManager.getPackageInstaller, referenced from method com.google.android.gms.common.zze.zzl
W/dalvikvm(17525): VFY: unable to resolve virtual method 1600: Landroid/content/pm/PackageManager;.getPackageInstaller ()Landroid/content/pm/PackageInstaller;
D/dalvikvm(17525): VFY: replacing opcode 0x6e at 0x001a
I/dalvikvm(17525): Could not find method android.app.Notification$Builder.setLocalOnly, referenced from method com.google.android.gms.common.GooglePlayServicesUtil.zza
W/dalvikvm(17525): VFY: unable to resolve virtual method 1338: Landroid/app/Notification$Builder;.setLocalOnly (Z)Landroid/app/Notification$Builder;
D/dalvikvm(17525): VFY: replacing opcode 0x6e at 0x00fb
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] A fresh start of Root Activity
I/ActivityManager(  346): START u0 {flg=0x4000000 cmp=com.gobank/.activity.prelogin.PreLoginWelcomeActivity} from pid 17525
D/dalvikvm(17525): GC_CONCURRENT freed 340K, 10% free 3521K/3908K, paused 0ms+2ms, total 4ms
I/System.out(17525): body:<a.a.eg: java.net.URL a()>	sig:specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)	timediff:0
I/System.out(17525): <a.a.eg: java.net.URL a()>###specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)###https://appload.ingest.crittercism.com/v0/appload/
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:$r3 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:1
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r12, $r11)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoInput(boolean)>($z0)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>($z0)	timediff:0
I/System.out(17525): body:<a.a.eh: java.net.HttpURLConnection a()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r12)	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 290K, 9% free 3719K/4076K, paused 1ms+2ms, total 6ms
D/dalvikvm(17525): WAIT_FOR_CONCURRENT_GC blocked 1ms
I/dalvikvm-heap(17525): Grow heap (frag case) to 4.296MB for 635808-byte allocation
D/dalvikvm(17525): GC_FOR_ALLOC freed 45K, 9% free 4296K/4700K, paused 3ms, total 3ms
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 36K, 8% free 4324K/4700K, paused 0ms+2ms, total 8ms
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
D/dalvikvm(17525): GC_FOR_ALLOC freed 64K, 7% free 4506K/4812K, paused 4ms, total 4ms
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790194, downTime=14790194, deviceId=-1, source=0x101 }
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 256K, 7% free 4811K/5128K, paused 2ms+4ms, total 16ms
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:5
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("SUCCESS", 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("MISSING_SCHEME", 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("UNSUPPORTED_SCHEME", 2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_PORT", 3)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r1)	timediff:0
I/System.out(17525): <com.flurry.sdk.kn: void r()>###specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r1)###https://data.flurry.com/aap.do
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:$r7 = virtualinvoke $r6.<java.net.URL: java.net.URLConnection openConnection()>()	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>($z0)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>($z0)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void setDoInput(boolean)>(1)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:virtualinvoke $r4.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r1, $r13)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder$ParseResult: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_HOST", 4)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:2
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:3
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:4
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:4
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:4
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:15
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:15
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
D/dalvikvm(17525): GC_CONCURRENT freed 626K, 13% free 4862K/5548K, paused 0ms+1ms, total 4ms
D/dalvikvm(17525): WAIT_FOR_CONCURRENT_GC blocked 3ms
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:4
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:4
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:4
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.ResponseBody: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.http.HttpEngine$1: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(17525): body:<a.a.eo: void a()>	sig:$r7 = virtualinvoke $r5.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:92
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:4
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:4
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:4
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:4
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:5
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:6
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder noCache()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.CacheControl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder onlyIfCached()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r0 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit)>(2147483647, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>	sig:specialinvoke $r0.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>	sig:specialinvoke $r1.<okhttp3.CacheControl: void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: void <clinit>()>	sig:$r2 = virtualinvoke $r0.<okhttp3.CacheControl$Builder: okhttp3.CacheControl build()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.framed.FramedConnection$Listener: void <clinit>()>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener$1: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionPool: long cleanup(long)>	sig:$i5 = specialinvoke $r0.<okhttp3.ConnectionPool: int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long)>($r5, $l0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionPool$1: void run()>	sig:$l1 = virtualinvoke $r1.<okhttp3.ConnectionPool: long cleanup(long)>($l0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:8
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:8
W/dalvikvm(17525): VFY: unable to find class referenced in signature (Ljava/nio/file/Path;)
W/dalvikvm(17525): VFY: unable to find class referenced in signature ([Ljava/nio/file/OpenOption;)
I/dalvikvm(17525): Could not find method java.nio.file.Files.newOutputStream, referenced from method okio.Okio.sink
W/dalvikvm(17525): VFY: unable to resolve static method 42995: Ljava/nio/file/Files;.newOutputStream (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;
D/dalvikvm(17525): VFY: replacing opcode 0x71 at 0x000a
W/dalvikvm(17525): VFY: unable to find class referenced in signature (Ljava/nio/file/Path;)
W/dalvikvm(17525): VFY: unable to find class referenced in signature ([Ljava/nio/file/OpenOption;)
I/dalvikvm(17525): Could not find method java.nio.file.Files.newInputStream, referenced from method okio.Okio.source
W/dalvikvm(17525): VFY: unable to resolve static method 42994: Ljava/nio/file/Files;.newInputStream (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;
D/dalvikvm(17525): VFY: replacing opcode 0x71 at 0x000a
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 494K, 12% free 4935K/5548K, paused 1ms+0ms, total 4ms
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:1
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:1
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
D/libEGL  (17525): loaded /system/lib/egl/libEGL_adreno.so
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.eo: void a()>	sig:$i0 = virtualinvoke $r5.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:37
I/System.out(17525): body:<a.a.eo: void a()>	sig:$r9 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): URLConn;%;0;%;<a.a.eo: void a()>;%;$r9 = virtualinvoke $r5.<java.net.URLConnection: java.io.InputStream getInputStream()>();%;https://appload.ingest.crittercism.com/v0/appload/;%;true;%;371;%;Not found;%;Not found;%;Not found;%;Not found
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:1
I/System.out(17525): body:<a.a.eo: void a()>	sig:virtualinvoke $r5.<java.net.HttpURLConnection: void disconnect()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
D/        (17525): HostConnection::get() New Host Connection established 0xb7b12370, tid 17525
D/libEGL  (17525): loaded /system/lib/egl/libGLESv1_CM_adreno.so
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:8
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:8
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
D/libEGL  (17525): loaded /system/lib/egl/libGLESv2_adreno.so
I/ActivityManager(  346): START u0 {act=com.android.systemui.recent.action.TOGGLE_RECENTS flg=0x10800000 cmp=com.android.systemui/.recent.RecentsActivity (has extras)} from pid 531
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:3
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b0f5a0: Failure in SSL library, usually a protocol error
E/GreendotCorp(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17525): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b0f5a0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17525): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17525): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17525): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17525): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17525): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17525): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17525): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17525): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17525): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b0f5a0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		... 19 more
W/System.err(17525): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b0f5a0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 		... 18 more
W/System.err(17525): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b0f5a0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 	... 18 more
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
D/OpenGLRenderer(17525): Enabling debug mode 0
D/dalvikvm(17525): GC_CONCURRENT freed 526K, 11% free 5009K/5592K, paused 1ms+3ms, total 6ms
D/dalvikvm(17525): GC_FOR_ALLOC freed 158K, 11% free 5011K/5592K, paused 8ms, total 8ms
I/dalvikvm-heap(17525): Grow heap (frag case) to 5.531MB for 608412-byte allocation
D/dalvikvm(17525): GC_FOR_ALLOC freed <1K, 10% free 5604K/6188K, paused 4ms, total 4ms
D/dalvikvm(17525): GC_FOR_ALLOC freed 77K, 10% free 5598K/6188K, paused 4ms, total 4ms
I/dalvikvm-heap(17525): Grow heap (frag case) to 6.103MB for 608412-byte allocation
D/dalvikvm(17525): GC_FOR_ALLOC freed <1K, 9% free 6191K/6784K, paused 3ms, total 3ms
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a9072d0 #1 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a8f9fa4 #2 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/System.out(17525): body:<a.a.b: java.io.OutputStream getOutputStream()>	sig:$r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<a.a.b: java.io.InputStream getInputStream()>	sig:$r4 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<a.a.b: java.net.InetAddress getLocalAddress()>	sig:$r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.net.InetAddress getLocalAddress()>()	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:$r15 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()	timediff:149
I/System.out(17525): body:<a.a.b: a.a.ct a(boolean)>	sig:$r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>()	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:$i0 = virtualinvoke $r4.<java.net.HttpURLConnection: int getResponseCode()>()	timediff:78
I/System.out(17525): body:<a.a.fl: void a(a.a.ct)>	sig:$r6 = virtualinvoke $r5.<java.net.URL: java.lang.String getHost()>()	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:$r19 = virtualinvoke $r4.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>()	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void r()>	sig:$r24 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:$r0 = virtualinvoke urlConnection.<java.net.URLConnection: java.net.URL getURL()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:urlString = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: void printURLInfo(java.lang.String,java.lang.String,java.net.URLConnection)>	sig:isDoOutput = virtualinvoke urlConnection.<java.net.URLConnection: boolean getDoOutput()>()	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): body:<empirical.HelperClass: java.lang.String getHeaderField(java.net.URLConnection,java.lang.String)>	sig:data = virtualinvoke conn.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(field)	timediff:0
I/System.out(17525): URLConn;%;1;%;<com.flurry.sdk.kn: void r()>;%;$r24 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();%;https://data.flurry.com/aap.do;%;true;%;Not found;%;Not found;%;Not found;%;0;%;Not found
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.b: int getSoTimeout()>	sig:$i0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: int getSoTimeout()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:1
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.b: int getSoTimeout()>	sig:$i0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: int getSoTimeout()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17525): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17525): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17525): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<a.a.b: boolean isClosed()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isClosed()>()	timediff:0
I/System.out(17525): body:<a.a.b: boolean isInputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isInputShutdown()>()	timediff:0
I/System.out(17525): body:<a.a.b: boolean isOutputShutdown()>	sig:$z0 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: boolean isOutputShutdown()>()	timediff:0
I/System.out(17525): body:<a.a.b: void setSoTimeout(int)>	sig:virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>($i0)	timediff:0
I/System.out(17525): body:<com.flurry.sdk.kn: void t()>	sig:virtualinvoke $r1.<java.net.HttpURLConnection: void disconnect()>()	timediff:1
I/ActivityManager(  346): Displayed com.gobank/.activity.prelogin.PreLoginWelcomeActivity: +320ms (total +1s30ms)
D/dalvikvm(17525): GC_FOR_ALLOC freed 220K, 7% free 6872K/7380K, paused 7ms, total 7ms
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790665, downTime=14790665, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_BACK, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790676, downTime=14790676, deviceId=-1, source=0x101 }
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_2, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790707, downTime=14790707, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790707, downTime=14790707, deviceId=-1, source=0x101 }
W/InputMethodManager(17525): Ignoring onBind: cur seq=5423, given seq=5422
D/yeshen  (11448): launcher onstop
W/DebugConnManager(11448): getNetworkInfo() on networkType 1
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(17525): Dropping event due to root view being removed: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MEDIA_PLAY_PAUSE, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790809, downTime=14790809, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ab3a06c attribute=null, token = android.os.BinderProxy@4ab31a20
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:2
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_ADD, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790864, downTime=14790864, deviceId=-1, source=0x101 }
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:2
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:2
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:1
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a92ce54 #3 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
D/dalvikvm(17525): GC_FOR_ALLOC freed 405K, 6% free 7622K/8088K, paused 4ms, total 4ms
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:8
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:9
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:9
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4aa6f510 #4 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:9
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a8633d0 #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:2
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:14
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: okhttp3.Route nextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:2
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:8
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:8
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:2
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:2
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:3
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:5
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 334K, 5% free 8834K/9280K, paused 1ms+1ms, total 6ms
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:2
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:2
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:2
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:2
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:1
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/InputDispatcher(  346): Dropped event because of pending overdue app switch.
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
W/InputManager(  346): Input event injection from pid 17452 failed.
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:9
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:9
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14790867, downTime=14790867, deviceId=-1, source=0x101 }
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b95f10: Failure in SSL library, usually a protocol error
E/GreendotCorp(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17525): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b95f10: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
I/WearableService(  643): Wearable Services stopping
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17525): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17525): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17525): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17525): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17525): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17525): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17525): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17525): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17525): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b09e30: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		... 19 more
W/System.err(17525): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b09e30: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 		... 18 more
W/System.err(17525): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b95f10: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 	... 18 more
D/dalvikvm(  346): GC_CONCURRENT freed 4781K, 63% free 13259K/35136K, paused 0ms+3ms, total 24ms
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_YEN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791003, downTime=14791003, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ae4c3bc attribute=android.view.inputmethod.EditorInfo@4b5d0548, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791011, downTime=14791011, deviceId=-1, source=0x101 }
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ad4d808 attribute=null, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4aa6ca80 #5 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab075b4 #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:1
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17525): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:1
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:1
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791211, downTime=14791211, deviceId=-1, source=0x101 }
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:2
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:2
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:2
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:5
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:6
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:7
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:2
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: okhttp3.Route nextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:9
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:9
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:1
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:2
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:1
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:7
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:7
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:3
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:1
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:1
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:2
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:2
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c102f0: Failure in SSL library, usually a protocol error
E/GreendotCorp(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17525): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c102f0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17525): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17525): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17525): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17525): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17525): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17525): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17525): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17525): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17525): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c17040: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		... 19 more
W/System.err(17525): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c17040: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 		... 18 more
W/System.err(17525): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c102f0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 	... 18 more
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791344, downTime=14791344, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a980828 attribute=android.view.inputmethod.EditorInfo@4adb3848, token = android.os.BinderProxy@4ab31a20
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791350, downTime=14791350, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4aabaa7c attribute=null, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791528, downTime=14791528, deviceId=-1, source=0x101 }
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791531, downTime=14791531, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-5.0, y[0]=1.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=7, eventTime=14791575, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=0.0, y[0]=0.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=14791575, downTime=14791572, deviceId=0, source=0x10004 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MEDIA_PREVIOUS, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14791575, downTime=14791575, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-4.0, y[0]=-1.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=6, eventTime=14791577, downTime=-1, deviceId=0, source=0x10004 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a92f5cc attribute=android.view.inputmethod.EditorInfo@4a8f5454, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab97e14 #5 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab9950c #1 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab9941c #2 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab9c838 #4 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab9ed5c #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab9ec6c #3 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4aba27e0 #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/ActivityManager(  346): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 17525
W/PhoneFallbackEventHandler(17525): No activity found for android.intent.action.CALL_BUTTON.
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792030, downTime=14792030, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a971068 attribute=null, token = android.os.BinderProxy@4ab31a20
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4aaabe10 attribute=android.view.inputmethod.EditorInfo@4aaaa18c, token = android.os.BinderProxy@4ab31a20
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 346
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4aba965c #3 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abaaec8 #3 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792166, downTime=14792166, deviceId=-1, source=0x101 }
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_3, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792212, downTime=14792212, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_PAGE_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792212, downTime=14792212, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792214, downTime=14792214, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4aa68eb4 attribute=android.view.inputmethod.EditorInfo@4aa629b0, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792229, downTime=14792229, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4aa7b534 attribute=null, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abb0d18 #3 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/WindowManager(  346): updateFocusedWindowLocked, focusedAppToken is null.
W/InputMethodManagerService(  346): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4ab0cb44 (uid=10128 pid=17525)
W/ViewRootImpl(  531): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=0.0, y[0]=4.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=1, eventTime=14792405, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(  531): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_BUTTON_1, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792405, downTime=14792405, deviceId=-1, source=0x101 }
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/InputMethodManagerService(  346): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4ab0cb44 (uid=10128 pid=17525)
W/InputMethodManagerService(  346): Starting input on non-focused client com.android.internal.view.IInputMethodClient$Stub$Proxy@4ab0cb44 (uid=10128 pid=17525)
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputEventReceiver(  531): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  531): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_F10, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792459, downTime=14792459, deviceId=-1, source=0x101 }
W/ViewRootImpl(  531): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=332.3513, y[0]=-453.27863, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=14792449, downTime=14792448, deviceId=0, source=0x1002 }
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-1.0, y[0]=2.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=8, eventTime=14792461, downTime=-1, deviceId=0, source=0x10004 }
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792498, downTime=14792498, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792526, downTime=14792526, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_BUTTON_THUMBL, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792527, downTime=14792527, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792527, downTime=14792527, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792529, downTime=14792529, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792530, downTime=14792530, deviceId=-1, source=0x101 }
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ac16db8 attribute=null, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abb6c70 #3 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abb7f84 #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abb935c #4 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abba574 #5 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/InputDispatcher(  346): Dropped event because of pending overdue app switch.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_VOLUME_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792786, downTime=14792786, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a99ecbc attribute=android.view.inputmethod.EditorInfo@4ae57bb8, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792846, downTime=14792846, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14792846, downTime=14792846, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-5.0, y[0]=-2.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=19, eventTime=14792852, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=0.0, y[0]=0.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=14792853, downTime=14792850, deviceId=0, source=0x10004 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a911930 attribute=android.view.inputmethod.EditorInfo@4a900848, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abc1f1c #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
D/dalvikvm(17525): GC_CONCURRENT freed 1602K, 16% free 9124K/10788K, paused 2ms+1ms, total 8ms
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4aa6b1ec #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a927850 #5 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a9212d0 #1 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a9072d0 #4 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793014, downTime=14793014, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793015, downTime=14793015, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793018, downTime=14793018, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4adce958 attribute=android.view.inputmethod.EditorInfo@4ad81154, token = android.os.BinderProxy@4ab31a20
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:1
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:2
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793084, downTime=14793084, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793096, downTime=14793096, deviceId=-1, source=0x101 }
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:1
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:1
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:2
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:2
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:2
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:3
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:3
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793099, downTime=14793099, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793103, downTime=14793103, deviceId=-1, source=0x101 }
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 sel={act=android.intent.action.MAIN cat=[android.intent.category.APP_MUSIC]}} from pid 346
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: okhttp3.Route nextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:2
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:8
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:8
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:8
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:8
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:2
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:2
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:2
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:2
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
V/FlingTracker(  531): computeCurrentVelocity warning: totalweight=0
V/FlingTracker(  531): java.lang.Throwable
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelView$FlingTracker.computeCurrentVelocity(PanelView.java:162)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelView$3.onTouch(PanelView.java:462)
V/FlingTracker(  531): 	at android.view.View.dispatchTouchEvent(View.java:7701)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.NotificationPanelView.onTouchEvent(NotificationPanelView.java:138)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PanelBar.onTouchEvent(PanelBar.java:130)
V/FlingTracker(  531): 	at com.android.systemui.statusbar.phone.PhoneStatusBarView.onTouchEvent(PhoneStatusBarView.java:201)
V/FlingTracker(  531): 	at android.view.View.dispatchTouchEvent(View.java:7706)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2210)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1945)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:2216)
V/FlingTracker(  531): 	at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1959)
V/FlingTracker(  531): 	at android.view.View.dispatchPointerEvent(View.java:7886)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:3978)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:3857)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3549)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3606)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3473)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3442)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3450)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3423)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:5626)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:5606)
V/FlingTracker(  531): 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:5577)
V/FlingTracker(  531): 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:5706)
V/FlingTracker(  531): 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
V/FlingTracker(  531): 	at android.os.MessageQueue.nativePollOnce(Native Method)
V/FlingTracker(  531): 	at android.os.MessageQueue.next(MessageQueue.java:138)
V/FlingTracker(  531): 	at android.os.Looper.loop(Looper.java:123)
V/FlingTracker(  531): 	at android.app.ActivityThread.main(ActivityThread.java:5019)
V/FlingTracker(  531): 	at java.lang.reflect.Method.invokeNative(Native Method)
V/FlingTracker(  531): 	at java.lang.reflect.Method.invoke(Method.java:515)
V/FlingTracker(  531): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
V/FlingTracker(  531): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
V/FlingTracker(  531): 	at dalvik.system.NativeStart.main(Native Method)
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:2
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:2
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:7
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:7
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:7
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:7
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:7
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c10e50: Failure in SSL library, usually a protocol error
E/GreendotCorp(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17525): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c10e50: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17525): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17525): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17525): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17525): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17525): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17525): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17525): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17525): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17525): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bda0c0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		... 19 more
W/System.err(17525): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7bda0c0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 		... 18 more
W/System.err(17525): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c10e50: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 	... 18 more
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793161, downTime=14793161, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_MULTIPLE, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x400, repeatCount=2, eventTime=14793164, downTime=14793164, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14793164, downTime=14793164, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14793164, downTime=14793164, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14793165, downTime=14793165, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x400, repeatCount=0, eventTime=14793165, downTime=14793165, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793164, downTime=14793164, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793165, downTime=14793165, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793210, downTime=14793210, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ab4c190 attribute=null, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793211, downTime=14793211, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793217, downTime=14793217, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4acdc810 attribute=android.view.inputmethod.EditorInfo@4acc1e40, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab7c668 #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab7dc50 #4 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/WindowManager(  346): updateFocusedWindowLocked, focusedAppToken is null.
W/ViewRootImpl(  531): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793412, downTime=14793412, deviceId=-1, source=0x101 }
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10200000 cmp=com.vphone.launcher/.Launcher} from pid 346
W/ViewRootImpl(  531): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793417, downTime=14793417, deviceId=-1, source=0x101 }
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/InputEventReceiver(  531): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  531): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(  531): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(  531): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=0.0, y[0]=360.393, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=2, eventTime=14793442, downTime=14793441, deviceId=0, source=0x1002 }
W/ViewRootImpl(  531): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=0.0, y[0]=-5.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=14793440, downTime=-1, deviceId=0, source=0x10004 }
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/ViewRootImpl(17525): Dropping event due to root view being removed: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=0.0, y[0]=321.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=14793450, downTime=14793450, deviceId=0, source=0x1002 }
W/ViewRootImpl(17525): Dropping event due to root view being removed: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-0.47615814, y[0]=305.90808, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=14793450, downTime=14793450, deviceId=0, source=0x1002 }
W/ViewRootImpl(17525): Dropping event due to root view being removed: MotionEvent { action=ACTION_UP, id[0]=0, x[0]=-5.3943024, y[0]=302.8451, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=14793450, downTime=14793450, deviceId=0, source=0x1002 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_COMMA, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793472, downTime=14793472, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793474, downTime=14793474, deviceId=-1, source=0x101 }
W/ContextImpl(  346): Calling a method in the system process without a qualified user: android.app.ContextImpl.sendBroadcast:1123 com.android.server.InputMethodManagerService.hideCurrentInputLocked:1880 com.android.server.InputMethodManagerService.windowGainedFocus:1968 com.android.internal.view.IInputMethodManager$Stub.onTransact:221 com.android.server.InputMethodManagerService.onTransact:818 
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab830f0 #1 id=0x7f0d0139} not updated inline; expected state 3 found 2
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=-0.0)
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab39e78 #1 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/ActivityManager(  346): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 17525
W/PhoneFallbackEventHandler(17525): No activity found for android.intent.action.CALL_BUTTON.
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Initializing session...
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] Clearing session and data...
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r5 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:specialinvoke $r11.<okhttp3.Request$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:specialinvoke $r1.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i3 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, $i0, $i2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i3, $i2, "@/\\?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i0 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i3, $i1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i3, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:$i5 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:$i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "/\\")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>	sig:$z1 = specialinvoke $r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i0, $i4, $z0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i0, $i5)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>	sig:$r4 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r4 = virtualinvoke $r0.<okhttp3.MediaType: java.nio.charset.Charset charset()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l5, $l2, $l3)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>	sig:specialinvoke $r0.<okhttp3.RequestBody: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>	sig:specialinvoke $r3.<okhttp3.RequestBody$2: void <init>(okhttp3.MediaType,int,byte[],int)>($r0, $i1, $r1, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>	sig:$r2 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int)>($r0, $r1, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>	sig:$r7 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,byte[])>($r0, $r6)	timediff:1
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r23 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r22, $r5)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>	sig:$z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r23)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>	sig:$r0 = virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(java.util.List,okhttp3.Request$Builder)>	sig:virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r15 = virtualinvoke $r11.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>	sig:specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1)	timediff:0
I/System.out(17525): body:<com.gobank.network.HttpClientGdcProvider: void a(com.gobank.network.NetworkPacket)>	sig:$r16 = virtualinvoke $r14.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r15)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void executed(okhttp3.RealCall)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponseWithInterceptorChain(boolean)>	sig:specialinvoke $r1.<okhttp3.RealCall$ApplicationInterceptorChain: void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean)>($r0, 0, $r2, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.RealCall: okhttp3.OkHttpClient access$300(okhttp3.RealCall)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall$ApplicationInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>	sig:$r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: java.util.List interceptors()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.RequestBody body()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r4 = virtualinvoke $r2.<okhttp3.RequestBody: okhttp3.MediaType contentType()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r5 = virtualinvoke $r4.<okhttp3.MediaType: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Type", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$l1 = virtualinvoke $r2.<okhttp3.RequestBody: long contentLength()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Content-Length", $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>	sig:virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Transfer-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r1 = virtualinvoke $r3.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r6 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: boolean isHttps()>	sig:$z0 = virtualinvoke $r1.<okhttp3.HttpUrl: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$z0 = virtualinvoke $r1.<okhttp3.Request: boolean isHttps()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r2 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r3 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r4 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$i0 = virtualinvoke $r6.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r8 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r9 = virtualinvoke $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r10 = virtualinvoke $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r11 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r12 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r13 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:$r14 = virtualinvoke $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:specialinvoke $r13.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder scheme(java.lang.String)>($r12)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$r0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>	sig:$r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>	sig:$r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder host(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r13 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder port(int)>($i0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>	sig:$r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>	sig:$r5 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r5, $z0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r4 = specialinvoke $r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>	sig:$r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>	sig:specialinvoke $r0.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>	sig:specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r14 = virtualinvoke $r13.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r9 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>	sig:$r10 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>	sig:specialinvoke $r5.<okhttp3.Address: void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)>($r7, $i0, $r8, $r9, $r2, $r3, $r4, $r10, $r11, $r12, $r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:$r7 = staticinvoke <okhttp3.internal.http.HttpEngine: okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request)>($r1, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>	sig:$r3 = virtualinvoke $r1.<okhttp3.internal.Internal: okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: okhttp3.internal.RouteDatabase routeDatabase()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r5 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:$r6 = virtualinvoke $r1.<okhttp3.Address: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: java.net.ProxySelector proxySelector()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i2, "?#")	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.util.List encodedPathSegments()>	sig:$i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i0, $i2, 47)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r4 = virtualinvoke $r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>	sig:$r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>	sig:$r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r3, "[]", 1, 1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: int effectivePort()>	sig:$i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl$Builder: int effectivePort()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl$Builder: java.lang.String toString()>	sig:staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:$r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>()	timediff:0
I/System.out(17525): body:<okhttp3.HttpUrl: java.net.URI uri()>	sig:specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.net.URI uri()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>	sig:$r3 = virtualinvoke $r6.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r7)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy)>($r5, $r6)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>	sig:specialinvoke $r3.<okhttp3.internal.http.RouteSelector: void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase)>($r2, $r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>	sig:specialinvoke $r3.<okhttp3.internal.http.StreamAllocation: void <init>(okhttp3.ConnectionPool,okhttp3.Address)>($r6, $r7)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:specialinvoke $r6.<okhttp3.internal.http.HttpEngine: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response)>($r7, $r1, 0, 0, $z0, null, null, null)	timediff:1
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r2 = staticinvoke <okhttp3.Request: okhttp3.HttpUrl access$600(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.Request: java.lang.String access$700(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r4 = staticinvoke <okhttp3.Request: okhttp3.RequestBody access$800(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r5 = staticinvoke <okhttp3.Request: java.lang.Object access$900(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r6 = staticinvoke <okhttp3.Request: okhttp3.Headers access$1000(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request)>	sig:$r7 = virtualinvoke $r6.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request$Builder: void <init>(okhttp3.Request)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.Request$Builder newBuilder()>	sig:specialinvoke $r1.<okhttp3.Request$Builder: void <init>(okhttp3.Request,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r2 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Request$Builder newBuilder()>()	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Host")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r1 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i0 = virtualinvoke $r0.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$r3 = virtualinvoke $r0.<okhttp3.HttpUrl: java.lang.String scheme()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>	sig:$i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 0)	timediff:1
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Connection", "Keep-Alive")	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Accept-Encoding")	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:specialinvoke $r0.<okhttp3.Headers$Builder: void checkNameAndValue(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>	sig:virtualinvoke $r0.<okhttp3.Headers$Builder: okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>	sig:virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip")	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r6 = virtualinvoke $r5.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r7 = interfaceinvoke $r6.<okhttp3.CookieJar: java.util.List loadForRequest(okhttp3.HttpUrl)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: java.lang.String get(java.lang.String)>	sig:$r1 = staticinvoke <okhttp3.Headers: java.lang.String get(java.lang.String[],java.lang.String)>($r2, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: java.lang.String header(java.lang.String)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Headers: java.lang.String get(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("User-Agent")	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r2 = staticinvoke <okhttp3.Request$Builder: okhttp3.HttpUrl access$000(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r3 = staticinvoke <okhttp3.Request$Builder: java.lang.String access$100(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r4 = staticinvoke <okhttp3.Request$Builder: okhttp3.Headers$Builder access$200(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r2 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>	sig:$r3 = staticinvoke <okhttp3.Headers$Builder: java.util.List access$000(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>	sig:specialinvoke $r0.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Headers$Builder: okhttp3.Headers build()>	sig:specialinvoke $r1.<okhttp3.Headers: void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r5 = virtualinvoke $r4.<okhttp3.Headers$Builder: okhttp3.Headers build()>()	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r6 = staticinvoke <okhttp3.Request$Builder: okhttp3.RequestBody access$300(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder)>	sig:$r7 = staticinvoke <okhttp3.Request$Builder: java.lang.Object access$400(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>	sig:specialinvoke $r0.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.Request$Builder: okhttp3.Request build()>	sig:specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder,okhttp3.Request$1)>($r0, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>	sig:$r1 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.http.HttpEngine: okhttp3.Request networkRequest(okhttp3.Request)>($r4)	timediff:1
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>	sig:$r2 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r8 = virtualinvoke $r7.<okhttp3.internal.Internal: okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: void <init>(long,okhttp3.Request,okhttp3.Response)>($l0, $r4, $r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>	sig:specialinvoke $r0.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>	sig:specialinvoke $r3.<okhttp3.internal.http.CacheStrategy: void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1)>($r2, null, null)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy getCandidate()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$i5 = virtualinvoke $r0.<okhttp3.Headers: int size()>()	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r2 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String name(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:$r3 = virtualinvoke $r0.<okhttp3.Headers: java.lang.String value(int)>($i4)	timediff:0
I/System.out(17525): body:<okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>	sig:specialinvoke $r6.<okhttp3.CacheControl: void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)>($z7, $z0, $i0, $i1, $z1, $z2, $z3, $i2, $i3, $z4, $z5, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.Request: okhttp3.CacheControl cacheControl()>	sig:$r1 = staticinvoke <okhttp3.CacheControl: okhttp3.CacheControl parse(okhttp3.Headers)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.CacheControl cacheControl()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>	sig:$z0 = virtualinvoke $r3.<okhttp3.CacheControl: boolean onlyIfCached()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: void sendRequest()>	sig:$r1 = virtualinvoke $r3.<okhttp3.internal.http.CacheStrategy$Factory: okhttp3.internal.http.CacheStrategy get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String method()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i0 = virtualinvoke $r2.<okhttp3.OkHttpClient: int connectTimeoutMillis()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i1 = virtualinvoke $r2.<okhttp3.OkHttpClient: int readTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$i2 = virtualinvoke $r2.<okhttp3.OkHttpClient: int writeTimeoutMillis()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpStream connect()>	sig:$z1 = virtualinvoke $r2.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure()>()	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>	sig:$r4 = virtualinvoke $r1.<okhttp3.ConnectionPool: okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r3 = virtualinvoke $r8.<okhttp3.internal.Internal: okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation)>($r9, $r2, $r0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r6 = virtualinvoke $r1.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r15 = virtualinvoke $r7.<okhttp3.Address: okhttp3.Dns dns()>()	timediff:0
I/System.out(17525): body:<okhttp3.Dns$1: java.util.List lookup(java.lang.String)>	sig:$r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:$r16 = interfaceinvoke $r15.<okhttp3.Dns: java.util.List lookup(java.lang.String)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>	sig:specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, $i0)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteSelector: void resetNextInetSocketAddress(java.net.Proxy)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r2 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.Proxy nextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r3 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: java.net.InetSocketAddress nextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:specialinvoke $r5.<okhttp3.Route: void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress)>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = virtualinvoke $r6.<okhttp3.internal.RouteDatabase: boolean shouldPostpone(okhttp3.Route)>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>	sig:$r5 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: okhttp3.Route nextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r10 = virtualinvoke $r11.<okhttp3.internal.http.RouteSelector: okhttp3.Route next()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>	sig:specialinvoke $r0.<okhttp3.internal.framed.FramedConnection$Listener: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:specialinvoke $r3.<okhttp3.internal.io.RealConnection: void <init>(okhttp3.Route)>($r10)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void acquire(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:virtualinvoke $r1.<okhttp3.ConnectionPool: void put(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:virtualinvoke $r8.<okhttp3.internal.Internal: void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r1, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean)>	sig:$r14 = virtualinvoke $r2.<okhttp3.Address: java.util.List connectionSpecs()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: void <init>(java.util.List)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r6 = virtualinvoke $r8.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r9 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r10 = virtualinvoke $r8.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:10
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:10
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
D/dalvikvm(17525): GC_CONCURRENT freed 2035K, 19% free 9078K/11176K, paused 1ms+1ms, total 6ms
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:1
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793634, downTime=14793634, deviceId=-1, source=0x101 }
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:specialinvoke $r13.<okhttp3.internal.http.RouteException: void <init>(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r17 = virtualinvoke $r6.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$r18 = virtualinvoke $r9.<okhttp3.Address: javax.net.SocketFactory socketFactory()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<a.a.d: void setOption(int,java.lang.Object)>	sig:virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>($i0, $r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r3.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>	sig:virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0)	timediff:11
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r5.<okhttp3.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r2, $r6, $i0)	timediff:11
I/System.out(17525): body:<okio.Okio: okio.Source source(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>()	timediff:0
I/System.out(17525): body:<okio.Okio: okio.Sink sink(java.net.Socket)>	sig:$r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = virtualinvoke $r10.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean requiresTunnel()>	sig:$r3 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r2.<okhttp3.Route: boolean requiresTunnel()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r5 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$i1 = virtualinvoke $r7.<okhttp3.HttpUrl: int port()>()	timediff:0
I/System.out(17525): body:<a.a.d: void <init>(a.a.fa,a.a.ec,java.net.SocketImpl)>	sig:specialinvoke $r0.<java.net.SocketImpl: void <init>()>()	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean nonEmptyIntersection(java.lang.String[],java.lang.String[])>($r3, $r2)	timediff:1
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>	sig:$z0 = virtualinvoke $r4.<okhttp3.ConnectionSpec: boolean isCompatible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.ConnectionSpecSelector: boolean isFallbackPossible(javax.net.ssl.SSLSocket)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>	sig:$r3 = staticinvoke <okhttp3.internal.Util: java.util.List intersect(java.lang.Object[],java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r4 = staticinvoke <okhttp3.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "java/lang/String", $r2, $r5)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean contains(java.lang.String[],java.lang.String)>($r2, "TLS_FALLBACK_SCSV")	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$400(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$500(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec: java.lang.String[] access$600(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec: boolean access$700(okhttp3.ConnectionSpec)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:specialinvoke $r6.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r0)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r5)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$000(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$r2 = staticinvoke <okhttp3.ConnectionSpec$Builder: java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>	sig:$z0 = staticinvoke <okhttp3.ConnectionSpec$Builder: boolean access$300(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>	sig:specialinvoke $r0.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>	sig:specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1)>($r0, null)	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = virtualinvoke $r6.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>()	timediff:1
I/System.out(17525): body:<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>	sig:$r0 = specialinvoke $r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0)	timediff:3
I/System.out(17525): body:<okhttp3.OkHttpClient$1: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>	sig:virtualinvoke $r1.<okhttp3.ConnectionSpec: void apply(javax.net.ssl.SSLSocket,boolean)>($r2, $z0)	timediff:3
I/System.out(17525): body:<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>	sig:virtualinvoke $r9.<okhttp3.internal.Internal: void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)>($r4, $r1, $z0)	timediff:3
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r10 = virtualinvoke $r1.<okhttp3.internal.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r9)	timediff:4
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$z0 = virtualinvoke $r10.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r7 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r8 = virtualinvoke $r7.<okhttp3.HttpUrl: java.lang.String host()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r12 = virtualinvoke $r5.<okhttp3.Address: java.util.List protocols()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>	sig:$r4 = staticinvoke <okhttp3.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>	sig:$r4 = specialinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>	sig:$r1 = virtualinvoke $r0.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Platform$Android: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>	sig:virtualinvoke $r4.<okhttp3.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r5)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r9, $r8, $r12)	timediff:1
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/System.out(17525): body:<a.a.d: java.lang.Object getOption(int)>	sig:$r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>($i0)	timediff:0
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:$r11 = staticinvoke <okhttp3.internal.Platform: okhttp3.internal.Platform get()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:virtualinvoke $r11.<okhttp3.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r9)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r4)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.Util: void closeQuietly(java.net.Socket)>	sig:virtualinvoke $r0.<java.net.Socket: void close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r16)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.RouteException: void addSuppressedIfPossible(java.io.IOException,java.io.IOException)>($r1, $r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:virtualinvoke $r13.<okhttp3.internal.http.RouteException: void addConnectException(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.internal.io.RealConnection: void connect(int,int,int,java.util.List,boolean)>	sig:$z1 = virtualinvoke $r4.<okhttp3.internal.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>($r19)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r4 = virtualinvoke $r1.<okhttp3.Route: java.net.Proxy proxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:$r5 = virtualinvoke $r4.<java.net.Proxy: java.net.Proxy$Type type()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: int hashCode()>	sig:$i1 = virtualinvoke $r1.<okhttp3.HttpUrl: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r1.<okhttp3.Address: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i1 = virtualinvoke $r2.<java.net.Proxy: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Route: int hashCode()>	sig:$i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int hashCode()>()	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.HttpUrl: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r13, $r14)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r15, $r16)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r17, $r18)	timediff:0
I/System.out(17525): body:<okhttp3.Address: boolean equals(java.lang.Object)>	sig:$z0 = staticinvoke <okhttp3.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r19, $r20)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r4.<okhttp3.Address: boolean equals(java.lang.Object)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r5.<java.net.Proxy: boolean equals(java.lang.Object)>($r6)	timediff:0
I/System.out(17525): body:<okhttp3.Route: boolean equals(java.lang.Object)>	sig:$z0 = virtualinvoke $r7.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>	sig:virtualinvoke $r11.<okhttp3.internal.RouteDatabase: void failed(okhttp3.Route)>($r1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:virtualinvoke $r5.<okhttp3.internal.http.RouteSelector: void connectFailed(okhttp3.Route,java.io.IOException)>($r4, $r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void release(okhttp3.internal.io.RealConnection)>($r3)	timediff:0
I/System.out(17525): body:<okhttp3.OkHttpClient$1: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>	sig:$z0 = virtualinvoke $r1.<okhttp3.ConnectionPool: boolean connectionBecameIdle(okhttp3.internal.io.RealConnection)>($r2)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$z2 = virtualinvoke $r6.<okhttp3.internal.Internal: boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection)>($r7, $r3)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:$r8 = virtualinvoke $r1.<okhttp3.internal.io.RealConnection: java.net.Socket socket()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>	sig:staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:virtualinvoke $r0.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>($r1)	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextInetSocketAddress()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextProxy()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.RouteSelector: boolean hasNext()>	sig:$z0 = specialinvoke $r0.<okhttp3.internal.http.RouteSelector: boolean hasNextPostponed()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>	sig:$z0 = virtualinvoke $r4.<okhttp3.internal.http.RouteSelector: boolean hasNext()>()	timediff:1
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>	sig:$z2 = virtualinvoke $r3.<okhttp3.internal.http.StreamAllocation: boolean recover(java.io.IOException,okio.Sink)>($r1, $r2)	timediff:2
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r6 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.HttpEngine recover(java.io.IOException,okio.Sink)>($r8, null)	timediff:2
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r8 = virtualinvoke $r13.<okhttp3.internal.http.RouteException: java.io.IOException getLastConnectException()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(1, 0, 1)	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>	sig:virtualinvoke $r5.<okhttp3.internal.http.StreamAllocation: void connectionFailed(java.io.IOException)>(null)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:$r12 = virtualinvoke $r6.<okhttp3.internal.http.HttpEngine: okhttp3.internal.http.StreamAllocation close()>()	timediff:0
I/System.out(17525): body:<okhttp3.internal.http.StreamAllocation: void release()>	sig:specialinvoke $r0.<okhttp3.internal.http.StreamAllocation: void deallocate(boolean,boolean,boolean)>(0, 1, 0)	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response getResponse(okhttp3.Request,boolean)>	sig:virtualinvoke $r12.<okhttp3.internal.http.StreamAllocation: void release()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:$r1 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>()	timediff:0
I/System.out(17525): body:<okhttp3.RealCall: okhttp3.Response execute()>	sig:virtualinvoke $r1.<okhttp3.Dispatcher: void finished(okhttp3.Call)>($r0)	timediff:0
E/GreendotCorp(17525): fid:ce943062-fd33-4c4f-b0c0-0823ce7abebc[E0:19:C3:8B:23:1F:56:38:E8:EE:F5:5F:B3:EF:8A:AF] javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c1beb0: Failure in SSL library, usually a protocol error
E/GreendotCorp(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000) Error executing request '-1'
W/System.err(17525): javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c1beb0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectTls(SourceFile:195)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connectSocket(SourceFile:148)
W/System.err(17525): 	at okhttp3.internal.io.RealConnection.connect(SourceFile:111)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findConnection(SourceFile:188)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.findHealthyConnection(SourceFile:127)
W/System.err(17525): 	at okhttp3.internal.http.StreamAllocation.newStream(SourceFile:97)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.connect(SourceFile:289)
W/System.err(17525): 	at okhttp3.internal.http.HttpEngine.sendRequest(SourceFile:241)
W/System.err(17525): 	at okhttp3.RealCall.getResponse(SourceFile:240)
W/System.err(17525): 	at okhttp3.RealCall$ApplicationInterceptorChain.proceed(SourceFile:198)
W/System.err(17525): 	at okhttp3.RealCall.getResponseWithInterceptorChain(SourceFile:160)
W/System.err(17525): 	at okhttp3.RealCall.execute(SourceFile:57)
W/System.err(17525): 	at com.gobank.network.HttpClientGdcProvider.a(SourceFile:153)
W/System.err(17525): 	at com.gobank.network.NetworkProvider.a(SourceFile:120)
W/System.err(17525): 	at com.gobank.network.NetworkProvider$1.run(SourceFile:227)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
W/System.err(17525): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
W/System.err(17525): 	at java.lang.Thread.run(Thread.java:841)
W/System.err(17525): 	Suppressed: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b8a420: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		... 19 more
W/System.err(17525): 	Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7b8a420: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 		at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 		at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 		... 18 more
W/System.err(17525): Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0xb7c1beb0: Failure in SSL library, usually a protocol error
W/System.err(17525): error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x84e6b770:0x00000000)
W/System.err(17525): 	at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err(17525): 	at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)
W/System.err(17525): 	... 18 more
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793746, downTime=14793746, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-4.0, y[0]=-2.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=11, eventTime=14793744, downTime=-1, deviceId=0, source=0x10004 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_ADD, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793750, downTime=14793750, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4b1b38c0 attribute=null, token = android.os.BinderProxy@4ab31a20
W/InputEventReceiver(17525): Attempted to finish an input event but the input event receiver has already been disposed.
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a9a779c attribute=android.view.inputmethod.EditorInfo@4aa013bc, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793889, downTime=14793889, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_NUMPAD_1, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793892, downTime=14793892, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MOVE_END, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793892, downTime=14793892, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793893, downTime=14793893, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793896, downTime=14793896, deviceId=-1, source=0x101 }
I/InputDispatcher(  346): Dropped event because of pending overdue app switch.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793899, downTime=14793899, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793914, downTime=14793914, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a81b8dc attribute=null, token = android.os.BinderProxy@4ab31a20
I/ActivityManager(  346): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 17525
W/PhoneFallbackEventHandler(17525): No activity found for android.intent.action.CALL_BUTTON.
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793945, downTime=14793945, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_F3, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793949, downTime=14793949, deviceId=-1, source=0x101 }
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputManager(  346): Input event injection from pid 17452 failed.
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ace263c attribute=android.view.inputmethod.EditorInfo@4ad10120, token = android.os.BinderProxy@4ab31a20
W/InputManager(  346): Input event injection from pid 17452 failed.
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=0.0)
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14793997, downTime=14793997, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4a999eac attribute=null, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_LEFT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794060, downTime=14794060, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794062, downTime=14794062, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794064, downTime=14794064, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794065, downTime=14794065, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794066, downTime=14794066, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794117, downTime=14794117, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4aa71598 attribute=null, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794211, downTime=14794211, deviceId=-1, source=0x101 }
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ad89634 attribute=null, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4a904c24 #4 id=0x7f0d0139} not updated inline; expected state 3 found 2
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4ab275ec #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
I/ActivityManager(  346): START u0 {act=android.intent.action.CALL_BUTTON flg=0x10000000} from pid 17525
W/PhoneFallbackEventHandler(17525): No activity found for android.intent.action.CALL_BUTTON.
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=4.0, y[0]=3.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=9, eventTime=14794323, downTime=-1, deviceId=0, source=0x10004 }
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_DOWN, id[0]=0, x[0]=0.0, y[0]=0.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=0, eventTime=14794324, downTime=14794321, deviceId=0, source=0x10004 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794324, downTime=14794324, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794361, downTime=14794361, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_CENTER, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794363, downTime=14794363, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794365, downTime=14794365, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794366, downTime=14794366, deviceId=-1, source=0x101 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4adcc5a8 attribute=android.view.inputmethod.EditorInfo@4ae7c008, token = android.os.BinderProxy@4ab31a20
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_UP, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794368, downTime=14794368, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794379, downTime=14794379, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_DOWN, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794380, downTime=14794380, deviceId=-1, source=0x101 }
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_DPAD_RIGHT, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794381, downTime=14794381, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
W/ViewRootImpl(17525): Dropping event due to no window focus: MotionEvent { action=ACTION_MOVE, id[0]=0, x[0]=-2.0, y[0]=-5.0, toolType[0]=TOOL_TYPE_UNKNOWN, buttonState=0, metaState=0, flags=0x0, edgeFlags=0x0, pointerCount=1, historySize=5, eventTime=14794444, downTime=-1, deviceId=0, source=0x10004 }
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4aad45fc attribute=null, token = android.os.BinderProxy@4ab31a20
W/FragmentManager(17525): moveToState: Fragment state for PreLoginWelcomeActivity$MainPageView{4abab5e0 #0 id=0x7f0d0139} not updated inline; expected state 3 found 2
V/PanelView(  531): animationTick called with dtms=0; nothing to do (h=0.0 v=-4500.0)
I/ActivityManager(  346): START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.gobank/.activity.RootActivity} from pid 17452
D/dalvikvm(  346): GC_CONCURRENT freed 2125K, 62% free 13639K/35136K, paused 0ms+3ms, total 26ms
W/ViewRootImpl(17525): Dropping event due to no window focus: KeyEvent { action=ACTION_DOWN, keyCode=KEYCODE_MENU, scanCode=0, metaState=0, flags=0x8, repeatCount=0, eventTime=14794589, downTime=14794589, deviceId=-1, source=0x101 }
W/EGL_emulation(17525): eglSurfaceAttrib not implemented 3093 12436
I/AndroidRuntime(17452): VM exiting with result code 0.
W/InputMethodManagerService(  346): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@4ad56828 attribute=android.view.inputmethod.EditorInfo@4b4c0bd8, token = android.os.BinderProxy@4ab31a20
